[
  {
    "id": "frontend-development-react-typescript-shadcn",
    "title": "react-typescript-shadcn",
    "description": "# React TypeScript with Shadcn/UI Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# React TypeScript with Shadcn/UI Development Instructions\n\n## Project Context\n- Modern React development\n- TypeScript integration\n- Shadcn/UI component system\n- Tailwind CSS styling\n- Accessibility-first approach\n\n## Code Style Guidelines\n- TypeScript strict mode\n- Component composition patterns\n- Proper prop typing\n- Custom hook patterns\n- State management practices\n\n## Architecture Patterns\n- Feature-based organization\n- Component architecture\n- Custom hooks design\n- State management flow\n- Theme configuration\n\n## Testing Requirements\n- Component unit testing\n- Hook testing\n- Integration testing\n- Accessibility testing\n- Theme testing\n\n## Documentation Standards\n- Component documentation\n- Hook documentation\n- Theme customization\n- Accessibility notes\n- API documentation\n\n## Project-Specific Rules\n### Component Development\n```typescript\n// Component Pattern with Shadcn/UI\nimport * as React from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { cn } from '@/lib/utils'\n\ninterface FeatureCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  title: string\n  description: string\n  onAction?: () => void\n}\n\nexport const FeatureCard = React.forwardRef<HTMLDivElement, FeatureCardProps>(\n  ({ title, description, className, onAction, ...props }, ref) => {\n    return (\n      <Card\n        ref={ref}\n        className={cn('p-6 space-y-4', className)}\n        {...props}\n      >\n        <h3 className=\"text-lg font-semibold\">{title}</h3>\n        <p className=\"text-muted-foreground\">{description}</p>\n        {onAction && (\n          <Button onClick={onAction} variant=\"outline\">\n            Learn More\n          </Button>\n        )}\n      </Card>\n    )\n  }\n)\nFeatureCard.displayName = 'FeatureCard'\n\n// Custom Hook Pattern\ninterface UseFeatureState<T> {\n  data: T | null\n  isLoading: boolean\n  error: Error | null\n  reload: () => Promise<void>\n}\n\nfunction useFeatureState<T>(\n  fetchFn: () => Promise<T>\n): UseFeatureState<T> {\n  const [data, setData] = React.useState<T | null>(null)\n  const [isLoading, setIsLoading] = React.useState(false)\n  const [error, setError] = React.useState<Error | null>(null)\n\n  const fetch = React.useCallback(async () => {\n    try {\n      setIsLoading(true)\n      setError(null)\n      const result = await fetchFn()\n      setData(result)\n    } catch (e) {\n      setError(e instanceof Error ? e : new Error('Unknown error'))\n    } finally {\n      setIsLoading(false)\n    }\n  }, [fetchFn])\n\n  React.useEffect(() => {\n    fetch()\n  }, [fetch])\n\n  return {\n    data,\n    isLoading,\n    error,\n    reload: fetch\n  }\n}\n\n// Theme Configuration\nconst theme = {\n  extend: {\n    colors: {\n      border: 'hsl(var(--border))',\n      input: 'hsl(var(--input))',\n      ring: 'hsl(var(--ring))',\n      background: 'hsl(var(--background))',\n      foreground: 'hsl(var(--foreground))',\n      primary: {\n        DEFAULT: 'hsl(var(--primary))',\n        foreground: 'hsl(var(--primary-foreground))'\n      },\n      secondary: {\n        DEFAULT: 'hsl(var(--secondary))',\n        foreground: 'hsl(var(--secondary-foreground))'\n      }\n    },\n    borderRadius: {\n      lg: 'var(--radius)',\n      md: 'calc(var(--radius) - 2px)',\n      sm: 'calc(var(--radius) - 4px)'\n    }\n  }\n}\n\n// Form Pattern with Validation\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport * as z from 'zod'\n\nconst formSchema = z.object({\n  username: z.string().min(2).max(50),\n  email: z.string().email(),\n  role: z.enum(['admin', 'user'])\n})\n\nexport function UserForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: '',\n      email: '',\n      role: 'user'\n    }\n  })\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    // Handle form submission\n  }\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)}>\n      {/* Form fields using Shadcn/UI components */}\n    </form>\n  )\n}",
    "filename": "react-typescript-shadcn.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "React"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-18T09:35:35.342Z",
      "contributor": "Community"
    }
  },
  {
    "id": "mobile-development-flutter-development-guidelines",
    "title": "flutter-development-guidelines",
    "description": "# Flutter Development Guidelines",
    "category": "mobile-development",
    "subcategories": [],
    "content": "# Flutter Development Guidelines\n\n## Project Context\n- Flutter mobile development\n- Cross-platform applications\n- State management\n- UI/UX implementation\n- Performance optimization\n\n## Code Style Guidelines\n- Use Dart coding conventions\n- Follow widget composition patterns\n- Implement proper state management\n- Use proper parameter naming\n- Follow immutable state patterns\n\n## Architecture Patterns\n- Use proper ViewModel integration\n- Implement unidirectional data flow\n- Follow proper navigation patterns\n- Use proper dependency injection\n- Implement proper repository pattern\n\n## Testing Requirements\n- Write unit tests for ViewModels\n- Test widget functions\n- Implement screenshot testing\n- Test navigation flows\n- Validate state management\n\n## Documentation Standards\n- Document widget parameters\n- Include preview annotations\n- Document state management\n- Maintain architecture diagrams\n- Document theming system\n\n## Project-Specific Rules\n### Flutter Best Practices\n- Use proper recomposition scope\n- Implement proper side effects\n- Follow proper theming\n- Use proper modifier chains\n- Implement proper layout performance\n\n## Common Patterns\n```dart\n// Widget Template\nclass CustomWidget extends StatelessWidget {\n  final String text;\n  final VoidCallback onClick;\n\n  const CustomWidget({\n    Key? key,\n    required this.text,\n    required this.onClick,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onTap: onClick,\n      child: Container(\n        padding: EdgeInsets.all(16.0),\n        decoration: BoxDecoration(\n          color: Colors.blue,\n          borderRadius: BorderRadius.circular(8.0),\n        ),\n        child: Text(\n          text,\n          style: TextStyle(color: Colors.white),\n        ),\n      ),\n    );\n  }\n}\n\n// ViewModel Template\nclass CustomViewModel extends ChangeNotifier {\n  final Repository repository;\n\n  CustomViewModel(this.repository);\n\n  Future<void> fetchData() async {\n    try {\n      final data = await repository.getData();\n      // Update state\n      notifyListeners();\n    } catch (e) {\n      // Handle error\n    }\n  }\n}\n\n// Screen Template\nclass CustomScreen extends StatelessWidget {\n  final CustomViewModel viewModel;\n\n  const CustomScreen({Key? key, required this.viewModel}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Custom Screen')),\n      body: Center(\n        child: CustomWidget(\n          text: 'Click Me',\n          onClick: () => viewModel.fetchData(),\n        ),\n      ),\n    );\n  }\n}\n```",
    "filename": "flutter-development-guidelines.md",
    "tags": [
      "mobile-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-18T09:35:35.336Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-angular-novo-elements",
    "title": "angular-novo-elements",
    "description": "# Angular with Novo Elements Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Angular with Novo Elements Development Instructions\n\n## Project Context\n- Angular application development with Novo Elements\n- Enterprise UI component library\n- TypeScript-first approach\n- Modular architecture\n\n## Code Style Guidelines\n- Follow Angular style guide\n- Use TypeScript strict mode\n- Implement proper component patterns\n- Follow reactive programming patterns\n- Maintain consistent naming conventions\n\n## Architecture Patterns\n- Feature module organization\n- Smart and presentational components\n- State management best practices\n- Dependency injection patterns\n- Proper routing implementation\n\n## Testing Requirements\n- Unit tests for services and components\n- E2E testing with Cypress\n- Component testing with Angular Testing Library\n- Coverage requirements\n- Integration test patterns\n\n## Documentation Standards\n- JSDoc for components and services\n- README for feature modules\n- API documentation\n- Architecture decision records\n- Component documentation\n\n## Project-Specific Rules\n### Novo Elements Usage\n- Follow Novo Elements patterns\n- Implement proper theming\n- Use proper form controls\n- Follow accessibility guidelines\n- Maintain component hierarchy\n\n## Common Patterns\n```typescript\n// Component Template\n@Component({\n  selector: 'app-custom',\n  template: `\n    <novo-card>\n      <novo-card-title>{{ title }}</novo-card-title>\n      <novo-card-content>\n        <novo-form [form]=\"form\">\n          <!-- Form fields here -->\n        </novo-form>\n      </novo-card-content>\n    </novo-card>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomComponent implements OnInit {\n  @Input() title: string;\n  form: FormGroup;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  private initForm(): void {\n    this.form = this.fb.group({\n      // Form controls here\n    });\n  }\n}\n\n// Service Template\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomService {\n  private state$ = new BehaviorSubject<State>(initialState);\n\n  constructor(private http: HttpClient) {}\n\n  getData(): Observable<Data> {\n    return this.http.get<Data>('/api/endpoint').pipe(\n      tap(data => this.updateState(data)),\n      catchError(this.handleError)\n    );\n  }\n}",
    "filename": "angular-novo-elements.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "Angular"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-18T09:35:35.319Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-angular-typescript",
    "title": "angular-typescript",
    "description": "# Angular TypeScript Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Angular TypeScript Development Instructions\n\n## Project Context\n- Modern Angular application development\n- TypeScript strict mode enabled\n- RxJS for reactive programming\n- NgRx for state management\n- Angular Material design system\n\n## Code Style Guidelines\n- Follow official Angular style guide\n- Use TypeScript strict type checking\n- Implement proper interfaces and types\n- Follow functional programming principles\n- Maintain consistent file structure\n\n## Architecture Patterns\n- Feature-based module organization\n- Container and presentational components\n- Redux pattern with NgRx\n- Repository pattern for data access\n- Micro frontend architecture support\n\n## Testing Requirements\n- Unit tests with Jasmine/Jest\n- E2E tests with Cypress/Protractor\n- Integration tests for services\n- State management testing\n- Component isolation testing\n\n## Documentation Standards\n- TSDoc comments for public APIs\n- Component documentation\n- State management documentation\n- Architecture diagrams\n- API documentation\n\n## Project-Specific Rules\n### Component Development\n```typescript\n// Component Best Practices\n@Component({\n  selector: 'app-feature',\n  template: `\n    <ng-container *ngIf=\"data$ | async as data\">\n      <app-presentation\n        [data]=\"data\"\n        (action)=\"onAction($event)\">\n      </app-presentation>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FeatureComponent implements OnInit {\n  data$: Observable<Data>;\n  \n  constructor(private store: Store) {\n    this.data$ = this.store.select(selectData);\n  }\n  \n  onAction(event: ActionEvent): void {\n    this.store.dispatch(new Action(event));\n  }\n}\n\n// Service Pattern\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private readonly apiUrl = environment.apiUrl;\n  \n  constructor(private http: HttpClient) {}\n  \n  getData(): Observable<Data> {\n    return this.http.get<Data>(`${this.apiUrl}/data`).pipe(\n      catchError(this.handleError)\n    );\n  }\n  \n  private handleError(error: HttpErrorResponse): Observable<never> {\n    console.error('An error occurred:', error);\n    return throwError(() => error);\n  }\n}\n\n// State Management\ninterface State {\n  data: Data[];\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: State = {\n  data: [],\n  loading: false,\n  error: null\n};\n\n// Effects Pattern\n@Injectable()\nexport class DataEffects {\n  loadData$ = createEffect(() => \n    this.actions$.pipe(\n      ofType(DataActionTypes.Load),\n      mergeMap(() => this.dataService.getData()\n        .pipe(\n          map(data => new LoadSuccess(data)),\n          catchError(error => of(new LoadFailure(error)))\n        ))\n    )\n  );\n  \n  constructor(\n    private actions$: Actions,\n    private dataService: DataService\n  ) {}\n}",
    "filename": "angular-typescript.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "Angular"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-18T09:35:35.319Z",
      "contributor": "Community"
    }
  },
  {
    "id": "mobile-development-android-jetpack-compose",
    "title": "android-jetpack-compose",
    "description": "# Android Jetpack Compose Development Instructions",
    "category": "mobile-development",
    "subcategories": [],
    "content": "# Android Jetpack Compose Development Instructions\n\n## Project Context\n- Modern Android development with Jetpack Compose\n- Material 3 Design System\n- MVVM architecture\n- Kotlin-first approach\n\n## Code Style Guidelines\n- Use Kotlin coding conventions\n- Follow composable function naming patterns\n- Implement proper state hoisting\n- Use proper parameter naming\n- Follow immutable state patterns\n\n## Architecture Patterns\n- Use proper ViewModel integration\n- Implement unidirectional data flow\n- Follow proper navigation patterns\n- Use proper dependency injection\n- Implement proper repository pattern\n\n## Testing Requirements\n- Write unit tests for ViewModels\n- Test composable functions\n- Implement screenshot testing\n- Test navigation flows\n- Validate state management\n\n## Documentation Standards\n- Document composable parameters\n- Include preview annotations\n- Document state management\n- Maintain architecture diagrams\n- Document theming system\n\n## Project-Specific Rules\n### Compose Best Practices\n- Use proper recomposition scope\n- Implement proper side effects\n- Follow proper theming\n- Use proper modifier chains\n- Implement proper layout performance\n\n## Common Patterns\n```kotlin\n// Composable Template\n@Composable\nfun CustomComponent(\n    text: String,\n    modifier: Modifier = Modifier,\n    onClick: () -> Unit = {}\n) {\n    Surface(\n        modifier = modifier,\n        onClick = onClick\n    ) {\n        Text(\n            text = text,\n            style = MaterialTheme.typography.bodyLarge\n        )\n    }\n}\n\n// ViewModel Template\nclass CustomViewModel @Inject constructor(\n    private val repository: Repository\n) : ViewModel() {\n    private val _uiState = MutableStateFlow(UiState())\n    val uiState: StateFlow<UiState> = _uiState.asStateFlow()\n\n    fun handleIntent(intent: UiIntent) {\n        viewModelScope.launch {\n            when (intent) {\n                is UiIntent.Load -> loadData()\n                is UiIntent.Refresh -> refreshData()\n            }\n        }\n    }\n}\n\n// Screen Template\n@Composable\nfun Screen(\n    viewModel: CustomViewModel = hiltViewModel()\n) {\n    val uiState by viewModel.uiState.collectAsState()\n    \n    LaunchedEffect(Unit) {\n        viewModel.handleIntent(UiIntent.Load)\n    }\n    \n    when {\n        uiState.isLoading -> LoadingIndicator()\n        uiState.error != null -> ErrorState(uiState.error)\n        else -> Content(uiState.data)\n    }\n}",
    "filename": "android-jetpack-compose.md",
    "tags": [
      "mobile-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-18T09:35:35.319Z",
      "contributor": "Community"
    }
  },
  {
    "id": "devops-knative-istio-typesense-gpu",
    "title": "knative-istio-typesense-gpu",
    "description": "# Knative Istio Typesense GPU Development Instructions",
    "category": "devops",
    "subcategories": [],
    "content": "# Knative Istio Typesense GPU Development Instructions\n\n## Project Context\n- Knative serverless platform\n- Istio service mesh\n- Typesense search engine\n- GPU resource management\n- Cloud-native architecture\n\n## Code Style Guidelines\n- Kubernetes manifests\n- Istio configuration\n- Resource definitions\n- GPU specifications\n- Service configuration\n\n## Architecture Patterns\n- Serverless architecture\n- Service mesh routing\n- Search engine scaling\n- GPU resource allocation\n- High availability\n\n## Testing Requirements\n- Load testing\n- Integration testing\n- Performance testing\n- Failover testing\n- Resource monitoring\n\n## Documentation Standards\n- Architecture diagrams\n- Resource specifications\n- Configuration guides\n- Monitoring guides\n- Deployment guides\n\n## Project-Specific Rules\n### Infrastructure Patterns\n```yaml\n# Knative Service Pattern\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  name: search-service\n  namespace: search\nspec:\n  template:\n    metadata:\n      annotations:\n        autoscaling.knative.dev/target: \"100\"\n        autoscaling.knative.dev/class: \"kpa.autoscaling.knative.dev\"\n    spec:\n      containers:\n      - image: typesense/typesense:latest\n        resources:\n          limits:\n            nvidia.com/gpu: 1\n            memory: \"4Gi\"\n            cpu: \"2\"\n          requests:\n            memory: \"2Gi\"\n            cpu: \"1\"\n        env:\n        - name: TYPESENSE_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: typesense-secrets\n              key: api-key\n        ports:\n        - containerPort: 8108\n\n# Istio Virtual Service Pattern\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: search-routing\nspec:\n  hosts:\n  - \"search.example.com\"\n  gateways:\n  - search-gateway\n  http:\n  - match:\n    - uri:\n        prefix: \"/api/search\"\n    route:\n    - destination:\n        host: search-service.search.svc.cluster.local\n        port:\n          number: 8108\n    retries:\n      attempts: 3\n      perTryTimeout: 2s\n    timeout: 5s\n\n# GPU Resource Configuration\napiVersion: node.k8s.io/v1\nkind: RuntimeClass\nmetadata:\n  name: nvidia\nhandler: nvidia\nscheduling:\n  nodeSelector:\n    accelerator: nvidia-tesla-v100\n\n# Horizontal Pod Autoscaling\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: search-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: search-deployment\n  minReplicas: 1\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n\n# Typesense Configuration\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: typesense-config\ndata:\n  typesense-server.ini: |\n    api-key = ${TYPESENSE_API_KEY}\n    data-dir = /data\n    api-port = 8108\n    enable-cors = true\n    search-cutoff-ms = 1000\n    log-slow-requests-time-ms = 500\n\n# Monitoring Configuration\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: search-monitor\nspec:\n  selector:\n    matchLabels:\n      app: search-service\n  endpoints:\n  - port: metrics\n    interval: 15s\n\n# Resource Quota\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: gpu-quota\nspec:\n  hard:\n    requests.nvidia.com/gpu: 4\n    limits.nvidia.com/gpu: 4\n\n# Network Policy\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: search-network-policy\nspec:\n  podSelector:\n    matchLabels:\n      app: search-service\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: frontend\n    ports:\n    - protocol: TCP\n      port: 8108\n\n# Persistent Volume Claim\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: search-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 100Gi\n  storageClassName: ssd\n\n# Service Mesh Configuration\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: search-auth\nspec:\n  selector:\n    matchLabels:\n      app: search-service\n  rules:\n  - from:\n    - source:\n        principals: [\"cluster.local/ns/frontend/sa/frontend-service\"]\n    to:\n    - operation:\n        methods: [\"GET\", \"POST\"]\n        paths: [\"/api/search/*\"]\n\n# Deployment Health Checks\napiVersion: v1\nkind: Pod\nmetadata:\n  name: search-pod\nspec:\n  containers:\n  - name: search\n    image: typesense/typesense:latest\n    livenessProbe:\n      httpGet:\n        path: /health\n        port: 8108\n      initialDelaySeconds: 30\n      periodSeconds: 10\n    readinessProbe:\n      httpGet:\n        path: /health\n        port: 8108\n      initialDelaySeconds: 5\n      periodSeconds: 5\n\n# Resource Monitoring\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  name: search-alerts\nspec:\n  groups:\n  - name: search.rules\n    rules:\n    - alert: HighGPUUsage\n      expr: nvidia_gpu_utilization > 90\n      for: 5m\n      labels:\n        severity: warning\n      annotations:\n        description: \"GPU usage is above 90% for 5 minutes\"\n```",
    "filename": "knative-istio-typesense-gpu.md",
    "tags": [
      "devops",
      "Node"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:37.291Z",
      "contributor": "Community"
    }
  },
  {
    "id": "general-development-javascript-typescript-quality",
    "title": "javascript-typescript-quality",
    "description": "# JavaScript and TypeScript Code Quality Instructions",
    "category": "general-development",
    "subcategories": [],
    "content": "# JavaScript and TypeScript Code Quality Instructions\n\n## Project Context\n- Modern JavaScript/TypeScript\n- Clean code principles\n- Type safety\n- Testing practices\n- Performance optimization\n\n## Code Style Guidelines\n- TypeScript strict mode\n- ESLint configuration\n- Prettier formatting\n- Code organization\n- Documentation standards\n\n## Architecture Patterns\n- SOLID principles\n- Functional programming\n- Object composition\n- Module patterns\n- Error handling\n\n## Testing Requirements\n- Unit testing\n- Integration testing\n- Type testing\n- Performance testing\n- E2E testing\n\n## Documentation Standards\n- JSDoc documentation\n- Type definitions\n- Code examples\n- API documentation\n- Setup instructions\n\n## Project-Specific Rules\n### Code Quality Patterns\n```typescript\n// Type Safety Pattern\ntype Result<T, E = Error> = {\n  success: true;\n  data: T;\n} | {\n  success: false;\n  error: E;\n};\n\nfunction isSuccess<T, E>(result: Result<T, E>): result is { success: true; data: T } {\n  return result.success;\n}\n\n// Function Pattern\nasync function fetchData<T>(url: string): Promise<Result<T, Error>> {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return { success: true, data };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error : new Error(String(error))\n    };\n  }\n}\n\n// Class Pattern\ninterface LoggerOptions {\n  level: 'debug' | 'info' | 'warn' | 'error';\n  prefix?: string;\n}\n\nclass Logger {\n  private readonly options: Required<LoggerOptions>;\n\n  constructor(options: LoggerOptions) {\n    this.options = {\n      prefix: '',\n      ...options\n    };\n  }\n\n  public info(message: string, ...args: unknown[]): void {\n    if (this.shouldLog('info')) {\n      console.info(this.format(message), ...args);\n    }\n  }\n\n  private shouldLog(level: LoggerOptions['level']): boolean {\n    const levels = ['debug', 'info', 'warn', 'error'];\n    return levels.indexOf(level) >= levels.indexOf(this.options.level);\n  }\n\n  private format(message: string): string {\n    return `${this.options.prefix}${message}`;\n  }\n}\n\n// Module Pattern\nexport interface CacheOptions {\n  ttl: number;\n  maxSize?: number;\n}\n\nexport class Cache<K, V> {\n  private cache = new Map<K, { value: V; timestamp: number }>();\n  private readonly options: Required<CacheOptions>;\n\n  constructor(options: CacheOptions) {\n    this.options = {\n      maxSize: Infinity,\n      ...options\n    };\n  }\n\n  public set(key: K, value: V): void {\n    if (this.cache.size >= this.options.maxSize) {\n      this.evictOldest();\n    }\n\n    this.cache.set(key, {\n      value,\n      timestamp: Date.now()\n    });\n  }\n\n  public get(key: K): V | undefined {\n    const item = this.cache.get(key);\n    if (!item) return undefined;\n\n    if (this.isExpired(item.timestamp)) {\n      this.cache.delete(key);\n      return undefined;\n    }\n\n    return item.value;\n  }\n\n  private isExpired(timestamp: number): boolean {\n    return Date.now() - timestamp > this.options.ttl;\n  }\n\n  private evictOldest(): void {\n    const oldest = Array.from(this.cache.entries())\n      .sort(([, a], [, b]) => a.timestamp - b.timestamp)[0];\n    \n    if (oldest) {\n      this.cache.delete(oldest[0]);\n    }\n  }\n}\n\n// Testing Pattern\ndescribe('Cache', () => {\n  let cache: Cache<string, number>;\n\n  beforeEach(() => {\n    cache = new Cache({ ttl: 1000 });\n  });\n\n  test('should store and retrieve values', () => {\n    cache.set('key', 123);\n    expect(cache.get('key')).toBe(123);\n  });\n\n  test('should expire values after ttl', async () => {\n    cache.set('key', 123);\n    \n    await new Promise(resolve => setTimeout(resolve, 1100));\n    \n    expect(cache.get('key')).toBeUndefined();\n  });\n});\n\n// Error Handling Pattern\nclass AppError extends Error {\n  constructor(\n    message: string,\n    public readonly code: string,\n    public readonly statusCode: number = 500\n  ) {\n    super(message);\n    this.name = this.constructor.name;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n  public toJSON(): Record<string, unknown> {\n    return {\n      code: this.code,\n      message: this.message,\n      stack: this.stack\n    };\n  }\n}\n\n// Functional Programming Pattern\ntype Predicate<T> = (value: T) => boolean;\ntype Transformer<T, R> = (value: T) => R;\n\nfunction pipe<T>(...fns: Transformer<T, T>[]): Transformer<T, T> {\n  return (value: T) => fns.reduce((acc, fn) => fn(acc), value);\n}\n\nfunction filter<T>(predicate: Predicate<T>): Transformer<T[], T[]> {\n  return (array: T[]) => array.filter(predicate);\n}\n\nfunction map<T, R>(transformer: Transformer<T, R>): Transformer<T[], R[]> {\n  return (array: T[]) => array.map(transformer);\n}\n\n// Validation Pattern\ninterface ValidationResult {\n  valid: boolean;\n  errors: string[];\n}\n\nclass Validator<T> {\n  private rules: Array<(value: T) => string | null> = [];\n\n  public addRule(rule: (value: T) => string | null): this {\n    this.rules.push(rule);\n    return this;\n  }\n\n  public validate(value: T): ValidationResult {\n    const errors = this.rules\n      .map(rule => rule(value))\n      .filter((error): error is string => error !== null);\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n}\n\n// Performance Pattern\nfunction memoize<T, R>(\n  fn: (arg: T) => R,\n  options: { maxSize?: number; ttl?: number } = {}\n): (arg: T) => R {\n  const cache = new Cache<T, R>({\n    ttl: options.ttl ?? Infinity,\n    maxSize: options.maxSize\n  });\n\n  return (arg: T) => {\n    const cached = cache.get(arg);\n    if (cached !== undefined) {\n      return cached;\n    }\n\n    const result = fn(arg);\n    cache.set(arg, result);\n    return result;\n  };\n}",
    "filename": "javascript-typescript-quality.md",
    "tags": [
      "general-development",
      "JavaScript",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:37.270Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-chrome-extension",
    "title": "chrome-extension",
    "description": "# Chrome Extension Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Chrome Extension Development Instructions\n\n## Project Context\n- Chrome Extension APIs\n- JavaScript/TypeScript\n- Background Scripts\n- Content Scripts\n- Extension UI\n\n## Code Style Guidelines\n- Chrome API usage\n- Message passing patterns\n- Storage patterns\n- Security practices\n- Event handling\n\n## Architecture Patterns\n- Background service workers\n- Content script injection\n- Message passing\n- State management\n- API integration\n\n## Testing Requirements\n- Extension testing\n- API testing\n- Content script testing\n- Security testing\n- E2E testing\n\n## Documentation Standards\n- API documentation\n- Permission docs\n- Message formats\n- Storage schema\n- Security notes\n\n## Project-Specific Rules\n### Chrome Extension Patterns\n```typescript\n// Manifest V3 Pattern\n{\n  \"manifest_version\": 3,\n  \"name\": \"Extension Name\",\n  \"version\": \"1.0.0\",\n  \"permissions\": [\n    \"storage\",\n    \"tabs\",\n    \"activeTab\"\n  ],\n  \"host_permissions\": [\n    \"https://*.example.com/*\"\n  ],\n  \"background\": {\n    \"service_worker\": \"background.js\",\n    \"type\": \"module\"\n  },\n  \"content_scripts\": [\n    {\n      \"matches\": [\"https://*.example.com/*\"],\n      \"js\": [\"content.js\"],\n      \"css\": [\"content.css\"]\n    }\n  ],\n  \"action\": {\n    \"default_popup\": \"popup.html\",\n    \"default_icon\": {\n      \"16\": \"icons/icon16.png\",\n      \"48\": \"icons/icon48.png\",\n      \"128\": \"icons/icon128.png\"\n    }\n  }\n}\n\n// Background Service Worker\nclass BackgroundService {\n  constructor() {\n    this.initializeListeners();\n    this.state = this.getInitialState();\n  }\n\n  private async initializeListeners() {\n    chrome.runtime.onInstalled.addListener(this.handleInstalled);\n    chrome.runtime.onMessage.addListener(this.handleMessage);\n    chrome.tabs.onUpdated.addListener(this.handleTabUpdate);\n  }\n\n  private handleInstalled = async (details: chrome.runtime.InstalledDetails) => {\n    if (details.reason === 'install') {\n      await this.initializeStorage();\n    }\n  };\n\n  private handleMessage = async (\n    message: Message,\n    sender: chrome.runtime.MessageSender,\n    sendResponse: (response?: any) => void\n  ) => {\n    switch (message.type) {\n      case 'getData':\n        const data = await this.getData();\n        sendResponse({ data });\n        break;\n      case 'updateState':\n        await this.updateState(message.payload);\n        sendResponse({ success: true });\n        break;\n    }\n    return true; // Keep message channel open\n  };\n\n  private async initializeStorage() {\n    await chrome.storage.local.set({\n      settings: this.getDefaultSettings(),\n      data: []\n    });\n  }\n}\n\n// Content Script Pattern\nclass ContentScript {\n  private observer: MutationObserver;\n  private port: chrome.runtime.Port;\n\n  constructor() {\n    this.initialize();\n  }\n\n  private async initialize() {\n    this.injectStyles();\n    this.setupObserver();\n    this.connectPort();\n    await this.setupMessageHandling();\n  }\n\n  private setupObserver() {\n    this.observer = new MutationObserver((mutations) => {\n      for (const mutation of mutations) {\n        this.handleDOMChange(mutation);\n      }\n    });\n\n    this.observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  private connectPort() {\n    this.port = chrome.runtime.connect({ name: 'content-script' });\n    this.port.onMessage.addListener(this.handlePortMessage);\n  }\n\n  private handleDOMChange(mutation: MutationRecord) {\n    // Handle DOM changes\n    const nodes = Array.from(mutation.addedNodes);\n    nodes.forEach(this.processNode);\n  }\n\n  private processNode = (node: Node) => {\n    if (node instanceof HTMLElement) {\n      // Process element\n    }\n  };\n}\n\n// Popup UI Pattern\nclass PopupUI {\n  private state: UIState;\n\n  constructor() {\n    this.initialize();\n  }\n\n  private async initialize() {\n    this.state = await this.loadInitialState();\n    this.setupEventListeners();\n    this.render();\n  }\n\n  private async loadInitialState(): Promise<UIState> {\n    return new Promise((resolve) => {\n      chrome.storage.local.get(['settings', 'data'], (result) => {\n        resolve({\n          settings: result.settings || {},\n          data: result.data || []\n        });\n      });\n    });\n  }\n\n  private setupEventListeners() {\n    document.getElementById('saveBtn')?.addEventListener('click', this.handleSave);\n    document.getElementById('refreshBtn')?.addEventListener('click', this.handleRefresh);\n  }\n\n  private handleSave = async () => {\n    try {\n      await chrome.storage.local.set({ settings: this.state.settings });\n      this.showMessage('Settings saved successfully');\n    } catch (error) {\n      this.showError('Failed to save settings');\n    }\n  };\n}\n\n// Storage Pattern\nclass StorageManager {\n  static async get<T>(key: string): Promise<T | null> {\n    return new Promise((resolve) => {\n      chrome.storage.local.get([key], (result) => {\n        resolve(result[key] || null);\n      });\n    });\n  }\n\n  static async set<T>(key: string, value: T): Promise<void> {\n    return new Promise((resolve) => {\n      chrome.storage.local.set({ [key]: value }, resolve);\n    });\n  }\n\n  static async update<T>(key: string, updateFn: (value: T) => T): Promise<void> {\n    const current = await this.get<T>(key);\n    const updated = updateFn(current as T);\n    await this.set(key, updated);\n  }\n}\n\n// Message Passing Pattern\ninterface Message {\n  type: string;\n  payload?: any;\n}\n\nclass MessageManager {\n  static async sendToBackground(message: Message): Promise<any> {\n    return new Promise((resolve) => {\n      chrome.runtime.sendMessage(message, resolve);\n    });\n  }\n\n  static async sendToTab(tabId: number, message: Message): Promise<any> {\n    return new Promise((resolve) => {\n      chrome.tabs.sendMessage(tabId, message, resolve);\n    });\n  }\n\n  static onMessage(\n    handler: (\n      message: Message,\n      sender: chrome.runtime.MessageSender,\n      sendResponse: (response?: any) => void\n    ) => void | boolean\n  ) {\n    chrome.runtime.onMessage.addListener(handler);\n  }\n}\n\n// Testing Pattern\ndescribe('Extension Background Service', () => {\n  let backgroundService: BackgroundService;\n  \n  beforeEach(() => {\n    chrome.runtime.onInstalled.addListener.mockClear();\n    chrome.runtime.onMessage.addListener.mockClear();\n    backgroundService = new BackgroundService();\n  });\n\n  test('initializes storage on install', async () => {\n    const details = { reason: 'install' } as chrome.runtime.InstalledDetails;\n    await backgroundService.handleInstalled(details);\n\n    expect(chrome.storage.local.set).toHaveBeenCalledWith({\n      settings: expect.any(Object),\n      data: []\n    });\n  });\n\n  test('handles getData message', async () => {\n    const message = { type: 'getData' };\n    const sendResponse = jest.fn();\n\n    await backgroundService.handleMessage(message, {}, sendResponse);\n\n    expect(sendResponse).toHaveBeenCalledWith({\n      data: expect.any(Array)\n    });\n  });\n});",
    "filename": "chrome-extension.md",
    "tags": [
      "frontend-development",
      "JavaScript",
      "TypeScript",
      "Node"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:37.233Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-astro-tailwind",
    "title": "astro-tailwind",
    "description": "# Astro with Tailwind CSS Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Astro with Tailwind CSS Development Instructions\n\n## Project Context\n- Astro static site generation\n- Tailwind CSS styling\n- JavaScript components\n- Content collections\n- Performance optimization\n\n## Code Style Guidelines\n- Astro component structure\n- Tailwind class organization\n- Content management\n- Script handling\n- Performance patterns\n\n## Architecture Patterns\n- Islands architecture\n- Content collections\n- Dynamic routing\n- Component composition\n- Asset optimization\n\n## Testing Requirements\n- Component testing\n- Visual testing\n- Integration testing\n- Performance testing\n- Accessibility testing\n\n## Documentation Standards\n- Component documentation\n- Content schema docs\n- Route documentation\n- Performance metrics\n- Setup instructions\n\n## Project-Specific Rules\n### Astro Patterns\n```typescript\n// Page Component Pattern\n---\nimport Layout from '../layouts/Layout.astro';\nimport { getCollection } from 'astro:content';\nimport PostCard from '../components/PostCard.astro';\nimport { Image } from 'astro:assets';\n\nconst posts = await getCollection('blog');\n---\n\n<Layout title=\"Blog\">\n  <main class=\"max-w-4xl mx-auto px-4 py-8\">\n    <h1 class=\"text-4xl font-bold mb-8\">Blog Posts</h1>\n    \n    <div class=\"grid gap-8 md:grid-cols-2\">\n      {posts.map((post) => (\n        <PostCard post={post} />\n      ))}\n    </div>\n  </main>\n</Layout>\n\n// Component Pattern\n---\ninterface Props {\n  post: CollectionEntry<'blog'>;\n  featured?: boolean;\n}\n\nconst { post, featured = false } = Astro.props;\nconst { title, description, pubDate, image } = post.data;\n---\n\n<article class:list={[\n  'bg-white rounded-lg shadow-md overflow-hidden transition-shadow hover:shadow-lg',\n  { 'md:col-span-2': featured }\n]}>\n  <div class=\"aspect-video relative\">\n    <Image\n      src={image}\n      alt={title}\n      class=\"object-cover\"\n      width={800}\n      height={400}\n      format=\"webp\"\n    />\n  </div>\n  \n  <div class=\"p-6\">\n    <time class=\"text-sm text-gray-500\">\n      {pubDate.toLocaleDateString()}\n    </time>\n    \n    <h2 class=\"text-xl font-semibold mt-2\">\n      {title}\n    </h2>\n    \n    <p class=\"text-gray-600 mt-2\">\n      {description}\n    </p>\n    \n    <a\n      href={`/blog/${post.slug}`}\n      class=\"inline-flex items-center mt-4 text-blue-600 hover:text-blue-800\"\n    >\n      Read more\n      <svg class=\"w-4 h-4 ml-2\" viewBox=\"0 0 24 24\">\n        <path fill=\"currentColor\" d=\"M13.025 1l-2.847 2.828 6.176 6.176h-16.354v3.992h16.354l-6.176 6.176 2.847 2.828 10.975-11z\"/>\n      </svg>\n    </a>\n  </div>\n</article>\n\n// Content Collection Schema\nimport { defineCollection, z } from 'astro:content';\n\nexport const collections = {\n  blog: defineCollection({\n    schema: z.object({\n      title: z.string(),\n      description: z.string(),\n      pubDate: z.date(),\n      image: z.string(),\n      tags: z.array(z.string()),\n      draft: z.boolean().default(false)\n    })\n  })\n};\n\n// Layout Component\n---\nimport Header from '../components/Header.astro';\nimport Footer from '../components/Footer.astro';\nimport { ViewTransitions } from 'astro:transitions';\n\ninterface Props {\n  title: string;\n  description?: string;\n}\n\nconst { title, description } = Astro.props;\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>{title}</title>\n    {description && <meta name=\"description\" content={description} />}\n    <ViewTransitions />\n  </head>\n  <body class=\"min-h-screen bg-gray-50\">\n    <Header />\n    <slot />\n    <Footer />\n  </body>\n</html>\n\n// Client-side Interactivity\n---\nimport { Image } from 'astro:assets';\n\ninterface Props {\n  images: ImageMetadata[];\n}\n\nconst { images } = Astro.props;\n---\n\n<div class=\"relative\" id=\"image-carousel\">\n  {images.map((image, index) => (\n    <div\n      class:list={[\n        'transition-opacity duration-300',\n        { 'opacity-0': index !== 0 }\n      ]}\n      data-index={index}\n    >\n      <Image\n        src={image}\n        alt={`Slide ${index + 1}`}\n        class=\"w-full aspect-video object-cover\"\n      />\n    </div>\n  ))}\n  \n  <button\n    class=\"absolute left-4 top-1/2 -translate-y-1/2\"\n    data-direction=\"prev\"\n  >\n    Previous\n  </button>\n  \n  <button\n    class=\"absolute right-4 top-1/2 -translate-y-1/2\"\n    data-direction=\"next\"\n  >\n    Next\n  </button>\n</div>\n\n<script>\n  class Carousel {\n    constructor(element) {\n      this.element = element;\n      this.slides = Array.from(element.querySelectorAll('[data-index]'));\n      this.currentIndex = 0;\n      \n      this.setupEventListeners();\n    }\n    \n    setupEventListeners() {\n      this.element.addEventListener('click', (e) => {\n        const button = e.target.closest('[data-direction]');\n        if (!button) return;\n        \n        const direction = button.dataset.direction;\n        if (direction === 'next') {\n          this.next();\n        } else {\n          this.prev();\n        }\n      });\n    }\n    \n    next() {\n      this.show((this.currentIndex + 1) % this.slides.length);\n    }\n    \n    prev() {\n      this.show((this.currentIndex - 1 + this.slides.length) % this.slides.length);\n    }\n    \n    show(index) {\n      this.slides[this.currentIndex].classList.add('opacity-0');\n      this.slides[index].classList.remove('opacity-0');\n      this.currentIndex = index;\n    }\n  }\n  \n  // Initialize carousels\n  document.querySelectorAll('#image-carousel').forEach(element => {\n    new Carousel(element);\n  });\n</script>\n\n// API Endpoint\nexport async function GET({ params }) {\n  const { slug } = params;\n  const post = await getEntry('blog', slug);\n  \n  if (!post) {\n    return new Response(null, {\n      status: 404,\n      statusText: 'Not found'\n    });\n  }\n  \n  return new Response(JSON.stringify(post), {\n    status: 200,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n```",
    "filename": "astro-tailwind.md",
    "tags": [
      "frontend-development",
      "JavaScript",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:37.201Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-spring-boot-jpa",
    "title": "spring-boot-jpa",
    "description": "# Java Spring Boot JPA Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Java Spring Boot JPA Development Instructions\n\n## Project Context\n- Spring Boot application\n- JPA/Hibernate ORM\n- RESTful API design\n- Database integration\n- Service architecture\n\n## Code Style Guidelines\n- Spring Boot best practices\n- JPA entity design\n- Repository patterns\n- Service layer patterns\n- Controller patterns\n\n## Architecture Patterns\n- Layered architecture\n- Repository pattern\n- Service layer\n- DTO pattern\n- Exception handling\n\n## Testing Requirements\n- Unit testing\n- Integration testing\n- Repository testing\n- Service testing\n- Controller testing\n\n## Documentation Standards\n- API documentation\n- Entity documentation\n- Service documentation\n- Exception documentation\n- Setup instructions\n\n## Project-Specific Rules\n### Spring Boot Patterns\n```java\n// Entity Pattern\n@Entity\n@Table(name = \"users\")\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, unique = true)\n    private String email;\n\n    @Column(nullable = false)\n    private String name;\n\n    @JsonIgnore\n    private String password;\n\n    @OneToMany(mappedBy = \"user\", cascade = CascadeType.ALL)\n    private List<Order> orders = new ArrayList<>();\n}\n\n// DTO Pattern\n@Data\n@Builder\npublic class UserDTO {\n    private Long id;\n    private String email;\n    private String name;\n\n    public static UserDTO fromEntity(User user) {\n        return UserDTO.builder()\n                .id(user.getId())\n                .email(user.getEmail())\n                .name(user.getName())\n                .build();\n    }\n}\n\n// Repository Pattern\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    Optional<User> findByEmail(String email);\n    \n    @Query(\"SELECT u FROM User u LEFT JOIN FETCH u.orders WHERE u.id = :id\")\n    Optional<User> findByIdWithOrders(@Param(\"id\") Long id);\n    \n    boolean existsByEmail(String email);\n}\n\n// Service Pattern\n@Service\n@Transactional\n@RequiredArgsConstructor\npublic class UserService {\n    private final UserRepository userRepository;\n    private final PasswordEncoder passwordEncoder;\n\n    public UserDTO createUser(CreateUserRequest request) {\n        if (userRepository.existsByEmail(request.getEmail())) {\n            throw new EmailAlreadyExistsException(request.getEmail());\n        }\n\n        User user = User.builder()\n                .email(request.getEmail())\n                .name(request.getName())\n                .password(passwordEncoder.encode(request.getPassword()))\n                .build();\n\n        user = userRepository.save(user);\n        return UserDTO.fromEntity(user);\n    }\n\n    public UserDTO getUserById(Long id) {\n        return userRepository.findById(id)\n                .map(UserDTO::fromEntity)\n                .orElseThrow(() -> new UserNotFoundException(id));\n    }\n}\n\n// Controller Pattern\n@RestController\n@RequestMapping(\"/api/users\")\n@RequiredArgsConstructor\npublic class UserController {\n    private final UserService userService;\n\n    @PostMapping\n    @ResponseStatus(HttpStatus.CREATED)\n    public ResponseEntity<UserDTO> createUser(@Valid @RequestBody CreateUserRequest request) {\n        UserDTO user = userService.createUser(request);\n        return ResponseEntity\n                .created(URI.create(\"/api/users/\" + user.getId()))\n                .body(user);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<UserDTO> getUser(@PathVariable Long id) {\n        return ResponseEntity.ok(userService.getUserById(id));\n    }\n}\n\n// Exception Handling\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n    @ExceptionHandler(UserNotFoundException.class)\n    public ResponseEntity<ErrorResponse> handleUserNotFound(UserNotFoundException ex) {\n        ErrorResponse error = new ErrorResponse(\n            HttpStatus.NOT_FOUND.value(),\n            ex.getMessage()\n        );\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);\n    }\n\n    @ExceptionHandler(EmailAlreadyExistsException.class)\n    public ResponseEntity<ErrorResponse> handleEmailExists(EmailAlreadyExistsException ex) {\n        ErrorResponse error = new ErrorResponse(\n            HttpStatus.CONFLICT.value(),\n            ex.getMessage()\n        );\n        return ResponseEntity.status(HttpStatus.CONFLICT).body(error);\n    }\n}\n\n// Configuration Pattern\n@Configuration\n@EnableJpaAuditing\npublic class JpaConfig {\n    @Bean\n    public AuditorAware<String> auditorProvider() {\n        return () -> Optional.ofNullable(SecurityContextHolder.getContext())\n                .map(SecurityContext::getAuthentication)\n                .filter(Authentication::isAuthenticated)\n                .map(Authentication::getName);\n    }\n}\n\n// Test Pattern\n@SpringBootTest\n@AutoConfigureMockMvc\nclass UserControllerTest {\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @MockBean\n    private UserService userService;\n\n    @Test\n    void createUser_Success() throws Exception {\n        CreateUserRequest request = new CreateUserRequest(\n            \"test@example.com\",\n            \"Test User\",\n            \"password123\"\n        );\n\n        UserDTO expectedResponse = UserDTO.builder()\n                .id(1L)\n                .email(request.getEmail())\n                .name(request.getName())\n                .build();\n\n        when(userService.createUser(any())).thenReturn(expectedResponse);\n\n        mockMvc.perform(post(\"/api/users\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(objectMapper.writeValueAsString(request)))\n                .andExpect(status().isCreated())\n                .andExpect(jsonPath(\"$.id\").value(expectedResponse.getId()))\n                .andExpect(jsonPath(\"$.email\").value(expectedResponse.getEmail()))\n                .andExpect(jsonPath(\"$.name\").value(expectedResponse.getName()));\n    }\n}\n\n// Service Test Pattern\n@ExtendWith(MockitoExtension.class)\nclass UserServiceTest {\n    @Mock\n    private UserRepository userRepository;\n\n    @Mock\n    private PasswordEncoder passwordEncoder;\n\n    @InjectMocks\n    private UserService userService;\n\n    @Test\n    void createUser_Success() {\n        CreateUserRequest request = new CreateUserRequest(\n            \"test@example.com\",\n            \"Test User\",\n            \"password123\"\n        );\n\n        when(userRepository.existsByEmail(request.getEmail())).thenReturn(false);\n        when(passwordEncoder.encode(request.getPassword())).thenReturn(\"encoded_password\");\n\n        User savedUser = User.builder()\n                .id(1L)\n                .email(request.getEmail())\n                .name(request.getName())\n                .password(\"encoded_password\")\n                .build();\n\n        when(userRepository.save(any())).thenReturn(savedUser);\n\n        UserDTO result = userService.createUser(request);\n\n        assertNotNull(result);\n        assertEquals(savedUser.getId(), result.getId());\n        assertEquals(savedUser.getEmail(), result.getEmail());\n        assertEquals(savedUser.getName(), result.getName());\n    }\n}",
    "filename": "spring-boot-jpa.md",
    "tags": [
      "backend-development",
      "Java",
      "Spring"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:37.168Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-htmx-go-fiber",
    "title": "htmx-go-fiber",
    "description": "# HTMX Go Fiber Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# HTMX Go Fiber Development Instructions\n\n## Project Context\n- Go Fiber framework\n- HTMX integration\n- HTML templates\n- Fast HTTP routing\n- Middleware patterns\n\n## Code Style Guidelines\n- Fiber best practices\n- HTMX attributes\n- Template organization\n- Route grouping\n- Error handling\n\n## Architecture Patterns\n- Fiber handlers\n- Middleware chains\n- Template rendering\n- State management\n- Response formatting\n\n## Testing Requirements\n- Handler testing\n- Middleware testing\n- Integration testing\n- Response testing\n- End-to-end testing\n\n## Documentation Standards\n- Handler documentation\n- Route documentation\n- HTMX interactions\n- Response patterns\n- API documentation\n\n## Project-Specific Rules\n### Fiber HTMX Patterns\n```go\n// Main Package\npackage main\n\nimport (\n    \"github.com/gofiber/fiber/v2\"\n    \"github.com/gofiber/template/html/v2\"\n)\n\n// Task Model\ntype Task struct {\n    ID          uint      `json:\"id\"`\n    Title       string    `json:\"title\"`\n    Description string    `json:\"description\"`\n    Completed   bool      `json:\"completed\"`\n}\n\n// Handler Types\ntype TaskHandler struct {\n    tasks []Task\n}\n\n// Setup Application\nfunc main() {\n    engine := html.New(\"./views\", \".html\")\n    \n    app := fiber.New(fiber.Config{\n        Views: engine,\n    })\n\n    handler := &TaskHandler{\n        tasks: make([]Task, 0),\n    }\n\n    // Routes\n    app.Get(\"/\", handler.List)\n    app.Post(\"/tasks\", handler.Create)\n    app.Put(\"/tasks/:id/toggle\", handler.Toggle)\n    app.Delete(\"/tasks/:id\", handler.Delete)\n\n    app.Listen(\":3000\")\n}\n\n// List Handler\nfunc (h *TaskHandler) List(c *fiber.Ctx) error {\n    if c.Get(\"HX-Request\") != \"\" {\n        return c.Render(\"partials/task-list\", fiber.Map{\n            \"Tasks\": h.tasks,\n        })\n    }\n    \n    return c.Render(\"index\", fiber.Map{\n        \"Tasks\": h.tasks,\n    })\n}\n\n// Create Handler\nfunc (h *TaskHandler) Create(c *fiber.Ctx) error {\n    var task Task\n    if err := c.BodyParser(&task); err != nil {\n        return c.Status(fiber.StatusBadRequest).SendString(err.Error())\n    }\n\n    task.ID = uint(len(h.tasks) + 1)\n    h.tasks = append(h.tasks, task)\n\n    return c.Render(\"partials/task-item\", fiber.Map{\n        \"Task\": task,\n    })\n}\n\n// Toggle Handler\nfunc (h *TaskHandler) Toggle(c *fiber.Ctx) error {\n    id, err := c.ParamsInt(\"id\")\n    if err != nil {\n        return c.Status(fiber.StatusBadRequest).SendString(\"Invalid ID\")\n    }\n\n    for i := range h.tasks {\n        if h.tasks[i].ID == uint(id) {\n            h.tasks[i].Completed = !h.tasks[i].Completed\n            return c.Render(\"partials/task-item\", fiber.Map{\n                \"Task\": h.tasks[i],\n            })\n        }\n    }\n\n    return c.Status(fiber.StatusNotFound).SendString(\"Task not found\")\n}\n\n// Middleware Example\nfunc HtmxMiddleware() fiber.Handler {\n    return func(c *fiber.Ctx) error {\n        if c.Get(\"HX-Request\") != \"\" {\n            c.Locals(\"htmx\", true)\n        }\n        return c.Next()\n    }\n}\n\n// Views/index.html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Tasks</title>\n    <script src=\"/static/htmx.min.js\"></script>\n    <link href=\"/static/tailwind.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"container mx-auto p-4\">\n    <h1 class=\"text-2xl font-bold mb-4\">Tasks</h1>\n    \n    <form hx-post=\"/tasks\"\n          hx-target=\"#task-list\"\n          hx-swap=\"afterbegin\"\n          class=\"mb-4\">\n        {{template \"partials/task-form\" .}}\n    </form>\n\n    <div id=\"task-list\"\n         hx-get=\"/\"\n         hx-trigger=\"load delay:100ms\">\n        {{template \"partials/task-list\" .}}\n    </div>\n</body>\n</html>\n\n// Views/partials/task-form.html\n<div class=\"bg-white p-4 rounded shadow\">\n    <div class=\"mb-4\">\n        <label class=\"block text-gray-700\">Title</label>\n        <input type=\"text\"\n               name=\"title\"\n               class=\"w-full p-2 border rounded\"\n               required>\n    </div>\n    <div class=\"mb-4\">\n        <label class=\"block text-gray-700\">Description</label>\n        <textarea name=\"description\"\n                  class=\"w-full p-2 border rounded\"></textarea>\n    </div>\n    <button type=\"submit\"\n            class=\"bg-blue-500 text-white px-4 py-2 rounded\">\n        Add Task\n    </button>\n</div>\n\n// Views/partials/task-list.html\n{{range .Tasks}}\n    {{template \"partials/task-item\" dict \"Task\" .}}\n{{else}}\n    <p class=\"text-gray-500\">No tasks yet.</p>\n{{end}}\n\n// Views/partials/task-item.html\n<div id=\"task-{{.Task.ID}}\" class=\"bg-white p-4 rounded shadow mb-2\">\n    <div class=\"flex items-center justify-between\">\n        <span class=\"{{if .Task.Completed}}line-through{{end}}\">\n            {{.Task.Title}}\n        </span>\n        <div class=\"space-x-2\">\n            <button hx-put=\"/tasks/{{.Task.ID}}/toggle\"\n                    hx-target=\"#task-{{.Task.ID}}\"\n                    class=\"text-blue-500 hover:text-blue-700\">\n                {{if .Task.Completed}}Undo{{else}}Complete{{end}}\n            </button>\n            <button hx-delete=\"/tasks/{{.Task.ID}}\"\n                    hx-target=\"#task-{{.Task.ID}}\"\n                    hx-confirm=\"Are you sure?\"\n                    class=\"text-red-500 hover:text-red-700\">\n                Delete\n            </button>\n        </div>\n    </div>\n    {{if .Task.Description}}\n        <p class=\"text-gray-600 mt-2\">{{.Task.Description}}</p>\n    {{end}}\n</div>\n\n// Testing\npackage main\n\nimport (\n    \"io\"\n    \"net/http/httptest\"\n    \"strings\"\n    \"testing\"\n\n    \"github.com/gofiber/fiber/v2\"\n    \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestTaskHandler_List(t *testing.T) {\n    app := fiber.New()\n    handler := &TaskHandler{\n        tasks: make([]Task, 0),\n    }\n    \n    app.Get(\"/\", handler.List)\n    \n    // Test regular request\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    resp, err := app.Test(req)\n    \n    assert.NoError(t, err)\n    assert.Equal(t, fiber.StatusOK, resp.StatusCode)\n    \n    // Test HTMX request\n    req.Header.Set(\"HX-Request\", \"true\")\n    resp, err = app.Test(req)\n    \n    assert.NoError(t, err)\n    assert.Equal(t, fiber.StatusOK, resp.StatusCode)\n}\n\nfunc TestTaskHandler_Create(t *testing.T) {\n    app := fiber.New()\n    handler := &TaskHandler{\n        tasks: make([]Task, 0),\n    }\n    \n    app.Post(\"/tasks\", handler.Create)\n    \n    body := strings.NewReader(`{\"title\":\"Test Task\",\"description\":\"Test Description\"}`)\n    req := httptest.NewRequest(\"POST\", \"/tasks\", body)\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    \n    resp, err := app.Test(req)\n    \n    assert.NoError(t, err)\n    assert.Equal(t, fiber.StatusOK, resp.StatusCode)\n    \n    respBody, _ := io.ReadAll(resp.Body)\n    assert.Contains(t, string(respBody), \"Test Task\")\n}\n```",
    "filename": "htmx-go-fiber.md",
    "tags": [
      "backend-development",
      "Go"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:37.142Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-htmx-go-basic",
    "title": "htmx-go-basic",
    "description": "# HTMX Go Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# HTMX Go Development Instructions\n\n## Project Context\n- Go web server\n- HTMX integration\n- HTML templates\n- Server-side rendering\n- Request handling\n\n## Code Style Guidelines\n- Go idiomatic code\n- HTMX attributes\n- Template organization\n- Handler patterns\n- Response formatting\n\n## Architecture Patterns\n- Handler functions\n- Template parsing\n- Partial updates\n- State management\n- Error handling\n\n## Testing Requirements\n- Handler testing\n- Template testing\n- Integration testing\n- Response testing\n- End-to-end testing\n\n## Documentation Standards\n- Handler documentation\n- Template documentation\n- HTMX interactions\n- Response patterns\n- API documentation\n\n## Project-Specific Rules\n### Go HTMX Patterns\n```go\n// Main Package\npackage main\n\nimport (\n    \"html/template\"\n    \"log\"\n    \"net/http\"\n)\n\n// Task Model\ntype Task struct {\n    ID          int\n    Title       string\n    Description string\n    Completed   bool\n}\n\n// Handler Types\ntype TaskHandler struct {\n    tmpl  *template.Template\n    tasks []Task\n}\n\nfunc NewTaskHandler() *TaskHandler {\n    tmpl := template.Must(template.ParseGlob(\"templates/*.html\"))\n    return &TaskHandler{\n        tmpl:  tmpl,\n        tasks: make([]Task, 0),\n    }\n}\n\n// List Handler\nfunc (h *TaskHandler) List(w http.ResponseWriter, r *http.Request) {\n    if r.Header.Get(\"HX-Request\") == \"true\" {\n        h.tmpl.ExecuteTemplate(w, \"task-list.html\", h.tasks)\n        return\n    }\n    h.tmpl.ExecuteTemplate(w, \"index.html\", h.tasks)\n}\n\n// Create Handler\nfunc (h *TaskHandler) Create(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodPost {\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    r.ParseForm()\n    task := Task{\n        ID:          len(h.tasks) + 1,\n        Title:       r.FormValue(\"title\"),\n        Description: r.FormValue(\"description\"),\n    }\n\n    h.tasks = append(h.tasks, task)\n    h.tmpl.ExecuteTemplate(w, \"task-item.html\", task)\n}\n\n// Toggle Handler\nfunc (h *TaskHandler) Toggle(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodPut {\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    id := r.URL.Query().Get(\"id\")\n    for i := range h.tasks {\n        if h.tasks[i].ID == id {\n            h.tasks[i].Completed = !h.tasks[i].Completed\n            h.tmpl.ExecuteTemplate(w, \"task-item.html\", h.tasks[i])\n            return\n        }\n    }\n    http.Error(w, \"Task not found\", http.StatusNotFound)\n}\n\n// Main Function\nfunc main() {\n    handler := NewTaskHandler()\n\n    http.HandleFunc(\"/\", handler.List)\n    http.HandleFunc(\"/tasks/create\", handler.Create)\n    http.HandleFunc(\"/tasks/toggle\", handler.Toggle)\n\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\n// Templates/index.html\n{{define \"index.html\"}}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Tasks</title>\n    <script src=\"/static/htmx.min.js\"></script>\n    <link href=\"/static/tailwind.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"container mx-auto p-4\">\n    <h1 class=\"text-2xl font-bold mb-4\">Tasks</h1>\n    \n    <form hx-post=\"/tasks/create\"\n          hx-target=\"#task-list\"\n          hx-swap=\"afterbegin\"\n          class=\"mb-4\">\n        {{template \"task-form.html\"}}\n    </form>\n\n    <div id=\"task-list\"\n         hx-get=\"/\"\n         hx-trigger=\"load delay:100ms\">\n        {{template \"task-list.html\" .}}\n    </div>\n</body>\n</html>\n{{end}}\n\n// Templates/task-form.html\n{{define \"task-form.html\"}}\n<div class=\"bg-white p-4 rounded shadow\">\n    <div class=\"mb-4\">\n        <label class=\"block text-gray-700\">Title</label>\n        <input type=\"text\"\n               name=\"title\"\n               class=\"w-full p-2 border rounded\"\n               required>\n    </div>\n    <div class=\"mb-4\">\n        <label class=\"block text-gray-700\">Description</label>\n        <textarea name=\"description\"\n                  class=\"w-full p-2 border rounded\"></textarea>\n    </div>\n    <button type=\"submit\"\n            class=\"bg-blue-500 text-white px-4 py-2 rounded\">\n        Add Task\n    </button>\n</div>\n{{end}}\n\n// Templates/task-list.html\n{{define \"task-list.html\"}}\n{{range .}}\n    {{template \"task-item.html\" .}}\n{{else}}\n    <p class=\"text-gray-500\">No tasks yet.</p>\n{{end}}\n{{end}}\n\n// Templates/task-item.html\n{{define \"task-item.html\"}}\n<div id=\"task-{{.ID}}\" class=\"bg-white p-4 rounded shadow mb-2\">\n    <div class=\"flex items-center justify-between\">\n        <span class=\"{{if .Completed}}line-through{{end}}\">\n            {{.Title}}\n        </span>\n        <div class=\"space-x-2\">\n            <button hx-put=\"/tasks/toggle?id={{.ID}}\"\n                    hx-target=\"#task-{{.ID}}\"\n                    class=\"text-blue-500 hover:text-blue-700\">\n                {{if .Completed}}Undo{{else}}Complete{{end}}\n            </button>\n            <button hx-delete=\"/tasks/delete?id={{.ID}}\"\n                    hx-target=\"#task-{{.ID}}\"\n                    hx-confirm=\"Are you sure?\"\n                    class=\"text-red-500 hover:text-red-700\">\n                Delete\n            </button>\n        </div>\n    </div>\n    {{if .Description}}\n        <p class=\"text-gray-600 mt-2\">{{.Description}}</p>\n    {{end}}\n</div>\n{{end}}\n\n// Testing\npackage main\n\nimport (\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n)\n\nfunc TestTaskHandler_List(t *testing.T) {\n    handler := NewTaskHandler()\n    \n    // Test regular request\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    w := httptest.NewRecorder()\n    handler.List(w, req)\n    \n    if w.Code != http.StatusOK {\n        t.Errorf(\"Expected status %d, got %d\", http.StatusOK, w.Code)\n    }\n    \n    // Test HTMX request\n    req.Header.Set(\"HX-Request\", \"true\")\n    w = httptest.NewRecorder()\n    handler.List(w, req)\n    \n    if w.Code != http.StatusOK {\n        t.Errorf(\"Expected status %d, got %d\", http.StatusOK, w.Code)\n    }\n}\n```",
    "filename": "htmx-go-basic.md",
    "tags": [
      "backend-development",
      "Go"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:37.110Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-htmx-flask",
    "title": "htmx-flask",
    "description": "# HTMX Flask Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# HTMX Flask Development Instructions\n\n## Project Context\n- Flask web framework\n- HTMX integration\n- Server-side rendering\n- Jinja2 templates\n- SQLAlchemy ORM\n\n## Code Style Guidelines\n- Flask application structure\n- HTMX attributes\n- Template organization\n- Blueprint patterns\n- Response handling\n\n## Architecture Patterns\n- View functions\n- Blueprint organization\n- Form handling\n- Partial updates\n- Database integration\n\n## Testing Requirements\n- View testing\n- Template testing\n- Integration testing\n- Response testing\n- Database testing\n\n## Documentation Standards\n- View documentation\n- Template documentation\n- HTMX interactions\n- Response patterns\n- API documentation\n\n## Project-Specific Rules\n### Flask HTMX Patterns\n```python\n# Application Structure\nfrom flask import Flask, render_template, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, TextAreaField\nfrom wtforms.validators import DataRequired\n\napp = Flask(__name__)\ndb = SQLAlchemy(app)\n\n# Models\nclass Task(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    completed = db.Column(db.Boolean, default=False)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'title': self.title,\n            'description': self.description,\n            'completed': self.completed\n        }\n\n# Forms\nclass TaskForm(FlaskForm):\n    title = StringField('Title', validators=[DataRequired()])\n    description = TextAreaField('Description')\n\n# Views\n@app.route('/tasks', methods=['GET'])\ndef task_list():\n    tasks = Task.query.all()\n    if request.headers.get('HX-Request'):\n        return render_template('tasks/_list.html', tasks=tasks)\n    return render_template('tasks/index.html', tasks=tasks)\n\n@app.route('/tasks/create', methods=['POST'])\ndef task_create():\n    form = TaskForm()\n    if form.validate_on_submit():\n        task = Task(\n            title=form.title.data,\n            description=form.description.data\n        )\n        db.session.add(task)\n        db.session.commit()\n        return render_template('tasks/_item.html', task=task)\n    return render_template('tasks/_form.html', form=form), 422\n\n@app.route('/tasks/<int:task_id>/toggle', methods=['PUT'])\ndef task_toggle(task_id):\n    task = Task.query.get_or_404(task_id)\n    task.completed = not task.completed\n    db.session.commit()\n    return render_template('tasks/_item.html', task=task)\n\n# Templates/base.html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{% block title %}{% endblock %}</title>\n    <script src=\"{{ url_for('static', filename='js/htmx.min.js') }}\" defer></script>\n    {% block head %}{% endblock %}\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>\n\n# Templates/tasks/index.html\n{% extends \"base.html\" %}\n\n{% block content %}\n<div class=\"container mx-auto p-4\">\n    <h1 class=\"text-2xl font-bold mb-4\">Tasks</h1>\n    \n    <form hx-post=\"{{ url_for('task_create') }}\"\n          hx-target=\"#task-list\"\n          hx-swap=\"afterbegin\">\n        {% include 'tasks/_form.html' %}\n    </form>\n\n    <div id=\"task-list\"\n         hx-get=\"{{ url_for('task_list') }}\"\n         hx-trigger=\"load delay:100ms\">\n        {% include 'tasks/_list.html' %}\n    </div>\n</div>\n{% endblock %}\n\n# Templates/tasks/_form.html\n<div class=\"bg-white p-4 rounded shadow\">\n    {{ form.csrf_token }}\n    <div class=\"mb-4\">\n        {{ form.title.label }}\n        {{ form.title(class=\"w-full p-2 border rounded\") }}\n        {% if form.title.errors %}\n            {% for error in form.title.errors %}\n                <p class=\"text-red-500 text-sm\">{{ error }}</p>\n            {% endfor %}\n        {% endif %}\n    </div>\n    <div class=\"mb-4\">\n        {{ form.description.label }}\n        {{ form.description(class=\"w-full p-2 border rounded\") }}\n    </div>\n    <button type=\"submit\" class=\"bg-blue-500 text-white px-4 py-2 rounded\">\n        Add Task\n    </button>\n</div>\n\n# Templates/tasks/_list.html\n{% for task in tasks %}\n    {% include 'tasks/_item.html' %}\n{% else %}\n    <p class=\"text-gray-500\">No tasks yet.</p>\n{% endfor %}\n\n# Templates/tasks/_item.html\n<div id=\"task-{{ task.id }}\" class=\"bg-white p-4 rounded shadow mb-2\">\n    <div class=\"flex items-center justify-between\">\n        <span class=\"{% if task.completed %}line-through{% endif %}\">\n            {{ task.title }}\n        </span>\n        <div class=\"space-x-2\">\n            <button hx-put=\"{{ url_for('task_toggle', task_id=task.id) }}\"\n                    hx-target=\"#task-{{ task.id }}\"\n                    class=\"text-blue-500 hover:text-blue-700\">\n                {% if task.completed %}Undo{% else %}Complete{% endif %}\n            </button>\n            <button hx-delete=\"{{ url_for('task_delete', task_id=task.id) }}\"\n                    hx-target=\"#task-{{ task.id }}\"\n                    hx-confirm=\"Are you sure?\"\n                    class=\"text-red-500 hover:text-red-700\">\n                Delete\n            </button>\n        </div>\n    </div>\n    {% if task.description %}\n        <p class=\"text-gray-600 mt-2\">{{ task.description }}</p>\n    {% endif %}\n</div>\n\n# Testing\nimport pytest\nfrom app import app, db\n\n@pytest.fixture\ndef client():\n    app.config['TESTING'] = True\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\n    \n    with app.test_client() as client:\n        with app.app_context():\n            db.create_all()\n            yield client\n            db.drop_all()\n\ndef test_task_list(client):\n    # Test regular request\n    rv = client.get('/tasks')\n    assert rv.status_code == 200\n    assert b'Tasks' in rv.data\n\n    # Test HTMX request\n    rv = client.get('/tasks', headers={'HX-Request': 'true'})\n    assert rv.status_code == 200\n    assert b'Tasks' not in rv.data  # Should only return list partial\n\ndef test_task_create(client):\n    data = {\n        'title': 'Test Task',\n        'description': 'Test Description'\n    }\n    rv = client.post('/tasks/create', data=data)\n    assert rv.status_code == 200\n    assert b'Test Task' in rv.data\n```",
    "filename": "htmx-flask.md",
    "tags": [
      "backend-development",
      "Python"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:37.080Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-htmx-django",
    "title": "htmx-django",
    "description": "# HTMX Django Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# HTMX Django Development Instructions\n\n## Project Context\n- Django web framework\n- HTMX integration\n- Server-side rendering\n- Template system\n- Database interactions\n\n## Code Style Guidelines\n- Django best practices\n- HTMX attributes\n- Template organization\n- View patterns\n- Response handling\n\n## Architecture Patterns\n- Class-based views\n- Template inheritance\n- Form handling\n- Partial updates\n- State management\n\n## Testing Requirements\n- View testing\n- Template testing\n- Integration testing\n- Response testing\n- Performance testing\n\n## Documentation Standards\n- View documentation\n- Template documentation\n- HTMX interactions\n- Response patterns\n- Setup instructions\n\n## Project-Specific Rules\n### Django HTMX Patterns\n```python\n# Views.py\nfrom django.views.generic import ListView, CreateView, UpdateView\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.http import HttpResponse\nfrom django.template.loader import render_to_string\n\nclass TaskListView(LoginRequiredMixin, ListView):\n    model = Task\n    template_name = 'tasks/list.html'\n    context_object_name = 'tasks'\n\n    def get(self, request, *args, **kwargs):\n        tasks = self.get_queryset()\n        \n        if request.htmx:\n            return HttpResponse(\n                render_to_string(\n                    'tasks/_list.html',\n                    {'tasks': tasks},\n                    request=request\n                )\n            )\n        return super().get(request, *args, **kwargs)\n\nclass TaskCreateView(LoginRequiredMixin, CreateView):\n    model = Task\n    form_class = TaskForm\n    template_name = 'tasks/_form.html'\n\n    def form_valid(self, form):\n        task = form.save(commit=False)\n        task.user = self.request.user\n        task.save()\n        \n        context = {'task': task}\n        return HttpResponse(\n            render_to_string(\n                'tasks/_item.html',\n                context,\n                request=self.request\n            )\n        )\n\n    def form_invalid(self, form):\n        return HttpResponse(\n            render_to_string(\n                self.template_name,\n                {'form': form},\n                request=self.request\n            ),\n            status=422\n        )\n\n# Templates/base.html\n{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{% block title %}{% endblock %}</title>\n    <script src=\"{% static 'js/htmx.min.js' %}\" defer></script>\n    {% block extra_head %}{% endblock %}\n</head>\n<body hx-headers='{\"X-CSRFToken\": \"{{ csrf_token }}\"}'>\n    {% block content %}{% endblock %}\n</body>\n</html>\n\n# Templates/tasks/list.html\n{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container mx-auto p-4\">\n    <h1 class=\"text-2xl font-bold mb-4\">Tasks</h1>\n    \n    <form hx-post=\"{% url 'task_create' %}\"\n          hx-target=\"#task-list\"\n          hx-swap=\"afterbegin\"\n          class=\"mb-4\">\n        {% include 'tasks/_form.html' %}\n    </form>\n\n    <div id=\"task-list\"\n         hx-get=\"{% url 'task_list' %}\"\n         hx-trigger=\"load delay:100ms\"\n         hx-indicator=\"#loading\">\n        {% include 'tasks/_list.html' %}\n    </div>\n</div>\n{% endblock %}\n\n# Templates/tasks/_form.html\n{% load crispy_forms_tags %}\n\n<div class=\"bg-white p-4 rounded shadow\">\n    {{ form|crispy }}\n    <button type=\"submit\"\n            class=\"bg-blue-500 text-white px-4 py-2 rounded\">\n        Add Task\n    </button>\n</div>\n\n# Templates/tasks/_list.html\n{% for task in tasks %}\n    {% include 'tasks/_item.html' %}\n{% empty %}\n    <p class=\"text-gray-500\">No tasks yet.</p>\n{% endfor %}\n\n# Templates/tasks/_item.html\n<div id=\"task-{{ task.id }}\"\n     class=\"bg-white p-4 rounded shadow mb-2\">\n    <div class=\"flex items-center justify-between\">\n        <span class=\"{% if task.completed %}line-through{% endif %}\">\n            {{ task.title }}\n        </span>\n        <div class=\"space-x-2\">\n            <button hx-put=\"{% url 'task_toggle' task.id %}\"\n                    hx-target=\"#task-{{ task.id }}\"\n                    class=\"text-blue-500 hover:text-blue-700\">\n                {% if task.completed %}Undo{% else %}Complete{% endif %}\n            </button>\n            <button hx-delete=\"{% url 'task_delete' task.id %}\"\n                    hx-target=\"#task-{{ task.id }}\"\n                    hx-confirm=\"Are you sure?\"\n                    class=\"text-red-500 hover:text-red-700\">\n                Delete\n            </button>\n        </div>\n    </div>\n</div>\n\n# Forms.py\nfrom django import forms\nfrom .models import Task\n\nclass TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = ['title', 'description']\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 3}),\n        }\n\n    def clean_title(self):\n        title = self.cleaned_data['title']\n        if len(title) < 3:\n            raise forms.ValidationError(\"Title must be at least 3 characters long\")\n        return title\n\n# Middleware for HTMX\nclass HtmxMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        request.htmx = bool(request.headers.get('HX-Request'))\n        return self.get_response(request)\n\n# URLs.py\nfrom django.urls import path\nfrom .views import TaskListView, TaskCreateView, TaskToggleView\n\nurlpatterns = [\n    path('tasks/', TaskListView.as_view(), name='task_list'),\n    path('tasks/create/', TaskCreateView.as_view(), name='task_create'),\n    path('tasks/<int:pk>/toggle/', TaskToggleView.as_view(), name='task_toggle'),\n]\n\n# Testing\nfrom django.test import TestCase, Client\nfrom django.urls import reverse\n\nclass TaskViewTests(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.user = User.objects.create_user('testuser', 'test@test.com', 'testpass')\n        self.client.login(username='testuser', password='testpass')\n\n    def test_htmx_list_view(self):\n        response = self.client.get(\n            reverse('task_list'),\n            HTTP_HX_REQUEST='true'\n        )\n        self.assertEqual(response.status_code, 200)\n        self.assertTemplateUsed(response, 'tasks/_list.html')\n```",
    "filename": "htmx-django.md",
    "tags": [
      "backend-development",
      "Python",
      "Django"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:37.059Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-htmx-basic",
    "title": "htmx-basic",
    "description": "# HTMX Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# HTMX Development Instructions\n\n## Project Context\n- HTMX-powered applications\n- HTML-first development\n- Server-side rendering\n- Progressive enhancement\n- Hypermedia-driven architecture\n\n## Code Style Guidelines\n- HTMX attribute patterns\n- CSS organization\n- Event handling\n- Error handling\n- Response formatting\n\n## Architecture Patterns\n- Hypermedia controls\n- Partial updates\n- Form handling\n- Server-side validation\n- State management\n\n## Testing Requirements\n- Integration testing\n- Event testing\n- Response testing\n- Visual testing\n- Accessibility testing\n\n## Documentation Standards\n- Attribute documentation\n- Event documentation\n- Response patterns\n- Error handling\n- Browser support\n\n## Project-Specific Rules\n### HTMX Patterns\n```html\n<!-- Basic HTMX Pattern -->\n<div class=\"container mx-auto p-4\">\n  <!-- Dynamic Content Loading -->\n  <button \n    class=\"px-4 py-2 bg-blue-500 text-white rounded\"\n    hx-get=\"/api/items\"\n    hx-trigger=\"click\"\n    hx-target=\"#items-list\"\n    hx-indicator=\"#spinner\"\n  >\n    Load Items\n  </button>\n\n  <!-- Loading Indicator -->\n  <div id=\"spinner\" class=\"htmx-indicator\">\n    <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n  </div>\n\n  <!-- Target Container -->\n  <div id=\"items-list\" class=\"mt-4 space-y-2\">\n    <!-- Items will be loaded here -->\n  </div>\n\n  <!-- Form Submission -->\n  <form \n    hx-post=\"/api/items\"\n    hx-swap=\"afterend\"\n    hx-trigger=\"submit\"\n    class=\"mt-8 space-y-4\"\n  >\n    <div>\n      <label class=\"block text-sm font-medium text-gray-700\">\n        Item Name\n      </label>\n      <input \n        type=\"text\" \n        name=\"name\"\n        class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\"\n        required\n      >\n    </div>\n    <button \n      type=\"submit\"\n      class=\"px-4 py-2 bg-green-500 text-white rounded\"\n    >\n      Add Item\n    </button>\n  </form>\n\n  <!-- Infinite Scroll -->\n  <div\n    hx-get=\"/api/items?page=${next}\"\n    hx-trigger=\"revealed\"\n    hx-swap=\"afterend\"\n    class=\"mt-8\"\n  >\n    <!-- Content here -->\n  </div>\n\n  <!-- Validation Feedback -->\n  <form \n    hx-post=\"/api/validate\"\n    hx-trigger=\"change\"\n    hx-target=\"next .error-message\"\n  >\n    <input \n      type=\"email\" \n      name=\"email\"\n      class=\"block w-full mt-1 rounded-md border-gray-300\"\n    >\n    <div class=\"error-message text-red-500 text-sm\"></div>\n  </form>\n\n  <!-- Confirmation Dialog -->\n  <button\n    hx-delete=\"/api/items/1\"\n    hx-confirm=\"Are you sure?\"\n    hx-target=\"#item-1\"\n    class=\"text-red-500 hover:text-red-700\"\n  >\n    Delete Item\n  </button>\n\n  <!-- Out-of-Band Updates -->\n  <div \n    id=\"notification\"\n    hx-swap-oob=\"true\"\n    class=\"fixed top-4 right-4 bg-green-500 text-white p-4 rounded shadow\"\n  >\n    Item updated successfully\n  </div>\n</div>\n\n<!-- Server Response Templates -->\n<!-- Success Response -->\n<template id=\"success-template\">\n  <div class=\"bg-green-100 border-l-4 border-green-500 p-4\">\n    <div class=\"flex\">\n      <div class=\"flex-shrink-0\">\n        <svg class=\"h-5 w-5 text-green-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" />\n        </svg>\n      </div>\n      <div class=\"ml-3\">\n        <p class=\"text-sm text-green-700\">\n          Operation completed successfully\n        </p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<!-- Error Response -->\n<template id=\"error-template\">\n  <div class=\"bg-red-100 border-l-4 border-red-500 p-4\">\n    <div class=\"flex\">\n      <div class=\"flex-shrink-0\">\n        <svg class=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\" />\n        </svg>\n      </div>\n      <div class=\"ml-3\">\n        <p class=\"text-sm text-red-700\">\n          An error occurred\n        </p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<!-- JavaScript Helpers -->\n<script>\n  // Custom Events Handler\n  htmx.on('htmx:afterSwap', function(evt) {\n    if (evt.detail.target.id === 'notification') {\n      setTimeout(() => {\n        evt.detail.target.remove();\n      }, 3000);\n    }\n  });\n\n  // Response Interceptor\n  htmx.defineTransformer('response', function(response) {\n    if (response.status === 422) {\n      const template = document.getElementById('error-template');\n      return template.content.cloneNode(true);\n    }\n    return response;\n  });\n\n  // Progress Indicator\n  htmx.defineTransformer('progress', function(progress) {\n    const percent = Math.round((progress.loaded / progress.total) * 100);\n    document.querySelector('.progress-bar').style.width = percent + '%';\n  });\n</script>\n```",
    "filename": "htmx-basic.md",
    "tags": [
      "frontend-development",
      "JavaScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:37.037Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-html-tailwind-javascript",
    "title": "html-tailwind-javascript",
    "description": "# HTML, Tailwind CSS, and JavaScript Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# HTML, Tailwind CSS, and JavaScript Development Instructions\n\n## Project Context\n- Modern web development\n- Responsive design\n- Interactive UI components\n- Accessibility standards\n- Performance optimization\n\n## Code Style Guidelines\n- Semantic HTML\n- Tailwind class organization\n- JavaScript best practices\n- Component structure\n- Accessibility patterns\n\n## Architecture Patterns\n- Component composition\n- State management\n- Event delegation\n- CSS organization\n- Module patterns\n\n## Testing Requirements\n- Component testing\n- Visual testing\n- Accessibility testing\n- Performance testing\n- Cross-browser testing\n\n## Documentation Standards\n- Component documentation\n- Accessibility notes\n- Tailwind customization\n- JavaScript APIs\n- Browser support\n\n## Project-Specific Rules\n### Web Development Patterns\n```html\n<!-- Component Pattern -->\n<template data-component=\"card\">\n  <article class=\"rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow\">\n    <div class=\"aspect-video relative\">\n      <img \n        src=\"placeholder.jpg\" \n        alt=\"Card image\" \n        class=\"object-cover w-full h-full\"\n        loading=\"lazy\"\n      >\n    </div>\n    <div class=\"p-4 space-y-2\">\n      <h3 class=\"text-lg font-semibold text-gray-900 line-clamp-2\">\n        Card Title\n      </h3>\n      <p class=\"text-gray-600 line-clamp-3\">\n        Card description that might be longer and need truncation...\n      </p>\n      <button \n        class=\"inline-flex items-center px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n        type=\"button\"\n      >\n        Learn More\n      </button>\n    </div>\n  </article>\n</template>\n\n<!-- JavaScript Component -->\nclass Component {\n  constructor(element) {\n    this.element = element;\n    this.state = new Proxy(this.getInitialState(), {\n      set: (target, property, value) => {\n        target[property] = value;\n        this.render();\n        return true;\n      }\n    });\n    \n    this.init();\n  }\n  \n  getInitialState() {\n    return {};\n  }\n  \n  init() {\n    this.bindEvents();\n  }\n  \n  bindEvents() {}\n  \n  render() {}\n}\n\n// Card Component Implementation\nclass Card extends Component {\n  getInitialState() {\n    return {\n      expanded: false,\n      loading: false\n    };\n  }\n  \n  bindEvents() {\n    this.element.querySelector('button')\n      .addEventListener('click', () => this.handleClick());\n  }\n  \n  async handleClick() {\n    this.state.loading = true;\n    try {\n      const data = await this.fetchDetails();\n      this.state.expanded = true;\n      this.state.details = data;\n    } catch (error) {\n      console.error('Failed to load details:', error);\n    } finally {\n      this.state.loading = false;\n    }\n  }\n  \n  render() {\n    // Update DOM based on state\n  }\n}\n\n// Utility Functions\nconst debounce = (fn, delay) => {\n  let timeoutId;\n  return (...args) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => fn(...args), delay);\n  };\n};\n\nconst observeIntersection = (element, callback, options = {}) => {\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        callback(entry);\n      }\n    });\n  }, options);\n  \n  observer.observe(element);\n  return () => observer.disconnect();\n};\n\n// Form Validation\nclass FormValidator {\n  constructor(form) {\n    this.form = form;\n    this.fields = {};\n    this.init();\n  }\n  \n  init() {\n    this.form.setAttribute('novalidate', '');\n    this.setupFields();\n    this.bindEvents();\n  }\n  \n  setupFields() {\n    this.form.querySelectorAll('[data-validate]').forEach(field => {\n      const rules = field.dataset.validate.split(',');\n      this.fields[field.name] = { element: field, rules };\n    });\n  }\n  \n  validate() {\n    let isValid = true;\n    \n    Object.entries(this.fields).forEach(([name, field]) => {\n      const value = field.element.value;\n      const errors = this.validateField(value, field.rules);\n      \n      if (errors.length) {\n        isValid = false;\n        this.showErrors(field.element, errors);\n      } else {\n        this.clearErrors(field.element);\n      }\n    });\n    \n    return isValid;\n  }\n}\n\n// Modal Component\nclass Modal extends Component {\n  static template = `\n    <div class=\"fixed inset-0 z-50 flex items-center justify-center\">\n      <div class=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\"></div>\n      <div class=\"relative bg-white rounded-lg shadow-xl max-w-lg w-full mx-4\">\n        <div class=\"p-4\">\n          <button \n            type=\"button\"\n            class=\"absolute top-4 right-4 text-gray-400 hover:text-gray-500\"\n            aria-label=\"Close\"\n          >\n            <svg class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n          <div class=\"modal-content\"></div>\n        </div>\n      </div>\n    </div>\n  `;\n  \n  constructor(content) {\n    super();\n    this.content = content;\n    this.render();\n    this.show();\n  }\n  \n  show() {\n    document.body.appendChild(this.element);\n    document.body.classList.add('overflow-hidden');\n  }\n  \n  hide() {\n    this.element.remove();\n    document.body.classList.remove('overflow-hidden');\n  }\n}\n\n// Accessibility Helpers\nconst A11y = {\n  handleTabTrapping(element) {\n    const focusableElements = element.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n    \n    const firstFocusable = focusableElements[0];\n    const lastFocusable = focusableElements[focusableElements.length - 1];\n    \n    element.addEventListener('keydown', e => {\n      if (e.key === 'Tab') {\n        if (e.shiftKey && document.activeElement === firstFocusable) {\n          e.preventDefault();\n          lastFocusable.focus();\n        } else if (!e.shiftKey && document.activeElement === lastFocusable) {\n          e.preventDefault();\n          firstFocusable.focus();\n        }\n      }\n    });\n  }\n};",
    "filename": "html-tailwind-javascript.md",
    "tags": [
      "frontend-development",
      "JavaScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:37.014Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-graphical-apps",
    "title": "graphical-apps",
    "description": "# Graphical Application Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Graphical Application Development Instructions\n\n## Project Context\n- Cross-platform GUI development\n- Canvas and WebGL rendering\n- Graphics optimization\n- Event handling\n- Animation systems\n\n## Code Style Guidelines\n- Component organization\n- Performance patterns\n- Memory management\n- Event delegation\n- Animation patterns\n\n## Architecture Patterns\n- Scene graph structure\n- State management\n- Render pipeline\n- Event system\n- Asset management\n\n## Testing Requirements\n- Visual regression testing\n- Performance testing\n- Event testing\n- Animation testing\n- Cross-platform testing\n\n## Documentation Standards\n- API documentation\n- Performance guidelines\n- Animation specs\n- Asset requirements\n- Setup instructions\n\n## Project-Specific Rules\n### Graphics Patterns\n```typescript\n// Scene Graph Pattern\nclass SceneNode {\n    private children: SceneNode[] = [];\n    private transform: Transform = new Transform();\n    \n    constructor(\n        private id: string,\n        private renderer: Renderer\n    ) {}\n    \n    addChild(child: SceneNode): void {\n        this.children.push(child);\n    }\n    \n    update(deltaTime: number): void {\n        this.updateSelf(deltaTime);\n        this.children.forEach(child => child.update(deltaTime));\n    }\n    \n    render(context: RenderContext): void {\n        context.save();\n        context.transform(this.transform.matrix);\n        \n        this.renderSelf(context);\n        this.children.forEach(child => child.render(context));\n        \n        context.restore();\n    }\n    \n    protected updateSelf(deltaTime: number): void {}\n    protected renderSelf(context: RenderContext): void {}\n}\n\n// Animation System\nclass AnimationSystem {\n    private animations: Map<string, Animation> = new Map();\n    private running: Set<string> = new Set();\n    \n    add(id: string, animation: Animation): void {\n        this.animations.set(id, animation);\n    }\n    \n    play(id: string, options?: AnimationOptions): void {\n        const animation = this.animations.get(id);\n        if (animation) {\n            animation.start(options);\n            this.running.add(id);\n        }\n    }\n    \n    update(deltaTime: number): void {\n        this.running.forEach(id => {\n            const animation = this.animations.get(id);\n            if (animation?.update(deltaTime)) {\n                this.running.delete(id);\n            }\n        });\n    }\n}\n\n// Event System\nclass EventSystem {\n    private handlers: Map<string, Set<EventHandler>> = new Map();\n    \n    on(event: string, handler: EventHandler): void {\n        if (!this.handlers.has(event)) {\n            this.handlers.set(event, new Set());\n        }\n        this.handlers.get(event)!.add(handler);\n    }\n    \n    emit(event: string, data: any): void {\n        const handlers = this.handlers.get(event);\n        if (handlers) {\n            handlers.forEach(handler => handler(data));\n        }\n    }\n}\n\n// Render Pipeline\nclass RenderPipeline {\n    private stages: RenderStage[] = [];\n    \n    addStage(stage: RenderStage): void {\n        this.stages.push(stage);\n    }\n    \n    render(scene: Scene, camera: Camera): void {\n        let input = this.prepareScene(scene, camera);\n        \n        for (const stage of this.stages) {\n            input = stage.process(input);\n        }\n        \n        this.presentOutput(input);\n    }\n    \n    private prepareScene(scene: Scene, camera: Camera): RenderData {\n        // Prepare initial render data\n        return {\n            drawCalls: [],\n            lights: [],\n            camera: camera.getData()\n        };\n    }\n    \n    private presentOutput(data: RenderData): void {\n        // Present final rendered output\n    }\n}\n\n// Asset Management\nclass AssetManager {\n    private assets: Map<string, Asset> = new Map();\n    private loading: Map<string, Promise<Asset>> = new Map();\n    \n    async load(id: string, url: string): Promise<Asset> {\n        if (this.assets.has(id)) {\n            return this.assets.get(id)!;\n        }\n        \n        if (this.loading.has(id)) {\n            return this.loading.get(id)!;\n        }\n        \n        const loadPromise = this.loadAsset(url)\n            .then(asset => {\n                this.assets.set(id, asset);\n                this.loading.delete(id);\n                return asset;\n            });\n            \n        this.loading.set(id, loadPromise);\n        return loadPromise;\n    }\n    \n    private async loadAsset(url: string): Promise<Asset> {\n        // Asset loading implementation\n    }\n}\n\n// Performance Optimization\nclass RenderOptimizer {\n    private visibleNodes: Set<SceneNode> = new Set();\n    private frustum: Frustum;\n    \n    updateVisibility(scene: Scene, camera: Camera): void {\n        this.frustum = camera.getFrustum();\n        this.visibleNodes.clear();\n        \n        this.traverseScene(scene.root);\n    }\n    \n    private traverseScene(node: SceneNode): void {\n        if (!this.isNodeVisible(node)) {\n            return;\n        }\n        \n        this.visibleNodes.add(node);\n        node.children.forEach(child => this.traverseScene(child));\n    }\n    \n    private isNodeVisible(node: SceneNode): boolean {\n        const bounds = node.getBounds();\n        return this.frustum.intersects(bounds);\n    }\n}\n\n// Input Handling\nclass InputManager {\n    private subscribers: Map<InputEvent, Set<InputHandler>> = new Map();\n    \n    subscribe(event: InputEvent, handler: InputHandler): void {\n        if (!this.subscribers.has(event)) {\n            this.subscribers.set(event, new Set());\n        }\n        this.subscribers.get(event)!.add(handler);\n    }\n    \n    handleInput(event: InputEvent): void {\n        const handlers = this.subscribers.get(event.type);\n        if (handlers) {\n            handlers.forEach(handler => handler(event));\n        }\n    }\n}\n```",
    "filename": "graphical-apps.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "Node"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.990Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-go-servemux-rest",
    "title": "go-servemux-rest",
    "description": "# Go ServeMux REST API Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Go ServeMux REST API Development Instructions\n\n## Project Context\n- Go standard library\n- REST API development\n- ServeMux routing\n- JSON handling\n- HTTP middleware\n\n## Code Style Guidelines\n- HTTP handler patterns\n- Router organization\n- Request validation\n- Response formatting\n- Error handling\n\n## Architecture Patterns\n- Handler patterns\n- Middleware chains\n- Service layer\n- Repository pattern\n- Request/Response cycle\n\n## Testing Requirements\n- Handler testing\n- Integration testing\n- Middleware testing\n- Mock testing\n- Performance testing\n\n## Documentation Standards\n- API documentation\n- Handler documentation\n- Route documentation\n- Error codes\n- Setup instructions\n\n## Project-Specific Rules\n### ServeMux Patterns\n```go\n// Router Pattern\ntype Router struct {\n    *http.ServeMux\n    middlewares []Middleware\n}\n\nfunc NewRouter(middlewares ...Middleware) *Router {\n    return &Router{\n        ServeMux:    http.NewServeMux(),\n        middlewares: middlewares,\n    }\n}\n\nfunc (r *Router) Handle(pattern string, handler http.Handler) {\n    // Apply middlewares\n    for i := len(r.middlewares) - 1; i >= 0; i-- {\n        handler = r.middlewares[i](handler)\n    }\n    r.ServeMux.Handle(pattern, handler)\n}\n\n// Handler Pattern\ntype UserHandler struct {\n    service UserService\n    logger  Logger\n}\n\nfunc (h *UserHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    switch r.Method {\n    case http.MethodGet:\n        h.handleGet(w, r)\n    case http.MethodPost:\n        h.handlePost(w, r)\n    default:\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n    }\n}\n\nfunc (h *UserHandler) handleGet(w http.ResponseWriter, r *http.Request) {\n    ctx := r.Context()\n    id := chi.URLParam(r, \"id\")\n    \n    user, err := h.service.GetUser(ctx, id)\n    if err != nil {\n        h.handleError(w, err)\n        return\n    }\n    \n    respondJSON(w, http.StatusOK, user)\n}\n\n// Middleware Pattern\ntype Middleware func(http.Handler) http.Handler\n\nfunc LoggingMiddleware(logger Logger) Middleware {\n    return func(next http.Handler) http.Handler {\n        return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n            start := time.Now()\n            ww := NewResponseWriter(w)\n            \n            defer func() {\n                logger.Info(\"request completed\",\n                    \"method\", r.Method,\n                    \"path\", r.URL.Path,\n                    \"status\", ww.Status(),\n                    \"duration\", time.Since(start),\n                )\n            }()\n            \n            next.ServeHTTP(ww, r)\n        })\n    }\n}\n\n// Response Writer Pattern\ntype ResponseWriter struct {\n    http.ResponseWriter\n    status      int\n    wroteHeader bool\n}\n\nfunc NewResponseWriter(w http.ResponseWriter) *ResponseWriter {\n    return &ResponseWriter{ResponseWriter: w}\n}\n\nfunc (rw *ResponseWriter) Status() int {\n    return rw.status\n}\n\nfunc (rw *ResponseWriter) WriteHeader(code int) {\n    if rw.wroteHeader {\n        return\n    }\n    rw.status = code\n    rw.ResponseWriter.WriteHeader(code)\n    rw.wroteHeader = true\n}\n\n// JSON Response Pattern\nfunc respondJSON(w http.ResponseWriter, status int, data interface{}) {\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.WriteHeader(status)\n    \n    if data != nil {\n        if err := json.NewEncoder(w).Encode(data); err != nil {\n            http.Error(w, err.Error(), http.StatusInternalServerError)\n            return\n        }\n    }\n}\n\n// Error Handling Pattern\ntype ErrorResponse struct {\n    Error   string `json:\"error\"`\n    Message string `json:\"message\"`\n    Code    string `json:\"code\"`\n}\n\nfunc (h *UserHandler) handleError(w http.ResponseWriter, err error) {\n    switch e := err.(type) {\n    case *NotFoundError:\n        respondJSON(w, http.StatusNotFound, ErrorResponse{\n            Error:   \"Not Found\",\n            Message: e.Error(),\n            Code:    \"NOT_FOUND\",\n        })\n    case *ValidationError:\n        respondJSON(w, http.StatusBadRequest, ErrorResponse{\n            Error:   \"Bad Request\",\n            Message: e.Error(),\n            Code:    \"VALIDATION_ERROR\",\n        })\n    default:\n        respondJSON(w, http.StatusInternalServerError, ErrorResponse{\n            Error:   \"Internal Server Error\",\n            Message: \"An unexpected error occurred\",\n            Code:    \"INTERNAL_ERROR\",\n        })\n    }\n}\n\n// Request Validation Pattern\ntype CreateUserRequest struct {\n    Name     string `json:\"name\" validate:\"required\"`\n    Email    string `json:\"email\" validate:\"required,email\"`\n    Password string `json:\"password\" validate:\"required,min=8\"`\n}\n\nfunc (r *CreateUserRequest) Validate() error {\n    validate := validator.New()\n    if err := validate.Struct(r); err != nil {\n        return NewValidationError(err)\n    }\n    return nil\n}\n\n// Testing Pattern\nfunc TestUserHandler_GetUser(t *testing.T) {\n    tests := []struct {\n        name       string\n        userID     string\n        setupMock  func(service *MockUserService)\n        wantStatus int\n        wantBody   string\n    }{\n        {\n            name:   \"success\",\n            userID: \"123\",\n            setupMock: func(service *MockUserService) {\n                service.EXPECT().\n                    GetUser(gomock.Any(), \"123\").\n                    Return(&User{ID: \"123\", Name: \"Test\"}, nil)\n            },\n            wantStatus: http.StatusOK,\n            wantBody:   `{\"id\":\"123\",\"name\":\"Test\"}`,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            ctrl := gomock.NewController(t)\n            defer ctrl.Finish()\n\n            service := NewMockUserService(ctrl)\n            tt.setupMock(service)\n\n            handler := NewUserHandler(service)\n            req := httptest.NewRequest(http.MethodGet, \"/users/\"+tt.userID, nil)\n            rec := httptest.NewRecorder()\n\n            handler.ServeHTTP(rec, req)\n\n            assert.Equal(t, tt.wantStatus, rec.Code)\n            assert.JSONEq(t, tt.wantBody, rec.Body.String())\n        })\n    }\n}\n```",
    "filename": "go-servemux-rest.md",
    "tags": [
      "backend-development",
      "Go"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.965Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-go-backend-scalability",
    "title": "go-backend-scalability",
    "description": "# Go Backend Scalability Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Go Backend Scalability Instructions\n\n## Project Context\n- Go backend services\n- Microservices architecture\n- Distributed systems\n- High-performance computing\n- Scalable architecture\n\n## Code Style Guidelines\n- Go idiomatic code\n- Error handling patterns\n- Concurrency patterns\n- Interface design\n- Package organization\n\n## Architecture Patterns\n- Clean architecture\n- SOLID principles\n- Microservices patterns\n- Service mesh\n- Event-driven design\n\n## Testing Requirements\n- Unit testing\n- Integration testing\n- Load testing\n- Benchmark testing\n- Performance profiling\n\n## Documentation Standards\n- Package documentation\n- API documentation\n- Architecture diagrams\n- Performance metrics\n- Deployment guides\n\n## Project-Specific Rules\n### Go Patterns\n```go\n// Service Pattern\ntype Service interface {\n    Create(ctx context.Context, req *CreateRequest) (*Response, error)\n    Get(ctx context.Context, id string) (*Response, error)\n    List(ctx context.Context, filter *Filter) ([]*Response, error)\n}\n\ntype serviceImpl struct {\n    repo     Repository\n    cache    Cache\n    metrics  MetricsClient\n    logger   Logger\n}\n\nfunc NewService(opts ...Option) Service {\n    s := &serviceImpl{}\n    for _, opt := range opts {\n        opt(s)\n    }\n    return s\n}\n\n// Repository Pattern\ntype Repository interface {\n    Create(ctx context.Context, entity *Entity) error\n    Get(ctx context.Context, id string) (*Entity, error)\n    List(ctx context.Context, filter *Filter) ([]*Entity, error)\n}\n\ntype postgresRepo struct {\n    db *sql.DB\n}\n\nfunc (r *postgresRepo) Create(ctx context.Context, entity *Entity) error {\n    query := `INSERT INTO entities (id, data) VALUES ($1, $2)`\n    _, err := r.db.ExecContext(ctx, query, entity.ID, entity.Data)\n    return errors.Wrap(err, \"failed to create entity\")\n}\n\n// Middleware Pattern\nfunc LoggingMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        start := time.Now()\n        ww := middleware.NewWrapResponseWriter(w, r.ProtoMajor)\n        \n        defer func() {\n            logger.Info(\"request completed\",\n                zap.String(\"path\", r.URL.Path),\n                zap.Int(\"status\", ww.Status()),\n                zap.Duration(\"latency\", time.Since(start)),\n            )\n        }()\n        \n        next.ServeHTTP(ww, r)\n    })\n}\n\n// Error Handling Pattern\ntype Error struct {\n    Code    string `json:\"code\"`\n    Message string `json:\"message\"`\n    Op      string `json:\"-\"`\n    Err     error  `json:\"-\"`\n}\n\nfunc (e *Error) Error() string {\n    return fmt.Sprintf(\"%s: %v\", e.Op, e.Message)\n}\n\nfunc E(op string, err error) error {\n    if err == nil {\n        return nil\n    }\n    \n    return &Error{\n        Code:    \"INTERNAL_ERROR\",\n        Message: err.Error(),\n        Op:      op,\n        Err:     err,\n    }\n}\n\n// Concurrency Pattern\ntype WorkerPool struct {\n    workers int\n    tasks   chan Task\n    results chan Result\n    done    chan struct{}\n}\n\nfunc NewWorkerPool(workers int) *WorkerPool {\n    wp := &WorkerPool{\n        workers: workers,\n        tasks:   make(chan Task),\n        results: make(chan Result),\n        done:    make(chan struct{}),\n    }\n    wp.Start()\n    return wp\n}\n\nfunc (wp *WorkerPool) Start() {\n    for i := 0; i < wp.workers; i++ {\n        go func() {\n            for task := range wp.tasks {\n                result := task.Execute()\n                wp.results <- result\n            }\n        }()\n    }\n}\n\n// Circuit Breaker Pattern\ntype CircuitBreaker struct {\n    timeout    time.Duration\n    maxErrors  int\n    errors     int\n    lastError  time.Time\n    state      State\n    mu         sync.RWMutex\n}\n\nfunc (cb *CircuitBreaker) Execute(req *Request) (*Response, error) {\n    cb.mu.RLock()\n    if cb.state == StateOpen {\n        if time.Since(cb.lastError) > cb.timeout {\n            cb.mu.RUnlock()\n            cb.mu.Lock()\n            cb.state = StateHalfOpen\n            cb.mu.Unlock()\n        } else {\n            cb.mu.RUnlock()\n            return nil, ErrCircuitOpen\n        }\n    } else {\n        cb.mu.RUnlock()\n    }\n\n    resp, err := cb.execute(req)\n    if err != nil {\n        cb.recordError()\n        return nil, err\n    }\n\n    cb.reset()\n    return resp, nil\n}\n\n// Metrics Pattern\ntype MetricsClient interface {\n    Counter(name string, tags map[string]string) Counter\n    Gauge(name string, tags map[string]string) Gauge\n    Histogram(name string, tags map[string]string) Histogram\n}\n\ntype prometheusClient struct {\n    namespace string\n}\n\nfunc (c *prometheusClient) Counter(name string, tags map[string]string) Counter {\n    opts := prometheus.CounterOpts{\n        Namespace: c.namespace,\n        Name:      name,\n    }\n    counter := prometheus.NewCounterVec(opts, keysFromMap(tags))\n    prometheus.MustRegister(counter)\n    return &prometheusCounter{counter: counter}\n}\n\n// Configuration Pattern\ntype Config struct {\n    Server   ServerConfig   `yaml:\"server\"`\n    Database DatabaseConfig `yaml:\"database\"`\n    Cache    CacheConfig    `yaml:\"cache\"`\n}\n\nfunc LoadConfig(path string) (*Config, error) {\n    data, err := os.ReadFile(path)\n    if err != nil {\n        return nil, errors.Wrap(err, \"failed to read config file\")\n    }\n\n    var config Config\n    if err := yaml.Unmarshal(data, &config); err != nil {\n        return nil, errors.Wrap(err, \"failed to parse config\")\n    }\n\n    return &config, nil\n}\n```",
    "filename": "go-backend-scalability.md",
    "tags": [
      "backend-development",
      "Go"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.940Z",
      "contributor": "Community"
    }
  },
  {
    "id": "general-development-github-code-quality",
    "title": "github-code-quality",
    "description": "# GitHub Code Quality Instructions",
    "category": "general-development",
    "subcategories": [],
    "content": "# GitHub Code Quality Instructions\n\n## Project Context\n- GitHub repository management\n- Code review practices\n- Pull request workflows\n- CI/CD integration\n- Quality metrics\n\n## Code Style Guidelines\n- Language-agnostic standards\n- Code review checklist\n- Documentation requirements\n- Commit message format\n- Branch naming conventions\n\n## Architecture Patterns\n- Repository organization\n- Branch protection rules\n- GitHub Actions workflow\n- Code review process\n- Release management\n\n## Testing Requirements\n- CI pipeline testing\n- Code coverage requirements\n- Security scanning\n- Performance testing\n- Integration testing\n\n## Documentation Standards\n- README requirements\n- Pull request templates\n- Issue templates\n- Contributing guidelines\n- Security policies\n\n## Project-Specific Rules\n### GitHub Workflows\n```yaml\n# Pull Request Template\n---\nname: Pull Request\nabout: Create a pull request to merge changes\ntitle: '[Feature/Fix/Refactor]: Brief description'\nlabels: ''\nassignees: ''\n\n---\n\n## Description\nBrief description of the changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests added/updated\n- [ ] Integration tests added/updated\n- [ ] Manual testing performed\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Self-review performed\n- [ ] Comments added where needed\n- [ ] Documentation updated\n- [ ] Tests passing\n- [ ] No new warnings\n\n# GitHub Actions Workflow\nname: Code Quality\n\non:\n  pull_request:\n    branches: [ main, develop ]\n  push:\n    branches: [ main, develop ]\n\njobs:\n  quality:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Code Quality Checks\n        run: |\n          # Run linters\n          npm run lint\n          \n          # Run tests with coverage\n          npm run test:coverage\n          \n          # Security scan\n          npm audit\n          \n      - name: Upload Coverage\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n\n# Branch Protection Rules\nprotected_branches:\n  main:\n    required_status_checks:\n      strict: true\n      contexts:\n        - \"Code Quality\"\n    enforce_admins: true\n    required_pull_request_reviews:\n      required_approving_review_count: 2\n      dismiss_stale_reviews: true\n    required_linear_history: true\n    allow_force_pushes: false\n\n# Commit Message Convention\ncommit_message_convention: |\n  type(scope): description\n\n  [optional body]\n\n  [optional footer]\n\n  Types:\n  - feat: A new feature\n  - fix: A bug fix\n  - docs: Documentation only changes\n  - style: Changes that do not affect the meaning of the code\n  - refactor: A code change that neither fixes a bug nor adds a feature\n  - perf: A code change that improves performance\n  - test: Adding missing tests or correcting existing tests\n  - chore: Changes to the build process or auxiliary tools\n\n# Code Review Guidelines\ncode_review_checklist:\n  functionality:\n    - Logic correctness\n    - Error handling\n    - Edge cases covered\n    - Performance considerations\n  \n  quality:\n    - Code style compliance\n    - Documentation completeness\n    - Test coverage\n    - No code smells\n  \n  security:\n    - Input validation\n    - Authentication/Authorization\n    - Data protection\n    - Dependencies checked\n\n# Repository Configuration\nrepository_settings:\n  merge_types_allowed:\n    - squash\n    - rebase\n  default_branch: main\n  delete_head_branches: true\n  automatically_delete_branches: true\n  require_signed_commits: true\n```",
    "filename": "github-code-quality.md",
    "tags": [
      "general-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.918Z",
      "contributor": "Community"
    }
  },
  {
    "id": "mobile-development-flutter-riverpod",
    "title": "flutter-riverpod",
    "description": "# Flutter Riverpod Development Instructions",
    "category": "mobile-development",
    "subcategories": [],
    "content": "# Flutter Riverpod Development Instructions\n\n## Project Context\n- Flutter state management\n- Riverpod dependency injection\n- Reactive programming\n- SOLID principles\n- Clean architecture\n\n## Code Style Guidelines\n- Provider organization\n- State immutability\n- Dependency injection\n- Error handling\n- Code modularity\n\n## Architecture Patterns\n- Provider patterns\n- Repository pattern\n- Service layer\n- State management\n- Dependency injection\n\n## Testing Requirements\n- Provider testing\n- Widget testing\n- Integration testing\n- State testing\n- Mock providers\n\n## Documentation Standards\n- Provider documentation\n- State flow documentation\n- Architecture documentation\n- API documentation\n- Testing documentation\n\n## Project-Specific Rules\n### Riverpod Patterns\n```dart\n// Provider Pattern\n@riverpod\nclass UserNotifier extends _$UserNotifier {\n  @override\n  FutureOr<User?> build() => null;\n\n  Future<void> fetchUser(String id) async {\n    state = const AsyncValue.loading();\n    state = await AsyncValue.guard(() => ref.read(userRepository).getUser(id));\n  }\n\n  Future<void> updateUser(User user) async {\n    state = const AsyncValue.loading();\n    await ref.read(userRepository).updateUser(user);\n    state = AsyncValue.data(user);\n  }\n}\n\n// Repository Provider\n@riverpod\nUserRepository userRepository(UserRepositoryRef ref) {\n  return UserRepositoryImpl(\n    ref.watch(apiClientProvider),\n    ref.watch(localStorageProvider),\n  );\n}\n\n// API Client Provider\n@riverpod\nApiClient apiClient(ApiClientRef ref) {\n  return ApiClientImpl(ref.watch(dioProvider));\n}\n\n// Service Pattern\n@riverpod\nclass AuthService extends _$AuthService {\n  @override\n  FutureOr<void> build() {}\n\n  Future<void> login(String email, String password) async {\n    state = const AsyncValue.loading();\n    state = await AsyncValue.guard(() async {\n      final result = await ref.read(authRepository).login(email, password);\n      ref.read(userNotifierProvider.notifier).setUser(result.user);\n      return result;\n    });\n  }\n}\n\n// Widget Pattern\nclass UserProfilePage extends ConsumerWidget {\n  const UserProfilePage({super.key});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final userState = ref.watch(userNotifierProvider);\n\n    return Scaffold(\n      body: userState.when(\n        data: (user) => user != null \n          ? UserProfileView(user: user)\n          : const LoginPrompt(),\n        loading: () => const LoadingView(),\n        error: (error, stack) => ErrorView(error: error),\n      ),\n    );\n  }\n}\n\n// State Pattern\n@freezed\nclass UserState with _$UserState {\n  const factory UserState({\n    required User? user,\n    required bool isLoading,\n    required Option<String> errorMessage,\n  }) = _UserState;\n\n  factory UserState.initial() => UserState(\n    user: null,\n    isLoading: false,\n    errorMessage: none(),\n  );\n}\n\n// Testing Pattern\nvoid main() {\n  group('UserNotifier Tests', () {\n    late ProviderContainer container;\n    late MockUserRepository mockRepository;\n\n    setUp(() {\n      mockRepository = MockUserRepository();\n      container = ProviderContainer(\n        overrides: [\n          userRepositoryProvider.overrideWithValue(mockRepository),\n        ],\n      );\n      addTearDown(container.dispose);\n    });\n\n    test('fetchUser success', () async {\n      final user = User(id: '1', name: 'Test');\n      when(mockRepository.getUser('1')).thenAnswer((_) async => user);\n\n      final notifier = container.read(userNotifierProvider.notifier);\n      await notifier.fetchUser('1');\n\n      final state = container.read(userNotifierProvider);\n      expect(state.value, user);\n    });\n  });\n}\n\n// Error Handling Pattern\n@riverpod\nclass ErrorHandler extends _$ErrorHandler {\n  @override\n  void build() {}\n\n  void handleError(Object error, StackTrace? stackTrace) {\n    if (error is NetworkException) {\n      ref.read(snackbarProvider.notifier).show(\n        SnackbarData(\n          message: 'Network error occurred',\n          type: SnackbarType.error,\n        ),\n      );\n    } else if (error is ValidationException) {\n      ref.read(snackbarProvider.notifier).show(\n        SnackbarData(\n          message: error.message,\n          type: SnackbarType.warning,\n        ),\n      );\n    }\n  }\n}\n\n// Async Value Widget Pattern\nclass AsyncValueWidget<T> extends StatelessWidget {\n  final AsyncValue<T> value;\n  final Widget Function(T data) onData;\n  final Widget Function()? onLoading;\n  final Widget Function(Object error, StackTrace? stackTrace)? onError;\n\n  const AsyncValueWidget({\n    required this.value,\n    required this.onData,\n    this.onLoading,\n    this.onError,\n    super.key,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return value.when(\n      data: onData,\n      loading: () => onLoading?.call() ?? \n        const Center(child: CircularProgressIndicator()),\n      error: (error, stack) => onError?.call(error, stack) ?? \n        ErrorView(error: error),\n    );\n  }\n}",
    "filename": "flutter-riverpod.md",
    "tags": [
      "mobile-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.902Z",
      "contributor": "Community"
    }
  },
  {
    "id": "mobile-development-flutter",
    "title": "flutter",
    "description": "# Flutter Development Instructions",
    "category": "mobile-development",
    "subcategories": [],
    "content": "# Flutter Development Instructions\n\n## Project Context\n- Flutter mobile development\n- Cross-platform development\n- State management\n- UI/UX implementation\n- Performance optimization\n\n## Code Style Guidelines\n- Flutter widget patterns\n- State management patterns\n- Clean architecture\n- Performance best practices\n- Widget composition\n\n## Architecture Patterns\n- BLoC pattern\n- Repository pattern\n- Service locator\n- Clean architecture layers\n- Widget hierarchy\n\n## Testing Requirements\n- Widget testing\n- BLoC testing\n- Integration testing\n- Golden tests\n- Performance testing\n\n## Documentation Standards\n- Widget documentation\n- Architecture documentation\n- State flow documentation\n- API documentation\n- Setup instructions\n\n## Project-Specific Rules\n### Flutter Patterns\n```dart\n// BLoC Pattern\nabstract class CounterEvent {}\n\nclass IncrementEvent extends CounterEvent {}\nclass DecrementEvent extends CounterEvent {}\n\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<IncrementEvent>((event, emit) => emit(state + 1));\n    on<DecrementEvent>((event, emit) => emit(state - 1));\n  }\n}\n\n// Repository Pattern\nabstract class UserRepository {\n  Future<User> getUser(String id);\n  Future<List<User>> getUsers();\n  Future<void> saveUser(User user);\n}\n\nclass UserRepositoryImpl implements UserRepository {\n  final ApiClient _client;\n  final LocalStorage _storage;\n\n  UserRepositoryImpl(this._client, this._storage);\n\n  @override\n  Future<User> getUser(String id) async {\n    try {\n      final user = await _client.getUser(id);\n      await _storage.saveUser(user);\n      return user;\n    } catch (e) {\n      final cached = await _storage.getUser(id);\n      if (cached != null) return cached;\n      throw UserNotFoundException();\n    }\n  }\n}\n\n// Widget Pattern\nclass ResponsiveBuilder extends StatelessWidget {\n  final Widget Function(\n    BuildContext context,\n    BoxConstraints constraints,\n    ScreenType screenType,\n  ) builder;\n\n  const ResponsiveBuilder({\n    Key? key,\n    required this.builder,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(\n      builder: (context, constraints) {\n        final screenType = getScreenType(constraints);\n        return builder(context, constraints, screenType);\n      },\n    );\n  }\n}\n\n// Service Locator Pattern\nfinal getIt = GetIt.instance;\n\nvoid setupDependencies() {\n  // Singletons\n  getIt.registerLazySingleton<ApiClient>(() => ApiClientImpl());\n  getIt.registerLazySingleton<LocalStorage>(() => LocalStorageImpl());\n  \n  // Repositories\n  getIt.registerLazySingleton<UserRepository>(\n    () => UserRepositoryImpl(getIt(), getIt())\n  );\n  \n  // BLoCs\n  getIt.registerFactory(() => UserBloc(getIt()));\n}\n\n// Clean Architecture Widget\nclass UserPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return BlocProvider(\n      create: (_) => getIt<UserBloc>(),\n      child: Scaffold(\n        appBar: AppBar(title: Text(\"Users\")),\n        body: BlocBuilder<UserBloc, UserState>(\n          builder: (context, state) {\n            return state.when(\n              initial: () => Container(),\n              loading: () => Center(child: CircularProgressIndicator()),\n              loaded: (users) => UserListView(users: users),\n              error: (message) => ErrorView(message: message),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n\n// Testing Pattern\nvoid main() {\n  group(\"UserBloc\", () {\n    late UserBloc bloc;\n    late MockUserRepository repository;\n\n    setUp(() {\n      repository = MockUserRepository();\n      bloc = UserBloc(repository);\n    });\n\n    tearDown(() {\n      bloc.close();\n    });\n\n    blocTest<UserBloc, UserState>(\n      \"emits [loading, loaded] when successful\",\n      build: () => bloc,\n      act: (bloc) => bloc.add(LoadUsers()),\n      expect: () => [\n        UserState.loading(),\n        UserState.loaded([mockUser]),\n      ],\n    );\n  });\n}\n\n// Performance Pattern\nclass OptimizedList extends StatelessWidget {\n  final List<Item> items;\n\n  const OptimizedList({Key? key, required this.items}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return ListView.builder(\n      itemCount: items.length,\n      itemBuilder: (context, index) {\n        return RepaintBoundary(\n          child: ItemWidget(\n            key: ValueKey(items[index].id),\n            item: items[index],\n          ),\n        );\n      },\n    );\n  }\n}",
    "filename": "flutter.md",
    "tags": [
      "mobile-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.878Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-elixir-phoenix-docker",
    "title": "elixir-phoenix-docker",
    "description": "# Elixir Phoenix Docker Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Elixir Phoenix Docker Development Instructions\n\n## Project Context\n- Phoenix web framework\n- Docker containerization\n- PostgreSQL integration\n- Production deployment\n- Development workflow\n\n## Code Style Guidelines\n- Docker best practices\n- Multi-stage builds\n- Environment configuration\n- Asset compilation\n- Release management\n\n## Architecture Patterns\n- Container orchestration\n- Service dependencies\n- Volume management\n- Network configuration\n- Hot code reloading\n\n## Testing Requirements\n- Container testing\n- Integration testing\n- End-to-end testing\n- Performance testing\n- Security scanning\n\n## Documentation Standards\n- Docker configuration\n- Environment setup\n- Deployment process\n- Troubleshooting guides\n- Security guidelines\n\n## Project-Specific Rules\n### Docker Configuration\n```dockerfile\n# Development Dockerfile\nFROM elixir:1.14-alpine AS builder\n\n# Install build dependencies\nRUN apk add --no-cache build-base npm git python3\n\nWORKDIR /app\n\n# Install hex + rebar\nRUN mix local.hex --force && \\\n    mix local.rebar --force\n\n# Install mix dependencies\nCOPY mix.exs mix.lock ./\nCOPY config config\nRUN mix deps.get --only prod\n\n# Install npm dependencies\nCOPY assets/package.json assets/package-lock.json ./assets/\nRUN cd assets && npm ci\n\n# Compile assets\nCOPY assets assets\nRUN cd assets && npm run deploy\n\n# Compile app\nCOPY lib lib\nCOPY priv priv\nRUN mix compile\n\n# Build release\nCOPY rel rel\nRUN mix release\n\n# Production stage\nFROM alpine:3.14 AS app\nRUN apk add --no-cache openssl ncurses-libs\n\nWORKDIR /app\n\n# Copy release from builder\nCOPY --from=builder /app/_build/prod/rel/my_app ./\n\n# Set environment variables\nENV HOME=/app\nENV PORT=4000\nENV PHX_HOST=localhost\n\n# Run migrations and start app\nCMD [\"bin/my_app\", \"start\"]\n\n# Development docker-compose.yml\nversion: '3.8'\n\nservices:\n  web:\n    build:\n      context: .\n      target: builder\n    ports:\n      - \"4000:4000\"\n    environment:\n      - DATABASE_URL=ecto://postgres:postgres@db/my_app_dev\n      - PHX_HOST=localhost\n    volumes:\n      - .:/app\n      - deps:/app/deps\n      - build:/app/_build\n    depends_on:\n      - db\n    command: mix phx.server\n\n  db:\n    image: postgres:13-alpine\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n      - POSTGRES_DB=my_app_dev\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n  deps:\n  build:\n\n# Release Configuration\ndefmodule MyApp.Release do\n  @app :my_app\n\n  def migrate do\n    load_app()\n\n    for repo <- repos() do\n      {:ok, _, _} = Ecto.Migrator.with_repo(repo, &Ecto.Migrator.run(&1, :up, all: true))\n    end\n  end\n\n  def rollback(repo, version) do\n    load_app()\n    {:ok, _, _} = Ecto.Migrator.with_repo(repo, &Ecto.Migrator.run(&1, :down, to: version))\n  end\n\n  defp repos do\n    Application.fetch_env!(@app, :ecto_repos)\n  end\n\n  defp load_app do\n    Application.load(@app)\n  end\nend\n\n# Environment Configuration\nimport Config\n\nconfig :my_app, MyApp.Repo,\n  url: System.get_env(\"DATABASE_URL\"),\n  pool_size: String.to_integer(System.get_env(\"POOL_SIZE\") || \"10\")\n\nconfig :my_app, MyAppWeb.Endpoint,\n  http: [port: String.to_integer(System.get_env(\"PORT\") || \"4000\")],\n  url: [host: System.get_env(\"PHX_HOST\"), port: 443, scheme: \"https\"],\n  secret_key_base: System.get_env(\"SECRET_KEY_BASE\")\n\n# Health Check Configuration\ndefmodule MyAppWeb.HealthController do\n  use MyAppWeb, :controller\n\n  def index(conn, _params) do\n    # Check database connection\n    case Ecto.Adapters.SQL.query(MyApp.Repo, \"SELECT 1\") do\n      {:ok, _} ->\n        json(conn, %{status: \"healthy\"})\n      {:error, _} ->\n        conn\n        |> put_status(:service_unavailable)\n        |> json(%{status: \"unhealthy\"})\n    end\n  end\nend\n```",
    "filename": "elixir-phoenix-docker.md",
    "tags": [
      "backend-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.823Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-es-module-nodejs",
    "title": "es-module-nodejs",
    "description": "# ES Module Node.js Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# ES Module Node.js Development Instructions\n\n## Project Context\n- Modern Node.js development\n- ES Modules (ESM) usage\n- TypeScript integration\n- Package management\n- Performance optimization\n\n## Code Style Guidelines\n- ESM import/export syntax\n- Async/await patterns\n- TypeScript type safety\n- Module organization\n- Error handling\n\n## Architecture Patterns\n- Module encapsulation\n- Dependency injection\n- Service architecture\n- Event handling\n- Error boundaries\n\n## Testing Requirements\n- Unit testing with Jest\n- ESM testing patterns\n- Integration testing\n- Type testing\n- Performance testing\n\n## Documentation Standards\n- JSDoc documentation\n- Type definitions\n- Module documentation\n- API documentation\n- Package configuration\n\n## Project-Specific Rules\n### ES Module Patterns\n```typescript\n// Module Export Pattern\nexport interface Config {\n  port: number;\n  host: string;\n  environment: 'development' | 'production';\n}\n\nexport class Service {\n  #config: Config;\n  \n  constructor(config: Config) {\n    this.#config = config;\n  }\n  \n  async initialize(): Promise<void> {\n    // Implementation\n  }\n}\n\n// Dynamic Import Pattern\nasync function loadModule(moduleName: string) {\n  try {\n    const module = await import(`./modules/${moduleName}.js`);\n    return module.default;\n  } catch (error) {\n    throw new Error(`Failed to load module: ${moduleName}`);\n  }\n}\n\n// Service Pattern\nexport class UserService {\n  #repository: UserRepository;\n  #events: EventEmitter;\n  \n  constructor(repository: UserRepository, events: EventEmitter) {\n    this.#repository = repository;\n    this.#events = events;\n  }\n  \n  async createUser(data: UserInput): Promise<User> {\n    const user = await this.#repository.create(data);\n    this.#events.emit('user:created', user);\n    return user;\n  }\n}\n\n// Repository Pattern\nexport class Repository<T extends { id: string }> {\n  async findOne(id: string): Promise<T | null> {\n    try {\n      return await this.collection.findOne({ id });\n    } catch (error) {\n      throw new DatabaseError('Failed to find document', { cause: error });\n    }\n  }\n  \n  async create(data: Omit<T, 'id'>): Promise<T> {\n    const id = crypto.randomUUID();\n    const document = { id, ...data } as T;\n    \n    try {\n      await this.collection.insertOne(document);\n      return document;\n    } catch (error) {\n      throw new DatabaseError('Failed to create document', { cause: error });\n    }\n  }\n}\n\n// Error Handling Pattern\nexport class AppError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public statusCode: number = 500,\n    options?: ErrorOptions\n  ) {\n    super(message, options);\n    this.name = this.constructor.name;\n  }\n}\n\n// Middleware Pattern\nexport interface Middleware {\n  (ctx: Context, next: () => Promise<void>): Promise<void>;\n}\n\nexport const errorHandler: Middleware = async (ctx, next) => {\n  try {\n    await next();\n  } catch (error) {\n    if (error instanceof AppError) {\n      ctx.status = error.statusCode;\n      ctx.body = {\n        error: error.code,\n        message: error.message\n      };\n    } else {\n      ctx.status = 500;\n      ctx.body = {\n        error: 'INTERNAL_ERROR',\n        message: 'An unexpected error occurred'\n      };\n    }\n  }\n};\n\n// Configuration Pattern\nexport const config = {\n  async load(environment = process.env.NODE_ENV): Promise<Config> {\n    const envConfig = await import(`./config/${environment}.js`);\n    return {\n      ...envConfig.default,\n      environment\n    };\n  }\n};\n\n// Testing Pattern\nimport { describe, it, expect } from '@jest/globals';\n\ndescribe('UserService', () => {\n  it('should create user and emit event', async () => {\n    const repository = new MockUserRepository();\n    const events = new MockEventEmitter();\n    const service = new UserService(repository, events);\n    \n    const user = await service.createUser({\n      name: 'Test User',\n      email: 'test@example.com'\n    });\n    \n    expect(user).toBeDefined();\n    expect(events.emitted('user:created')).toBeTruthy();\n  });\n});\n\n// Type Definition Pattern\ndeclare module 'config' {\n  export interface Config {\n    port: number;\n    host: string;\n    environment: string;\n  }\n  \n  export function load(): Promise<Config>;\n}",
    "filename": "es-module-nodejs.md",
    "tags": [
      "backend-development",
      "TypeScript",
      "Node"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.823Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-elixir",
    "title": "elixir",
    "description": "# Elixir Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Elixir Development Instructions\n\n## Project Context\n- Functional programming paradigm\n- Elixir/Erlang ecosystem\n- OTP architecture patterns\n- Concurrent system design\n- Distributed applications\n\n## Code Style Guidelines\n- Functional programming patterns\n- Pattern matching usage\n- Pipeline operator style\n- Documentation formatting\n- Module organization\n\n## Architecture Patterns\n- GenServer implementations\n- Supervisor trees\n- Event handling\n- Message passing\n- State management\n\n## Testing Requirements\n- ExUnit testing\n- Property-based testing\n- Integration testing\n- Concurrent testing\n- Documentation testing\n\n## Documentation Standards\n- Module documentation\n- Function documentation\n- Type specifications\n- Behavior contracts\n- Architecture decisions\n\n## Project-Specific Rules\n### Elixir Patterns\n```elixir\n# GenServer Pattern\ndefmodule UserManager do\n  use GenServer\n  require Logger\n\n  # Client API\n  def start_link(opts \\\\ []) do\n    GenServer.start_link(__MODULE__, :ok, opts)\n  end\n\n  def get_user(pid, user_id) do\n    GenServer.call(pid, {:get_user, user_id})\n  end\n\n  def create_user(pid, user_params) do\n    GenServer.call(pid, {:create_user, user_params})\n  end\n\n  # Server Callbacks\n  @impl true\n  def init(:ok) do\n    {:ok, %{users: %{}}}\n  end\n\n  @impl true\n  def handle_call({:get_user, user_id}, _from, state) do\n    case Map.get(state.users, user_id) do\n      nil -> {:reply, {:error, :not_found}, state}\n      user -> {:reply, {:ok, user}, state}\n    end\n  end\n\n  @impl true\n  def handle_call({:create_user, user_params}, _from, state) do\n    user_id = generate_id()\n    new_user = Map.put(user_params, :id, user_id)\n    new_state = put_in(state.users[user_id], new_user)\n    {:reply, {:ok, new_user}, new_state}\n  end\n\n  # Private Functions\n  defp generate_id, do: System.unique_integer([:positive])\nend\n\n# Supervisor Pattern\ndefmodule MyApp.Application do\n  use Application\n\n  def start(_type, _args) do\n    children = [\n      {UserManager, name: UserManager},\n      {TaskSupervisor, name: MyApp.TaskSupervisor},\n      MyApp.Repo\n    ]\n\n    opts = [strategy: :one_for_one, name: MyApp.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\nend\n\n# Behaviour Pattern\ndefmodule DataStore do\n  @callback save(term()) :: {:ok, term()} | {:error, term()}\n  @callback get(term()) :: {:ok, term()} | {:error, term()}\n  @callback delete(term()) :: :ok | {:error, term()}\nend\n\ndefmodule RedisStore do\n  @behaviour DataStore\n\n  @impl DataStore\n  def save(data) do\n    # Implementation\n  end\n\n  @impl DataStore\n  def get(key) do\n    # Implementation\n  end\n\n  @impl DataStore\n  def delete(key) do\n    # Implementation\n  end\nend\n\n# Ecto Schema Pattern\ndefmodule MyApp.User do\n  use Ecto.Schema\n  import Ecto.Changeset\n\n  schema \"users\" do\n    field :email, :string\n    field :name, :string\n    field :status, :string, default: \"active\"\n    \n    timestamps()\n  end\n\n  def changeset(user, attrs) do\n    user\n    |> cast(attrs, [:email, :name, :status])\n    |> validate_required([:email, :name])\n    |> validate_format(:email, ~r/@/)\n    |> unique_constraint(:email)\n  end\nend\n\n# Testing Pattern\ndefmodule MyApp.UserTest do\n  use ExUnit.Case\n  use PropCheck\n\n  describe \"user validation\" do\n    property \"email must contain @\" do\n      forall email <- string() do\n        changeset = User.changeset(%User{}, %{email: email, name: \"Test\"})\n        if String.contains?(email, \"@\") do\n          changeset.valid?\n        else\n          !changeset.valid?\n        end\n      end\n    end\n\n    test \"creates user with valid attributes\" do\n      attrs = %{email: \"test@example.com\", name: \"Test User\"}\n      assert {:ok, user} = MyApp.create_user(attrs)\n      assert user.email == attrs.email\n    end\n  end\nend\n\n# Message Passing Pattern\ndefmodule WorkerPool do\n  use GenServer\n\n  def start_link(size) do\n    GenServer.start_link(__MODULE__, size, name: __MODULE__)\n  end\n\n  def process_task(task) do\n    GenServer.cast(__MODULE__, {:process, task})\n  end\n\n  @impl true\n  def init(size) do\n    workers = for _ <- 1..size do\n      spawn_link(fn -> worker_loop() end)\n    end\n    {:ok, %{workers: workers, tasks: :queue.new()}}\n  end\n\n  defp worker_loop do\n    receive do\n      {:task, task} ->\n        process_task(task)\n        worker_loop()\n    end\n  end\nend\n\n# Error Handling Pattern\ndefmodule ErrorHandler do\n  def handle_error(result) do\n    case result do\n      {:ok, value} ->\n        {:ok, value}\n\n      {:error, %{__exception__: true} = error} ->\n        Logger.error(Exception.message(error))\n        {:error, :internal_error}\n\n      {:error, reason} ->\n        Logger.warn(\"Operation failed: #{inspect(reason)}\")\n        {:error, reason}\n    end\n  end\nend\n```",
    "filename": "elixir.md",
    "tags": [
      "backend-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.811Z",
      "contributor": "Community"
    }
  },
  {
    "id": "game-development-dragonruby",
    "title": "dragonruby",
    "description": "# DragonRuby Game Development Instructions",
    "category": "game-development",
    "subcategories": [],
    "content": "# DragonRuby Game Development Instructions\n\n## Project Context\n- DragonRuby Game Toolkit (DRGTK)\n- 2D game development\n- Ruby-based game logic\n- Performance optimization\n- Cross-platform development\n\n## Code Style Guidelines\n- Ruby coding conventions\n- Game loop optimization\n- Sprite management\n- Input handling patterns\n- State management\n\n## Architecture Patterns\n- Game state management\n- Entity Component System\n- Scene management\n- Asset organization\n- Input processing\n\n## Testing Requirements\n- Game state testing\n- Performance testing\n- Input simulation\n- Scene testing\n- Collision testing\n\n## Documentation Standards\n- Game state documentation\n- Input mapping docs\n- Asset organization\n- Performance guidelines\n- Scene flow diagrams\n\n## Project-Specific Rules\n### DragonRuby Patterns\n```ruby\n# Game State Pattern\nclass Game\n  attr_gtk\n\n  def tick\n    defaults\n    inputs\n    calculate\n    render\n  end\n\n  def defaults\n    state.player ||= {\n      x: 100,\n      y: 100,\n      w: 32,\n      h: 32,\n      speed: 5\n    }\n    state.enemies ||= []\n    state.score ||= 0\n  end\n\n  def inputs\n    handle_player_movement\n    handle_player_actions\n  end\n\n  def calculate\n    update_player\n    update_enemies\n    check_collisions\n  end\n\n  def render\n    render_background\n    render_player\n    render_enemies\n    render_ui\n  end\n\n  private\n\n  def handle_player_movement\n    if inputs.keyboard.key_held.left\n      state.player.x -= state.player.speed\n    elsif inputs.keyboard.key_held.right\n      state.player.x += state.player.speed\n    end\n  end\n\n  def update_enemies\n    state.enemies.each do |enemy|\n      enemy.x += enemy.dx\n      enemy.y += enemy.dy\n      \n      # Boundary checking\n      if enemy.x < 0 || enemy.x > 1280\n        enemy.dx *= -1\n      end\n    end\n  end\n\n  def check_collisions\n    state.enemies.each do |enemy|\n      if collision?(state.player, enemy)\n        handle_collision(enemy)\n      end\n    end\n  end\nend\n\n# Entity Component System\nmodule Components\n  class Transform\n    attr_accessor :x, :y, :w, :h\n    \n    def initialize(x: 0, y: 0, w: 32, h: 32)\n      @x = x\n      @y = y\n      @w = w\n      @h = h\n    end\n  end\n\n  class Physics\n    attr_accessor :dx, :dy, :speed\n    \n    def initialize(speed: 5)\n      @dx = 0\n      @dy = 0\n      @speed = speed\n    end\n  end\nend\n\nclass Entity\n  attr_reader :components\n  \n  def initialize\n    @components = {}\n  end\n\n  def add_component(component)\n    @components[component.class] = component\n  end\n\n  def get_component(component_class)\n    @components[component_class]\n  end\nend\n\n# Scene Management\nclass SceneManager\n  def initialize\n    @scenes = {}\n    @current_scene = nil\n  end\n\n  def add_scene(name, scene)\n    @scenes[name] = scene\n  end\n\n  def switch_to(scene_name)\n    @current_scene = @scenes[scene_name]\n    @current_scene.enter if @current_scene.respond_to?(:enter)\n  end\n\n  def tick\n    @current_scene&.tick\n  end\nend\n\n# Input Handler\nclass InputHandler\n  def initialize(state)\n    @state = state\n  end\n\n  def handle_input(inputs)\n    handle_keyboard(inputs.keyboard)\n    handle_mouse(inputs.mouse)\n    handle_touch(inputs.touch)\n  end\n\n  private\n\n  def handle_keyboard(keyboard)\n    if keyboard.key_down.space\n      @state.player.jump\n    end\n  end\nend\n\n# Collision System\nmodule CollisionSystem\n  def self.check_collision(rect1, rect2)\n    !(rect1.x > rect2.x + rect2.w ||\n      rect1.x + rect1.w < rect2.x ||\n      rect1.y > rect2.y + rect2.h ||\n      rect1.y + rect1.h < rect2.y)\n  end\nend\n\n# Asset Management\nclass AssetManager\n  def initialize\n    @sprites = {}\n    @sounds = {}\n  end\n\n  def load_sprite(name, path)\n    @sprites[name] = path\n  end\n\n  def get_sprite(name)\n    @sprites[name]\n  end\n\n  def play_sound(name)\n    if @sounds[name]\n      outputs.sounds << @sounds[name]\n    end\n  end\nend\n\n# Performance Optimization\nmodule Performance\n  def self.sprite_pool\n    @sprite_pool ||= Array.new(100) { Sprite.new }\n  end\n\n  def self.get_sprite\n    sprite_pool.find { |s| !s.active } || sprite_pool.first\n  end\n\n  class Sprite\n    attr_accessor :active, :x, :y, :path\n    \n    def initialize\n      @active = false\n    end\n  end\nend",
    "filename": "dragonruby.md",
    "tags": [
      "game-development",
      "Ruby"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.773Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-deno",
    "title": "deno",
    "description": "# Deno Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Deno Development Instructions\n\n## Project Context\n- Deno runtime environment\n- TypeScript-first development\n- Standard library usage\n- Security-first approach\n- Modern web APIs\n\n## Code Style Guidelines\n- TypeScript strict mode\n- Web standard APIs\n- Permission handling\n- Import map usage\n- Module patterns\n\n## Architecture Patterns\n- Oak middleware pattern\n- Module organization\n- Permission boundaries\n- Testing structure\n- Dependency management\n\n## Testing Requirements\n- Unit testing with Deno.test\n- Integration testing\n- Permission testing\n- Web standard testing\n- API testing\n\n## Documentation Standards\n- JSDoc documentation\n- Permission documentation\n- API documentation\n- Module documentation\n- Deployment guides\n\n## Project-Specific Rules\n### Deno Patterns\n```typescript\n// HTTP Server Pattern\nimport { Application, Router } from \"https://deno.land/x/oak/mod.ts\";\nimport { oakCors } from \"https://deno.land/x/cors/mod.ts\";\n\nconst app = new Application();\nconst router = new Router();\n\n// Middleware Pattern\napp.use(async (ctx, next) => {\n  try {\n    await next();\n  } catch (err) {\n    ctx.response.status = err.status || 500;\n    ctx.response.body = { error: err.message };\n  }\n});\n\napp.use(oakCors());\n\n// Router Pattern\nrouter.get(\"/api/items\", async (ctx) => {\n  const items = await loadItems();\n  ctx.response.body = items;\n});\n\nrouter.post(\"/api/items\", async (ctx) => {\n  const body = ctx.request.body();\n  const item = await body.value;\n  const savedItem = await saveItem(item);\n  ctx.response.body = savedItem;\n});\n\n// Database Integration\nimport { DB } from \"https://deno.land/x/sqlite/mod.ts\";\n\nclass Database {\n  private db: DB;\n\n  constructor() {\n    this.db = new DB(\"data.db\");\n    this.init();\n  }\n\n  private init() {\n    this.db.execute(`\n      CREATE TABLE IF NOT EXISTS items (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n  }\n\n  async getItems(): Promise<Item[]> {\n    const rows = this.db.query(\"SELECT * FROM items\");\n    return rows.map(row => ({\n      id: row[0],\n      name: row[1],\n      createdAt: row[2]\n    }));\n  }\n}\n\n// Testing Pattern\nimport {\n  assertEquals,\n  assertNotEquals,\n} from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"API endpoint test\", async () => {\n  const response = await fetch(\"http://localhost:8000/api/items\");\n  const data = await response.json();\n  assertEquals(response.status, 200);\n  assertNotEquals(data.length, 0);\n});\n\n// WebSocket Pattern\napp.use(async (ctx) => {\n  if (!ctx.isUpgradable) {\n    ctx.throw(501);\n  }\n  const ws = await ctx.upgrade();\n  \n  ws.onmessage = async (msg) => {\n    const data = JSON.parse(msg.data);\n    // Handle message\n    ws.send(JSON.stringify({ status: \"received\" }));\n  };\n});\n\n// File System Operations\nasync function readConfig(): Promise<Config> {\n  const text = await Deno.readTextFile(\"./config.json\");\n  return JSON.parse(text);\n}\n\nasync function writeLog(message: string): Promise<void> {\n  await Deno.writeTextFile(\n    \"./log.txt\",\n    `${new Date().toISOString()} - ${message}\\n`,\n    { append: true }\n  );\n}\n\n// Permission Handling\nasync function secureOperation() {\n  const status = await Deno.permissions.request({ \n    name: \"read\",\n    path: \"./config.json\"\n  });\n  \n  if (status.state === \"granted\") {\n    return await readConfig();\n  }\n  \n  throw new Error(\"Permission denied\");\n}\n\n// Module Pattern\nexport interface Service {\n  execute(): Promise<void>;\n}\n\nexport class ServiceImpl implements Service {\n  constructor(private deps: Dependencies) {}\n\n  async execute(): Promise<void> {\n    // Implementation\n  }\n}\n\n// Custom Error Handling\nclass AppError extends Error {\n  constructor(\n    message: string,\n    public status: number = 500\n  ) {\n    super(message);\n    this.name = \"AppError\";\n  }\n}\n\n// Dependency Injection Pattern\ninterface Dependencies {\n  database: Database;\n  logger: Logger;\n}\n\nclass Container {\n  private static instance: Container;\n  private deps: Map<string, any>;\n\n  private constructor() {\n    this.deps = new Map();\n  }\n\n  static getInstance(): Container {\n    if (!Container.instance) {\n      Container.instance = new Container();\n    }\n    return Container.instance;\n  }\n\n  register<T>(key: string, value: T): void {\n    this.deps.set(key, value);\n  }\n\n  resolve<T>(key: string): T {\n    return this.deps.get(key);\n  }\n}",
    "filename": "deno.md",
    "tags": [
      "backend-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.752Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-fastapi-python",
    "title": "fastapi-python",
    "description": "# FastAPI Python Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# FastAPI Python Development Instructions\n\n## Project Context\n- FastAPI web framework\n- Python 3.9+ development\n- Async API development\n- OpenAPI/Swagger integration\n- Type-safe development\n\n## Code Style Guidelines\n- Type hints usage\n- Pydantic models\n- Async/await patterns\n- Error handling patterns\n- Dependency injection\n\n## Architecture Patterns\n- Repository pattern\n- Service layer pattern\n- Dependency injection\n- Middleware implementation\n- Authentication flows\n\n## Testing Requirements\n- Pytest integration\n- Async test patterns\n- Integration testing\n- Performance testing\n- Security testing\n\n## Documentation Standards\n- OpenAPI documentation\n- Function docstrings\n- API endpoint docs\n- Schema documentation\n- Deployment guides\n\n## Project-Specific Rules\n### FastAPI Patterns\n```python\nfrom fastapi import FastAPI, Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel, EmailStr\nfrom typing import Optional, List\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n# Data Models\nclass UserBase(BaseModel):\n    email: EmailStr\n    full_name: Optional[str] = None\n\nclass UserCreate(UserBase):\n    password: str\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    \n    class Config:\n        from_attributes = True\n\n# Repository Pattern\nclass UserRepository:\n    def __init__(self, session: AsyncSession):\n        self.session = session\n    \n    async def get_by_id(self, user_id: int) -> Optional[User]:\n        query = select(UserModel).where(UserModel.id == user_id)\n        result = await self.session.execute(query)\n        return result.scalar_one_or_none()\n    \n    async def create(self, user: UserCreate) -> User:\n        db_user = UserModel(\n            email=user.email,\n            full_name=user.full_name,\n            hashed_password=hash_password(user.password)\n        )\n        self.session.add(db_user)\n        await self.session.commit()\n        await self.session.refresh(db_user)\n        return db_user\n\n# Service Layer\nclass UserService:\n    def __init__(self, repo: UserRepository):\n        self.repo = repo\n    \n    async def create_user(self, user: UserCreate) -> User:\n        # Check if user exists\n        existing_user = await self.repo.get_by_email(user.email)\n        if existing_user:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Email already registered\"\n            )\n        return await self.repo.create(user)\n    \n    async def authenticate_user(\n        self, \n        email: str, \n        password: str\n    ) -> Optional[User]:\n        user = await self.repo.get_by_email(email)\n        if not user:\n            return None\n        if not verify_password(password, user.hashed_password):\n            return None\n        return user\n\n# Dependency Injection\nasync def get_session() -> AsyncSession:\n    async with AsyncSessionLocal() as session:\n        try:\n            yield session\n        finally:\n            await session.close()\n\nasync def get_user_repo(\n    session: AsyncSession = Depends(get_session)\n) -> UserRepository:\n    return UserRepository(session)\n\nasync def get_user_service(\n    repo: UserRepository = Depends(get_user_repo)\n) -> UserService:\n    return UserService(repo)\n\n# Router Implementation\nrouter = APIRouter()\n\n@router.post(\"/users/\", response_model=User)\nasync def create_user(\n    user: UserCreate,\n    service: UserService = Depends(get_user_service)\n):\n    return await service.create_user(user)\n\n@router.get(\"/users/{user_id}\", response_model=User)\nasync def read_user(\n    user_id: int,\n    service: UserService = Depends(get_user_service)\n):\n    user = await service.get_user(user_id)\n    if user is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"User not found\"\n        )\n    return user\n\n# Middleware Example\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n\n# Background Tasks\nclass BackgroundTasks:\n    def __init__(self, session: AsyncSession):\n        self.session = session\n    \n    async def process_data(self, user_id: int):\n        try:\n            # Process data asynchronously\n            await self.heavy_processing(user_id)\n        except Exception as e:\n            logger.error(f\"Background task failed: {e}\")\n    \n    @staticmethod\n    async def heavy_processing(user_id: int):\n        await asyncio.sleep(10)  # Simulate long process\n        return {\"status\": \"completed\", \"user_id\": user_id}\n\n# Error Handling\nclass APIException(HTTPException):\n    def __init__(\n        self,\n        status_code: int,\n        detail: str,\n        headers: dict = None\n    ):\n        super().__init__(\n            status_code=status_code,\n            detail=detail,\n            headers=headers\n        )\n\n@app.exception_handler(APIException)\nasync def api_exception_handler(\n    request: Request,\n    exc: APIException\n):\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\"detail\": exc.detail}\n    )\n```",
    "filename": "fastapi-python.md",
    "tags": [
      "backend-development",
      "Python"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.728Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-wordpress",
    "title": "wordpress",
    "description": "# WordPress Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# WordPress Development Instructions\n\n## Project Context\n- WordPress theme/plugin development\n- PHP 8.x development\n- Custom post types and taxonomies\n- Database optimization\n- Security best practices\n\n## Code Style Guidelines\n- WordPress coding standards\n- PHP 8.x features usage\n- Proper hook usage\n- Database query optimization\n- Security sanitization patterns\n\n## Architecture Patterns\n- MVC-like structure\n- Plugin architecture\n- Theme development\n- Custom post types\n- REST API endpoints\n\n## Testing Requirements\n- PHP unit testing\n- WordPress testing\n- Integration testing\n- Security testing\n- Performance testing\n\n## Documentation Standards\n- PHP DocBlocks\n- Hook documentation\n- API documentation\n- Setup instructions\n- Deployment guides\n\n## Project-Specific Rules\n### WordPress Development\n```php\n// Plugin Structure Pattern\nclass CustomPlugin {\n    private static $instance = null;\n    \n    public static function getInstance(): self {\n        if (null === self::$instance) {\n            self::$instance = new self();\n        }\n        return self::$instance;\n    }\n    \n    private function __construct() {\n        $this->initHooks();\n    }\n    \n    private function initHooks(): void {\n        add_action('init', [$this, 'registerPostTypes']);\n        add_action('rest_api_init', [$this, 'registerEndpoints']);\n    }\n    \n    public function registerPostTypes(): void {\n        register_post_type('custom_type', [\n            'labels' => [\n                'name' => __('Custom Types', 'textdomain'),\n                'singular_name' => __('Custom Type', 'textdomain'),\n            ],\n            'public' => true,\n            'show_in_rest' => true,\n            'supports' => ['title', 'editor', 'thumbnail'],\n            'has_archive' => true,\n        ]);\n    }\n    \n    public function registerEndpoints(): void {\n        register_rest_route('custom/v1', '/items', [\n            'methods' => 'GET',\n            'callback' => [$this, 'getItems'],\n            'permission_callback' => [$this, 'checkPermission'],\n        ]);\n    }\n    \n    public function checkPermission(): bool {\n        return current_user_can('edit_posts');\n    }\n}\n\n// Database Query Pattern\nclass CustomRepository {\n    private $wpdb;\n    \n    public function __construct() {\n        global $wpdb;\n        $this->wpdb = $wpdb;\n    }\n    \n    public function getItems(array $args = []): array {\n        $defaults = [\n            'limit' => 10,\n            'offset' => 0,\n            'status' => 'publish',\n        ];\n        \n        $args = wp_parse_args($args, $defaults);\n        \n        $query = $this->wpdb->prepare(\n            \"SELECT * FROM {$this->wpdb->posts}\n            WHERE post_type = %s\n            AND post_status = %s\n            LIMIT %d OFFSET %d\",\n            'custom_type',\n            $args['status'],\n            $args['limit'],\n            $args['offset']\n        );\n        \n        return $this->wpdb->get_results($query);\n    }\n}\n\n// Theme Functions Pattern\nfunction theme_setup(): void {\n    add_theme_support('title-tag');\n    add_theme_support('post-thumbnails');\n    add_theme_support('html5', [\n        'search-form',\n        'comment-form',\n        'comment-list',\n        'gallery',\n        'caption',\n    ]);\n    \n    register_nav_menus([\n        'primary' => __('Primary Menu', 'textdomain'),\n        'footer' => __('Footer Menu', 'textdomain'),\n    ]);\n}\nadd_action('after_setup_theme', 'theme_setup');\n\n// Security Pattern\nfunction secure_request(array $data): array {\n    $clean = [];\n    \n    foreach ($data as $key => $value) {\n        if (is_array($value)) {\n            $clean[$key] = secure_request($value);\n        } else {\n            $clean[$key] = sanitize_text_field($value);\n        }\n    }\n    \n    return $clean;\n}\n\n// REST API Pattern\nfunction register_custom_endpoint(): void {\n    register_rest_route('custom/v1', '/data', [\n        'methods' => ['GET', 'POST'],\n        'callback' => function($request) {\n            $params = secure_request($request->get_params());\n            \n            if ($request->get_method() === 'POST') {\n                return handle_post_request($params);\n            }\n            \n            return handle_get_request($params);\n        },\n        'permission_callback' => function() {\n            return current_user_can('edit_posts');\n        },\n        'args' => [\n            'id' => [\n                'required' => true,\n                'validate_callback' => function($param) {\n                    return is_numeric($param);\n                }\n            ]\n        ]\n    ]);\n}\nadd_action('rest_api_init', 'register_custom_endpoint');",
    "filename": "wordpress.md",
    "tags": [
      "backend-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.705Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-nextjs14-tailwind-seo",
    "title": "nextjs14-tailwind-seo",
    "description": "# Next.js 14 with Tailwind and SEO Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Next.js 14 with Tailwind and SEO Development Instructions\n\n## Project Context\n- Next.js 14 App Router\n- Tailwind CSS styling\n- SEO optimization focus\n- Performance optimization\n- Server and client components\n\n## Code Style Guidelines\n- Server/Client component patterns\n- Metadata implementation\n- Tailwind class organization\n- Image optimization\n- Route handlers\n\n## Architecture Patterns\n- App Router organization\n- Server component architecture\n- Data fetching patterns\n- SEO implementation\n- Caching strategies\n\n## Testing Requirements\n- Server component testing\n- Client component testing\n- Integration testing\n- SEO validation\n- Performance testing\n\n## Documentation Standards\n- Route documentation\n- SEO strategy docs\n- Component API docs\n- Performance metrics\n- Deployment guides\n\n## Project-Specific Rules\n### Next.js 14 Patterns\n```typescript\n// Metadata Pattern\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    default: 'Site Name',\n    template: '%s | Site Name'\n  },\n  description: 'Site description for SEO',\n  openGraph: {\n    title: 'Site Name',\n    description: 'Site description for social sharing',\n    type: 'website',\n    url: 'https://example.com',\n    siteName: 'Site Name'\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Site Name',\n    description: 'Site description for Twitter'\n  },\n  robots: {\n    index: true,\n    follow: true\n  }\n}\n\n// Server Component Pattern\nasync function BlogPage() {\n  const posts = await fetchPosts()\n  \n  return (\n    <section className=\"max-w-4xl mx-auto py-12\">\n      <h1 className=\"text-3xl font-bold mb-8\">Blog Posts</h1>\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {posts.map(post => (\n          <PostCard key={post.id} post={post} />\n        ))}\n      </div>\n    </section>\n  )\n}\n\n// Client Component Pattern\n'use client'\n\nimport { useState } from 'react'\nimport { useSearchParams } from 'next/navigation'\n\nexport function SearchFilter() {\n  const searchParams = useSearchParams()\n  const [query, setQuery] = useState(\n    searchParams.get('q') ?? ''\n  )\n  \n  return (\n    <form className=\"space-y-4\" action=\"/search\">\n      <input\n        type=\"text\"\n        name=\"q\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        className=\"w-full px-4 py-2 border rounded-md\"\n        placeholder=\"Search...\"\n      />\n    </form>\n  )\n}\n\n// Route Handler Pattern\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams\n  const query = searchParams.get('q')\n  \n  try {\n    const results = await performSearch(query)\n    return NextResponse.json(results)\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Search failed' },\n      { status: 500 }\n    )\n  }\n}\n\n// Image Component Pattern\nimport Image from 'next/image'\n\nexport function OptimizedImage({ \n  src,\n  alt,\n  priority = false\n}: {\n  src: string\n  alt: string\n  priority?: boolean\n}) {\n  return (\n    <div className=\"relative aspect-video\">\n      <Image\n        src={src}\n        alt={alt}\n        fill\n        priority={priority}\n        className=\"object-cover rounded-lg\"\n        sizes=\"(max-width: 768px) 100vw, 50vw\"\n      />\n    </div>\n  )\n}\n\n// Loading and Error UI Pattern\nexport function Loading() {\n  return (\n    <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary\" />\n    </div>\n  )\n}\n\nexport function Error({\n  error,\n  reset\n}: {\n  error: Error\n  reset: () => void\n}) {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen\">\n      <h2 className=\"text-2xl font-bold mb-4\">Something went wrong!</h2>\n      <button\n        onClick={reset}\n        className=\"px-4 py-2 bg-primary text-white rounded-md\"\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```",
    "filename": "nextjs14-tailwind-seo.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "React"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.685Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-convex",
    "title": "convex",
    "description": "# Convex Backend Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Convex Backend Development Instructions\n\n## Project Context\n- Convex backend development\n- Real-time data synchronization\n- TypeScript-first development\n- Serverless architecture\n- Full-stack integration\n\n## Code Style Guidelines\n- Type-safe queries and mutations\n- Schema definition patterns\n- Index optimization\n- Access control patterns\n- Real-time subscription practices\n\n## Architecture Patterns\n- Document-based data modeling\n- Real-time data synchronization\n- Optimistic updates\n- Server function patterns\n- Access control implementation\n\n## Testing Requirements\n- Unit testing server functions\n- Integration testing\n- Schema validation tests\n- Access control testing\n- Real-time sync testing\n\n## Documentation Standards\n- Schema documentation\n- API endpoint documentation\n- Access patterns\n- Query optimization\n- Real-time patterns\n\n## Project-Specific Rules\n### Data Modeling\n```typescript\n// Schema Definition Pattern\nimport { defineSchema, defineTable } from 'convex/schema';\nimport { v } from 'convex/values';\n\nexport default defineSchema({\n    tasks: defineTable({\n        title: v.string(),\n        completed: v.boolean(),\n        userId: v.string(),\n        priority: v.number(),\n        dueDate: v.optional(v.number()),\n        tags: v.array(v.string()),\n    }).index('by_user', ['userId'])\n     .index('by_completion', ['completed']),\n\n    users: defineTable({\n        name: v.string(),\n        email: v.string(),\n        role: v.union(v.literal('admin'), v.literal('user')),\n    }).index('by_email', ['email']),\n});\n\n// Query Pattern\nexport const getTasks = query({\n    args: {\n        userId: v.string(),\n        status: v.optional(v.boolean()),\n    },\n    handler: async (ctx, args) => {\n        const tasks = await ctx.db\n            .query('tasks')\n            .withIndex('by_user', q => \n                q.eq('userId', args.userId)\n            )\n            .filter(q =>\n                args.status === undefined || \n                q.eq(q.field('completed'), args.status)\n            )\n            .collect();\n            \n        return tasks;\n    },\n});\n\n// Mutation Pattern\nexport const createTask = mutation({\n    args: {\n        title: v.string(),\n        priority: v.number(),\n        tags: v.array(v.string()),\n    },\n    handler: async (ctx, args) => {\n        const identity = await ctx.auth.getUserIdentity();\n        if (!identity) {\n            throw new Error('Unauthorized');\n        }\n\n        const taskId = await ctx.db.insert('tasks', {\n            title: args.title,\n            priority: args.priority,\n            tags: args.tags,\n            completed: false,\n            userId: identity.subject,\n        });\n\n        return taskId;\n    },\n});\n\n// Real-time Subscription Pattern\nexport const useTasksList = () => {\n    const tasks = useQuery(api.tasks.getTasks, {\n        userId: useCurrentUser()?.id,\n    });\n\n    const { mutate } = useMutation(api.tasks.updateTask);\n\n    const toggleTask = useCallback(async (taskId: Id<'tasks'>) => {\n        const task = tasks?.find(t => t._id === taskId);\n        if (task) {\n            await mutate({\n                id: taskId,\n                completed: !task.completed,\n            });\n        }\n    }, [tasks, mutate]);\n\n    return {\n        tasks,\n        toggleTask,\n    };\n};\n\n// Access Control Pattern\nexport const accessRules = {\n    tasks: {\n        read: (ctx, { userId }) => \n            ctx.viewer?.id === userId || ctx.viewer?.role === 'admin',\n        modify: (ctx, { userId }) => \n            ctx.viewer?.id === userId || ctx.viewer?.role === 'admin',\n    },\n    users: {\n        read: () => true,\n        modify: (ctx) => ctx.viewer?.role === 'admin',\n    },\n};",
    "filename": "convex.md",
    "tags": [
      "backend-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.645Z",
      "contributor": "Community"
    }
  },
  {
    "id": "general-development-code-guidelines",
    "title": "code-guidelines",
    "description": "# General Code Guidelines",
    "category": "general-development",
    "subcategories": [],
    "content": "# General Code Guidelines\n\n## Project Context\n- Cross-language development standards\n- Clean code principles\n- Code maintainability focus\n- Team collaboration practices\n- Technical debt prevention\n\n## Code Style Guidelines\n- Naming conventions\n  - Use meaningful and pronounceable variable names\n  - Use consistent naming patterns across codebase\n  - Follow language-specific conventions\n- Function design\n  - Single Responsibility Principle\n  - Pure functions where possible\n  - Proper error handling\n- Code organization\n  - Logical file structure\n  - Clear module boundaries\n  - Consistent import ordering\n\n## Architecture Patterns\n- SOLID principles\n- Design patterns usage\n- Clean Architecture\n- Separation of concerns\n- Dependency management\n\n## Testing Requirements\n- Unit testing standards\n  - Arrange-Act-Assert pattern\n  - Test isolation\n  - Meaningful test names\n- Integration testing\n- Test coverage goals\n- Performance testing\n- Security testing\n\n## Documentation Standards\n- Code documentation\n  - Self-documenting code practices\n  - When to comment\n  - API documentation\n- Architecture documentation\n  - System diagrams\n  - Component relationships\n  - Decision records\n- README standards\n  - Project setup\n  - Development workflow\n  - Contribution guidelines\n\n## Common Patterns\n```typescript\n// Clean Code Examples\n\n// Bad\nfunction d(a: number[]): number {\n    let x = 0;\n    for(let i = 0; i < a.length; i++) {\n        x += a[i];\n    }\n    return x / a.length;\n}\n\n// Good\nfunction calculateAverage(numbers: number[]): number {\n    if (numbers.length === 0) {\n        throw new Error('Cannot calculate average of empty array');\n    }\n    \n    const sum = numbers.reduce((acc, current) => acc + current, 0);\n    return sum / numbers.length;\n}\n\n// SOLID Principle Examples\n\n// Single Responsibility Principle\nclass UserAuthentication {\n    async authenticate(credentials: Credentials): Promise<AuthResult> {\n        // Only handles authentication\n    }\n}\n\nclass UserRepository {\n    async saveUser(user: User): Promise<void> {\n        // Only handles user persistence\n    }\n}\n\n// Interface Segregation Principle\ninterface MessageSender {\n    sendMessage(message: Message): Promise<void>;\n}\n\ninterface MessageReceiver {\n    receiveMessage(): Promise<Message>;\n}\n\n// Error Handling Pattern\nclass Result<T, E = Error> {\n    private constructor(\n        private value: T | null,\n        private error: E | null\n    ) {}\n\n    static success<T>(value: T): Result<T> {\n        return new Result(value, null);\n    }\n\n    static failure<E>(error: E): Result<never, E> {\n        return new Result(null, error);\n    }\n\n    isSuccess(): boolean {\n        return this.error === null;\n    }\n\n    getValue(): T {\n        if (this.error !== null) {\n            throw new Error('Cannot get value from error result');\n        }\n        return this.value!;\n    }\n\n    getError(): E {\n        if (this.error === null) {\n            throw new Error('Cannot get error from success result');\n        }\n        return this.error;\n    }\n}\n\n// Using Result Pattern\nasync function processUserData(\n    userData: UserData\n): Promise<Result<ProcessedData, ValidationError>> {\n    if (!isValid(userData)) {\n        return Result.failure(new ValidationError('Invalid user data'));\n    }\n\n    try {\n        const processed = await processData(userData);\n        return Result.success(processed);\n    } catch (error) {\n        return Result.failure(new ProcessingError('Processing failed'));\n    }\n}\n```",
    "filename": "code-guidelines.md",
    "tags": [
      "general-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.623Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-chrome-extension-typescript",
    "title": "chrome-extension-typescript",
    "description": "# Chrome Extension Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Chrome Extension Development Instructions\n\n## Project Context\n- Modern Chrome Extension development\n- TypeScript and JavaScript implementation\n- Manifest V3 architecture\n- Browser API integration\n- Security-first approach\n\n## Code Style Guidelines\n- TypeScript strict mode\n- CSP compliance\n- Content script patterns\n- Message passing conventions\n- Service worker best practices\n\n## Architecture Patterns\n- Background service workers\n- Content script isolation\n- Message passing architecture\n- State management patterns\n- Security boundary handling\n\n## Testing Requirements\n- Unit testing service workers\n- Content script testing\n- E2E extension testing\n- Security testing\n- Cross-browser compatibility\n\n## Documentation Standards\n- API documentation\n- Security considerations\n- Permission explanations\n- Installation guides\n- Usage documentation\n\n## Project-Specific Rules\n### Extension Architecture\n```typescript\n// Manifest V3 Template\n{\n    \"manifest_version\": 3,\n    \"name\": \"Extension Name\",\n    \"version\": \"1.0.0\",\n    \"permissions\": [\n        \"storage\",\n        \"activeTab\"\n    ],\n    \"background\": {\n        \"service_worker\": \"background.ts\"\n    },\n    \"content_scripts\": [{\n        \"matches\": [\"<all_urls>\"],\n        \"js\": [\"content.ts\"]\n    }]\n}\n\n// Background Service Worker Pattern\nclass BackgroundService {\n    private state: ExtensionState;\n\n    constructor() {\n        this.initializeListeners();\n        this.state = this.getInitialState();\n    }\n\n    private initializeListeners(): void {\n        chrome.runtime.onMessage.addListener(\n            (message, sender, sendResponse) => {\n                this.handleMessage(message, sender, sendResponse);\n                return true; // Keep message channel open for async response\n            }\n        );\n    }\n\n    private async handleMessage(\n        message: Message,\n        sender: chrome.runtime.MessageSender,\n        sendResponse: (response: any) => void\n    ): Promise<void> {\n        switch (message.type) {\n            case 'getData':\n                const data = await this.getData();\n                sendResponse({ data });\n                break;\n            case 'updateState':\n                await this.updateState(message.payload);\n                sendResponse({ success: true });\n                break;\n        }\n    }\n}\n\n// Content Script Pattern\nclass ContentScript {\n    private observer: MutationObserver;\n\n    constructor() {\n        this.initialize();\n    }\n\n    private async initialize(): Promise<void> {\n        this.injectStyles();\n        this.setupObserver();\n        await this.setupMessageHandling();\n    }\n\n    private setupObserver(): void {\n        this.observer = new MutationObserver((mutations) => {\n            for (const mutation of mutations) {\n                this.handleDOMChange(mutation);\n            }\n        });\n\n        this.observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    private async sendToBackground(\n        message: Message\n    ): Promise<Response> {\n        return new Promise((resolve) => {\n            chrome.runtime.sendMessage(message, resolve);\n        });\n    }\n}\n\n// Popup Component Pattern\nclass PopupUI {\n    private state: UIState;\n\n    constructor() {\n        this.state = this.getInitialState();\n        this.initializeUI();\n    }\n\n    private async initializeUI(): Promise<void> {\n        const elements = this.getUIElements();\n        this.attachEventListeners(elements);\n        await this.loadInitialState();\n    }\n\n    private attachEventListeners(elements: UIElements): void {\n        elements.saveButton?.addEventListener('click', \n            () => this.handleSave()\n        );\n    }\n\n    private async handleSave(): Promise<void> {\n        try {\n            await chrome.storage.sync.set(this.state);\n            this.updateUI({ saved: true });\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n}\n```",
    "filename": "chrome-extension-typescript.md",
    "tags": [
      "frontend-development",
      "JavaScript",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.591Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-astro-typescript",
    "title": "astro-typescript",
    "description": "# Astro TypeScript Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Astro TypeScript Development Instructions\n\n## Project Context\n- Static site generation with Astro\n- TypeScript integration\n- Content-focused websites\n- Performance optimization\n- SEO best practices\n\n## Code Style Guidelines\n- TypeScript strict mode\n- Component-based architecture\n- Content Collections usage\n- Image optimization patterns\n- CSS/Styling conventions\n\n## Architecture Patterns\n- Islands Architecture\n- Dynamic/Static routing\n- Content collection structure\n- Data fetching patterns\n- State management\n\n## Testing Requirements\n- Component testing\n- Integration testing\n- Performance testing\n- SEO validation\n- Accessibility testing\n\n## Documentation Standards\n- Component documentation\n- Content schema definitions\n- API integration docs\n- Performance metrics\n- Deployment guides\n\n## Project-Specific Rules\n### Astro Components\n- Use proper file organization\n- Implement proper client directives\n- Follow SSR/SSG patterns\n- Optimize image handling\n- Maintain proper hydration\n\n## Common Patterns\n```typescript\n// Astro Component Template\n---\nimport { Image } from 'astro:assets';\nimport type { CollectionEntry } from 'astro:content';\n\ninterface Props {\n    post: CollectionEntry<'blog'>;\n    isFeature?: boolean;\n}\n\nconst { post, isFeature = false } = Astro.props;\nconst { title, description, image } = post.data;\n---\n\n<article class:list={['post', { feature: isFeature }]}>\n    <Image\n        src={image}\n        alt={title}\n        width={800}\n        height={400}\n        format=\"webp\"\n    />\n    <h2>{title}</h2>\n    <p>{description}</p>\n</article>\n\n<style>\n    .post {\n        @apply grid gap-4;\n    }\n    .feature {\n        @apply col-span-2;\n    }\n</style>\n\n// Content Collection Schema\nimport { z, defineCollection } from 'astro:content';\n\nconst blog = defineCollection({\n    type: 'content',\n    schema: z.object({\n        title: z.string(),\n        description: z.string(),\n        pubDate: z.date(),\n        image: z.string(),\n        tags: z.array(z.string())\n    })\n});\n\n// API Integration\nasync function getDataFromAPI<T>(endpoint: string): Promise<T> {\n    const response = await fetch(endpoint);\n    if (!response.ok) {\n        throw new Error(`API Error: ${response.statusText}`);\n    }\n    return response.json();\n}\n\n// SSR Component with Client Interactivity\n---\nimport { ViewTransitions } from 'astro:transitions';\n\nlet count = 0;\n---\n\n<html>\n    <head>\n        <ViewTransitions />\n    </head>\n    <body>\n        <button id=\"counter\" client:visible>\n            Count: {count}\n        </button>\n        \n        <script>\n            const button = document.getElementById('counter');\n            let count = 0;\n            \n            button?.addEventListener('click', () => {\n                count++;\n                if (button) button.textContent = `Count: ${count}`;\n            });\n        </script>\n    </body>\n</html>\n```",
    "filename": "astro-typescript.md",
    "tags": [
      "frontend-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.570Z",
      "contributor": "Community"
    }
  },
  {
    "id": "game-development-ascii-simulation-game",
    "title": "ascii-simulation-game",
    "description": "# ASCII Simulation Game Development Instructions",
    "category": "game-development",
    "subcategories": [],
    "content": "# ASCII Simulation Game Development Instructions\n\n## Project Context\n- Terminal-based game development\n- ASCII/Unicode character graphics\n- Real-time simulation mechanics\n- Cross-platform compatibility\n- Performance optimization focus\n\n## Code Style Guidelines\n- Clear terminal screen management\n- Efficient character buffer handling\n- Proper input handling patterns\n- Frame rate control implementation\n- Memory efficient data structures\n\n## Architecture Patterns\n- Game loop architecture\n- Entity Component System (ECS)\n- State management patterns\n- Event handling system\n- Scene/Screen management\n\n## Testing Requirements\n- Game state unit tests\n- Input simulation testing\n- Performance benchmarking\n- Cross-platform validation\n- Frame timing tests\n\n## Documentation Standards\n- ASCII art documentation\n- Game mechanics explanation\n- Performance considerations\n- Terminal compatibility notes\n- Input command reference\n\n## Project-Specific Rules\n### Terminal Graphics\n- Use consistent character sets\n- Implement proper buffering\n- Handle terminal resizing\n- Manage color codes properly\n- Consider Unicode support\n\n## Common Patterns\n```typescript\n// Game Loop Pattern\nclass GameLoop {\n    private lastFrameTime: number = 0;\n    private readonly targetFPS: number = 60;\n    private readonly frameInterval: number = 1000 / this.targetFPS;\n\n    async run() {\n        while (true) {\n            const currentTime = Date.now();\n            const deltaTime = currentTime - this.lastFrameTime;\n\n            if (deltaTime >= this.frameInterval) {\n                this.update(deltaTime);\n                this.render();\n                this.lastFrameTime = currentTime;\n            }\n\n            await this.sleep(1);\n        }\n    }\n\n    private update(deltaTime: number) {\n        // Update game state\n    }\n\n    private render() {\n        // Clear screen\n        console.clear();\n        // Render frame\n        this.drawFrame();\n    }\n\n    private drawFrame() {\n        // Draw ASCII graphics\n    }\n\n    private sleep(ms: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n}\n\n// Entity Component System\ninterface Entity {\n    id: number;\n    position: Position;\n    character: string;\n    components: Map<string, Component>;\n}\n\ninterface Component {\n    update(entity: Entity, deltaTime: number): void;\n}\n\nclass MovementComponent implements Component {\n    update(entity: Entity, deltaTime: number) {\n        // Handle movement logic\n    }\n}\n\n// Screen Buffer Management\nclass ScreenBuffer {\n    private buffer: string[][];\n    \n    constructor(width: number, height: number) {\n        this.buffer = Array(height).fill(0)\n            .map(() => Array(width).fill(' '));\n    }\n\n    draw(x: number, y: number, char: string) {\n        if (this.isInBounds(x, y)) {\n            this.buffer[y][x] = char;\n        }\n    }\n\n    render() {\n        return this.buffer\n            .map(row => row.join(''))\n            .join('\\n');\n    }\n\n    private isInBounds(x: number, y: number): boolean {\n        return x >= 0 && x < this.buffer[0].length &&\n               y >= 0 && y < this.buffer.length;\n    }\n}\n```",
    "filename": "ascii-simulation-game.md",
    "tags": [
      "game-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T22:38:36.561Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-react-mobx-guidelines",
    "title": "react-mobx-guidelines",
    "description": "# React with MobX Development Guidelines",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# React with MobX Development Guidelines\n\n## Project Context\n- React applications with MobX\n- Observable state patterns\n- TypeScript integration\n- Scalable state management\n\n## Architecture Patterns\n```typescript\n// Project structure\n/\n├── src/\n│   ├── stores/\n│   ├── components/\n│   ├── hooks/\n│   └── services/\n\n// Store pattern\nclass TodoStore {\n  @observable todos: Todo[] = [];\n  @observable isLoading = false;\n  \n  constructor(private api: ApiService) {\n    makeAutoObservable(this);\n  }\n  \n  @action\n  async fetchTodos() {\n    this.isLoading = true;\n    try {\n      this.todos = await this.api.getTodos();\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  \n  @computed\n  get completedTodos() {\n    return this.todos.filter(todo => todo.completed);\n  }\n}\n```\n\n## Store Integration\n```typescript\n// Store provider setup\nconst rootStore = new RootStore();\n\nfunction App() {\n  return (\n    <StoreProvider value={rootStore}>\n      <Router>\n        <AppRoutes />\n      </Router>\n    </StoreProvider>\n  );\n}\n\n// Component with store\nfunction TodoList() {\n  const store = useStore();\n  \n  useEffect(() => {\n    store.todoStore.fetchTodos();\n  }, []);\n  \n  return useObserver(() => (\n    <div>\n      {store.todoStore.todos.map(todo => (\n        <TodoItem key={todo.id} todo={todo} />\n      ))}\n    </div>\n  ));\n}\n```\n\n## Best Practices\n- Use proper decorators\n- Implement reactions carefully\n- Handle computed properties\n- Use proper actions\n- Implement proper types\n\n## Performance Guidelines\n- Optimize observers\n- Use computed properties\n- Handle reactions properly\n- Implement proper batching\n- Optimize re-renders\n\n## Testing Requirements\n- Store unit testing\n- Component integration\n- Action testing\n- Computed testing\n- Mock stores properly\n\n## State Management\n- Proper store structure\n- Handle async actions\n- State persistence\n- State hydration\n- Error handling\n\n## Documentation Standards\n- Store documentation\n- Action documentation\n- Type definitions\n- Setup instructions\n- Integration guides\n\n## Error Handling\n```typescript\nclass ErrorStore {\n  @observable error: Error | null = null;\n  \n  @action\n  setError(error: Error) {\n    this.error = error;\n    // Handle error reporting\n  }\n  \n  @action\n  clearError() {\n    this.error = null;\n  }\n}\n```",
    "filename": "react-mobx-guidelines.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "React"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.826Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-elixir-phoenix-guidelines",
    "title": "elixir-phoenix-guidelines",
    "description": "# Elixir Phoenix Development Guidelines",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Elixir Phoenix Development Guidelines\n\n## Project Context\n- Modern Phoenix applications\n- LiveView integration\n- Docker containerization\n- Functional patterns\n\n## Architecture Patterns\n```elixir\n# Project structure\n/\n├── lib/\n│   ├── my_app/\n│   │   ├── contexts/\n│   │   ├── schemas/\n│   │   └── services/\n│   └── my_app_web/\n│       ├── controllers/\n│       ├── live/\n│       └── components/\n\n# Context module pattern\ndefmodule MyApp.Accounts do\n  alias MyApp.Accounts.User\n  alias MyApp.Repo\n\n  def get_user!(id), do: Repo.get!(User, id)\n  \n  def create_user(attrs \\\\ %{}) do\n    %User{}\n    |> User.changeset(attrs)\n    |> Repo.insert()\n  end\nend\n```\n\n## LiveView Patterns\n```elixir\ndefmodule MyAppWeb.UserLive.Index do\n  use MyAppWeb, :live_view\n  \n  @impl true\n  def mount(_params, _session, socket) do\n    {:ok, assign(socket, users: list_users())}\n  end\n  \n  @impl true\n  def handle_event(\"delete\", %{\"id\" => id}, socket) do\n    user = Accounts.get_user!(id)\n    {:ok, _} = Accounts.delete_user(user)\n    \n    {:noreply, assign(socket, users: list_users())}\n  end\nend\n```\n\n## Docker Setup\n```dockerfile\n# Dockerfile\nFROM elixir:1.14-alpine AS builder\n\n# Build stage\nWORKDIR /app\nCOPY mix.exs mix.lock ./\nRUN mix do deps.get, deps.compile\n\nCOPY . .\nRUN mix do compile, phx.digest\n\n# Runtime stage\nFROM alpine:3.14\nCOPY --from=builder /app/_build/prod/rel/my_app ./\nCMD [\"./bin/my_app\", \"start\"]\n```\n\n## Testing Guidelines\n- Unit testing contexts\n- Integration testing\n- LiveView testing\n- Property-based testing\n- Performance testing\n\n## Best Practices\n- Use proper contexts\n- Implement proper schemas\n- Handle concurrency\n- Use supervision trees\n- Proper error handling\n\n## Performance Guidelines\n- Database optimization\n- LiveView efficiency\n- Proper caching\n- Connection pooling\n- Asset optimization\n\n## Security Requirements\n- Proper authentication\n- CSRF protection\n- Rate limiting\n- Secure websockets\n- SQL injection prevention\n\n## Documentation Standards\n- Module documentation\n- Function documentation\n- Type specifications\n- Setup instructions\n- Deployment guides",
    "filename": "elixir-phoenix-guidelines.md",
    "tags": [
      "backend-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.811Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-solidjs-typescript-guidelines",
    "title": "solidjs-typescript-guidelines",
    "description": "# SolidJS with TypeScript Development Guidelines",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# SolidJS with TypeScript Development Guidelines\n\n## Project Context\n- Modern SolidJS applications\n- Fine-grained reactivity\n- TypeScript integration\n- Performance optimization\n\n## Architecture Patterns\n```typescript\n// Project structure\n/\n├── src/\n│   ├── components/\n│   ├── hooks/\n│   ├── pages/\n│   └── utils/\n└── vite.config.ts\n\n// Component pattern\ninterface Props {\n  name: string;\n  onNameChange: (name: string) => void;\n}\n\nconst NameInput: Component<Props> = (props) => {\n  return (\n    <input\n      value={props.name}\n      onInput={(e) => props.onNameChange(e.currentTarget.value)}\n    />\n  );\n};\n\n// Signal pattern\nconst [count, setCount] = createSignal(0);\nconst doubleCount = createMemo(() => count() * 2);\n```\n\n## Reactivity Patterns\n```typescript\n// Resource handling\nconst [data] = createResource(async () => {\n  const response = await fetch('/api/data');\n  return response.json();\n});\n\n// Store pattern\nconst TodoStore = createStore({\n  todos: [],\n  addTodo(text: string) {\n    this.todos = [...this.todos, { text, completed: false }];\n  },\n  toggleTodo(index: number) {\n    this.todos[index].completed = !this.todos[index].completed;\n  }\n});\n```\n\n## Performance Best Practices\n- Use fine-grained reactivity\n- Implement proper memoization\n- Optimize re-renders\n- Use proper context\n- Lazy load components\n\n## TypeScript Integration\n- Use strict type checking\n- Implement proper interfaces\n- Type resource responses\n- Handle proper generics\n- Store type definitions\n\n## Testing Requirements\n- Unit testing components\n- Integration testing\n- Performance testing\n- Store testing\n- Effect testing\n\n## Documentation Standards\n- Component documentation\n- Hook documentation\n- Type definitions\n- Setup instructions\n- Integration guides\n\n## Component Guidelines\n```typescript\n// Reusable component\nconst Button: Component<{\n  variant?: 'primary' | 'secondary';\n  onClick?: () => void;\n  children: JSX.Element;\n}> = (props) => {\n  return (\n    <button\n      class={`btn ${props.variant || 'primary'}`}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </button>\n  );\n};\n```\n\n## Error Handling\n- Error boundaries\n- Resource error states\n- Type validation\n- Promise handling\n- Debug tooling",
    "filename": "solidjs-typescript-guidelines.md",
    "tags": [
      "frontend-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.811Z",
      "contributor": "Community"
    }
  },
  {
    "id": "mobile-development-react-native-expo-guidelines",
    "title": "react-native-expo-guidelines",
    "description": "# React Native with Expo Development Guidelines",
    "category": "mobile-development",
    "subcategories": [],
    "content": "# React Native with Expo Development Guidelines\n\n## Project Context\n- Modern React Native applications\n- Expo managed workflow\n- Cross-platform development\n- TypeScript integration\n\n## Architecture Patterns\n```typescript\n// Project structure\n/\n├── src/\n│   ├── components/\n│   ├── screens/\n│   ├── navigation/\n│   ├── hooks/\n│   └── services/\n├── assets/\n└── app.config.ts\n\n// Screen organization\nimport { Stack } from 'expo-router';\n\nexport default function Layout() {\n  return (\n    <Stack\n      screenOptions={{\n        headerStyle: { backgroundColor: '#fff' },\n        headerTintColor: '#000',\n      }}\n    >\n      <Stack.Screen\n        name=\"index\"\n        options={{ title: 'Home' }}\n      />\n    </Stack>\n  );\n}\n```\n\n## Component Patterns\n```typescript\n// Reusable component with styles\nimport { StyleSheet } from 'react-native';\n\ninterface CardProps {\n  title: string;\n  children: React.ReactNode;\n}\n\nexport function Card({ title, children }: CardProps) {\n  return (\n    <View style={styles.card}>\n      <Text style={styles.title}>{title}</Text>\n      {children}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    padding: 16,\n    borderRadius: 8,\n    backgroundColor: '#fff',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 3,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n});\n```\n\n## Platform-Specific Code\n```typescript\nimport { Platform } from 'react-native';\n\nconst styles = StyleSheet.create({\n  shadow: Platform.select({\n    ios: {\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.25,\n      shadowRadius: 3.84,\n    },\n    android: {\n      elevation: 5,\n    },\n  }),\n});\n```\n\n## Performance Guidelines\n- Use proper list rendering\n- Implement proper image caching\n- Memoize callbacks and components\n- Optimize animations\n- Handle memory leaks\n\n## Testing Requirements\n- Component testing\n- E2E with Maestro\n- Integration testing\n- Performance testing\n- Platform-specific testing\n\n## Best Practices\n- Use Expo modules\n- Implement proper navigation\n- Handle deep linking\n- Manage assets properly\n- Use proper typescript types\n\n## Security Guidelines\n- Secure storage usage\n- API security\n- Deep linking validation\n- Authentication flow\n- Sensitive data handling\n\n## Documentation Standards\n- Component documentation\n- Screen flow documentation\n- API integration docs\n- Setup instructions\n- Release process",
    "filename": "react-native-expo-guidelines.md",
    "tags": [
      "mobile-development",
      "TypeScript",
      "React"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.811Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-astro-typescript-guidelines",
    "title": "astro-typescript-guidelines",
    "description": "# Astro with TypeScript Development Guidelines",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Astro with TypeScript Development Guidelines\n\n## Project Context\n- Modern Astro applications\n- TypeScript integration\n- Static site generation\n- Islands architecture\n\n## Architecture Patterns\n```typescript\n// Project structure\n/\n├── src/\n│   ├── components/\n│   ├── layouts/\n│   ├── pages/\n│   └── utils/\n├── public/\n└── astro.config.mjs\n\n// Component pattern\n---\ninterface Props {\n  title: string;\n  description?: string;\n}\n\nconst { title, description } = Astro.props;\n---\n\n<article class=\"card\">\n  <h2>{title}</h2>\n  {description && <p>{description}</p>}\n  <slot />\n</article>\n\n<style>\n  .card {\n    padding: 1rem;\n    border-radius: 0.5rem;\n    background: var(--card-bg);\n  }\n</style>\n```\n\n## Islands Architecture\n```astro\n---\nimport InteractiveCounter from '../components/InteractiveCounter';\n---\n\n<main>\n  <h1>Static Content</h1>\n  \n  <!-- Interactive island -->\n  <InteractiveCounter client:load />\n  \n  <!-- More static content -->\n  <footer>Static Footer</footer>\n</main>\n```\n\n## Performance Guidelines\n- Implement proper hydration strategies\n- Use partial hydration\n- Optimize asset loading\n- Implement proper caching\n- Use image optimization\n\n## TypeScript Integration\n```typescript\n// Type-safe props\ninterface BlogPost {\n  title: string;\n  publishedAt: Date;\n  tags: string[];\n}\n\nconst posts = await getCollection('blog');\nconst typedPosts: BlogPost[] = posts.map(post => ({\n  title: post.data.title,\n  publishedAt: post.data.publishedAt,\n  tags: post.data.tags || []\n}));\n```\n\n## Best Practices\n- Use content collections\n- Implement proper SEO\n- Handle dynamic imports\n- Use proper MDX integration\n- Implement proper routing\n\n## Testing Requirements\n- Component testing\n- Integration testing\n- E2E testing\n- Performance testing\n- SSG validation\n\n## Documentation Standards\n- Component documentation\n- API documentation\n- Integration guides\n- Setup instructions\n- Deployment guides\n\n## Security Guidelines\n- Content Security Policy\n- Asset handling\n- Form validation\n- API security\n- Authentication flows",
    "filename": "astro-typescript-guidelines.md",
    "tags": [
      "frontend-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.806Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-react-graphql-apollo-guidelines",
    "title": "react-graphql-apollo-guidelines",
    "description": "# React GraphQL with Apollo Client Guidelines",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# React GraphQL with Apollo Client Guidelines\n\n## Project Context\n- React applications with GraphQL\n- Apollo Client integration\n- Type-safe queries\n- Cache management\n\n## Architecture Patterns\n```typescript\n// Project structure\n/\n├── src/\n│   ├── graphql/\n│   │   ├── queries/\n│   │   ├── mutations/\n│   │   └── fragments/\n│   ├── components/\n│   ├── hooks/\n│   └── types/\n\n// Query definition\nconst GET_USER = gql`\n  query GetUser($id: ID!) {\n    user(id: $id) {\n      id\n      name\n      email\n      posts {\n        id\n        title\n      }\n    }\n  }\n`;\n\n// Custom hook pattern\nfunction useUser(id: string) {\n  return useQuery<GetUserQuery, GetUserVariables>(GET_USER, {\n    variables: { id },\n    fetchPolicy: 'cache-first'\n  });\n}\n```\n\n## Cache Management\n```typescript\n// Field policy\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        posts: {\n          merge(existing = [], incoming: any[]) {\n            return [...existing, ...incoming];\n          }\n        }\n      }\n    }\n  }\n});\n\n// Cache update after mutation\nconst [createPost] = useMutation(CREATE_POST, {\n  update(cache, { data: { createPost } }) {\n    cache.modify({\n      fields: {\n        posts(existingPosts = []) {\n          const newPostRef = cache.writeFragment({\n            data: createPost,\n            fragment: gql`\n              fragment NewPost on Post {\n                id\n                title\n              }\n            `\n          });\n          return [...existingPosts, newPostRef];\n        }\n      }\n    });\n  }\n});\n```\n\n## Best Practices\n- Implement proper fragments\n- Use proper error handling\n- Optimize fetch policies\n- Handle loading states\n- Implement proper typing\n\n## Performance Guidelines\n- Use proper caching\n- Implement batching\n- Handle pagination\n- Optimize queries\n- Use proper prefetching\n\n## Testing Requirements\n- Mock Apollo Provider\n- Test query components\n- Test mutations\n- Test error states\n- Cache testing\n\n## Error Handling\n```typescript\nfunction QueryComponent() {\n  const { data, loading, error } = useQuery(QUERY);\n  \n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage error={error} />;\n  \n  return <DataDisplay data={data} />;\n}\n```\n\n## Type Generation\n- Use GraphQL Code Generator\n- Implement proper scalars\n- Type-safe operations\n- Handle nullable fields\n- Custom type mapping",
    "filename": "react-graphql-apollo-guidelines.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "React"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.806Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-vue3-nuxt3-guidelines",
    "title": "vue3-nuxt3-guidelines",
    "description": "# Vue 3 and Nuxt 3 Development Guidelines",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Vue 3 and Nuxt 3 Development Guidelines\n\n## Project Context\n- Modern Vue 3 applications\n- Nuxt 3 framework\n- Composition API\n- TypeScript integration\n\n## Architecture Patterns\n```typescript\n// Project structure\n/\n├── components/\n├── composables/\n├── pages/\n├── layouts/\n└── server/\n\n// Component pattern with script setup\n<script setup lang=\"ts\">\ninterface Props {\n  title: string\n  items: string[]\n}\n\nconst props = defineProps<Props>()\nconst emit = defineEmits<{\n  (e: 'update', value: string): void\n}>()\n\nconst itemCount = computed(() => props.items.length)\n</script>\n\n<template>\n  <div>\n    <h2>{{ title }}</h2>\n    <p>Total items: {{ itemCount }}</p>\n  </div>\n</template>\n```\n\n## Composition Patterns\n```typescript\n// Composable pattern\nexport function useCounter(initialValue = 0) {\n  const count = ref(initialValue)\n  \n  function increment() {\n    count.value++\n  }\n  \n  function decrement() {\n    count.value--\n  }\n  \n  return {\n    count: readonly(count),\n    increment,\n    decrement\n  }\n}\n\n// Server state management\nconst users = useState('users', () => [])\nconst { data: posts } = await useFetch('/api/posts')\n```\n\n## Best Practices\n- Use Composition API\n- Implement SSR properly\n- Handle TypeScript types\n- Use proper layouts\n- Implement error handling\n\n## Performance Guidelines\n- Use proper caching\n- Implement lazy loading\n- Handle SSR hydration\n- Optimize assets\n- Use proper suspense\n\n## Testing Requirements\n- Component testing\n- Composable testing\n- E2E testing\n- API testing\n- Integration testing\n\n## State Management\n```typescript\n// Pinia store pattern\nexport const useStore = defineStore('main', {\n  state: () => ({\n    user: null as User | null,\n    theme: 'light'\n  }),\n  \n  getters: {\n    isAuthenticated: (state) => !!state.user\n  },\n  \n  actions: {\n    async login(credentials: Credentials) {\n      const user = await api.login(credentials)\n      this.user = user\n    }\n  }\n})\n```\n\n## Documentation Standards\n- Component documentation\n- API documentation\n- Type definitions\n- Setup instructions\n- Deployment guides\n\n## Security Guidelines\n- Handle authentication\n- Implement CSRF\n- Use proper headers\n- Handle input validation\n- API security",
    "filename": "vue3-nuxt3-guidelines.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "Vue"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.806Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-nestjs-typescript-guidelines",
    "title": "nestjs-typescript-guidelines",
    "description": "# TypeScript NestJS Best Practices",
    "category": "backend-development",
    "subcategories": [],
    "content": "# TypeScript NestJS Best Practices\n\n## Project Context\n- Enterprise NestJS applications\n- TypeScript decorators\n- Dependency injection\n- Modular architecture\n\n## Architecture Patterns\n```typescript\n// Module organization\n/\n├── src/\n│   ├── modules/\n│   │   ├── users/\n│   │   └── auth/\n│   ├── common/\n│   ├── config/\n│   └── main.ts\n\n// Controller pattern\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get(':id')\n  @UseGuards(JwtAuthGuard)\n  async getUser(@Param('id') id: string): Promise<UserResponse> {\n    return this.usersService.findOne(id);\n  }\n}\n```\n\n## Best Practices\n### Custom Decorators\n```typescript\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n);\n\n// Usage\n@Get('profile')\nasync getProfile(@User() user: UserEntity) {\n  return this.usersService.getProfile(user.id);\n}\n```\n\n### Exception Filters\n```typescript\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse<Response>();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      message: exception.message,\n    });\n  }\n}\n```\n\n## Performance Guidelines\n- Use proper caching\n- Implement compression\n- Database connection pooling\n- Rate limiting\n- Response streaming\n\n## Testing Standards\n- Unit testing services\n- E2E testing endpoints\n- Integration testing\n- Test containers\n- Mock providers\n\n## Documentation Requirements\n- OpenAPI/Swagger\n- API versioning\n- Method documentation\n- Configuration docs\n- Deployment guides\n\n## Security Best Practices\n- Authentication guards\n- Role-based access\n- Request validation\n- Helmet integration\n- CORS policies\n\n## Middleware Patterns\n```typescript\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    console.log(`Request ${req.method} ${req.path}`);\n    next();\n  }\n}\n```\n\n## Error Handling\n- Global exception filter\n- Custom exceptions\n- Validation pipes\n- Error logging\n- Response mapping",
    "filename": "nestjs-typescript-guidelines.md",
    "tags": [
      "backend-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.801Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-laravel-php83-guidelines",
    "title": "laravel-php83-guidelines",
    "description": "# Laravel PHP 8.3 Development Guidelines",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Laravel PHP 8.3 Development Guidelines\n\n## Project Context\n- Modern Laravel applications\n- PHP 8.3 features utilization\n- TALL stack integration\n- Clean architecture patterns\n\n## Code Organization\n```php\n// Project structure\n/\n├── app/\n│   ├── Http/\n│   │   ├── Controllers/\n│   │   └── Middleware/\n│   ├── Models/\n│   ├── Services/\n│   └── Providers/\n├── database/\n│   ├── migrations/\n│   └── seeders/\n└── routes/\n    ├── api.php\n    └── web.php\n\n// Controller example with PHP 8.3 features\nclass UserController extends Controller\n{\n    public function __construct(\n        private readonly UserService $userService,\n    ) {}\n\n    public function show(string $id): JsonResponse\n    {\n        return response()->json(\n            $this->userService->findOrFail($id)\n        );\n    }\n}\n```\n\n## Best Practices\n### Service Pattern\n```php\nclass UserService\n{\n    public function __construct(\n        private readonly User $user,\n        private readonly EventDispatcher $dispatcher,\n    ) {}\n\n    public function create(array $data): User\n    {\n        $user = $this->user->create($data);\n        $this->dispatcher->dispatch(new UserCreated($user));\n        return $user;\n    }\n}\n```\n\n### Repository Pattern\n```php\ninterface UserRepository\n{\n    public function find(string $id): ?User;\n    public function create(array $data): User;\n}\n\nclass EloquentUserRepository implements UserRepository\n{\n    public function __construct(\n        private readonly User $model\n    ) {}\n\n    public function find(string $id): ?User\n    {\n        return $this->model->find($id);\n    }\n}\n```\n\n## Performance Guidelines\n- Use eager loading\n- Implement caching\n- Queue long-running tasks\n- Optimize database queries\n- Asset optimization\n\n## Testing Requirements\n- Feature testing\n- Unit testing\n- Database testing\n- API testing\n- Browser testing\n\n## Security Best Practices\n- CSRF protection\n- XSS prevention\n- SQL injection prevention\n- Input validation\n- Authentication/Authorization\n\n## Documentation Standards\n- PHPDoc blocks\n- API documentation\n- Database schema docs\n- Configuration guide\n- Deployment instructions\n\n## Error Handling\n```php\nclass Handler extends ExceptionHandler\n{\n    protected $dontReport = [\n        AuthorizationException::class,\n        ValidationException::class,\n    ];\n\n    public function register(): void\n    {\n        $this->reportable(function (Throwable $e) {\n            // Custom error reporting\n        });\n    }\n}\n```",
    "filename": "laravel-php83-guidelines.md",
    "tags": [
      "backend-development",
      "Laravel"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.796Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-angular-typescript-guidelines",
    "title": "angular-typescript-guidelines",
    "description": "# Angular TypeScript Development Guidelines",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Angular TypeScript Development Guidelines\n\n## Project Context\n- Modern Angular applications\n- TypeScript best practices\n- Standalone components\n- Signals and RxJS\n\n## Architecture Patterns\n```typescript\n// Feature module organization\n/\n├── feature/\n│   ├── components/\n│   ├── services/\n│   ├── models/\n│   └── utils/\n\n// Standalone component\n@Component({\n  selector: 'app-user-profile',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div *ngIf=\"user$ | async as user\">\n      <h2>{{ user.name }}</h2>\n    </div>\n  `\n})\nexport class UserProfileComponent {\n  private userService = inject(UserService);\n  user$ = this.userService.getCurrentUser();\n}\n```\n\n## State Management\n### Signals\n```typescript\n// Signal store pattern\nexport class UserStore {\n  private readonly state = signal<UserState>({\n    user: null,\n    loading: false,\n    error: null\n  });\n\n  readonly user = computed(() => this.state().user);\n  readonly loading = computed(() => this.state().loading);\n\n  async loadUser(id: string) {\n    this.state.update(s => ({ ...s, loading: true }));\n    try {\n      const user = await this.userService.getUser(id);\n      this.state.update(s => ({ ...s, user, loading: false }));\n    } catch (error) {\n      this.state.update(s => ({ \n        ...s, error, loading: false \n      }));\n    }\n  }\n}\n```\n\n## Testing Guidelines\n- Unit testing components\n- Integration testing\n- E2E with Cypress/Playwright\n- Service testing\n- Signal testing patterns\n\n## Performance Best Practices\n- Change detection strategy\n- Lazy loading\n- Virtual scrolling\n- Web workers usage\n- Server-side rendering\n\n## Component Guidelines\n- Smart/Dumb pattern\n- Input/Output contracts\n- Lifecycle hooks usage\n- Template optimization\n- Style encapsulation\n\n## Documentation Standards\n- TypeDoc usage\n- Component documentation\n- API documentation\n- Setup instructions\n- Architectural decisions\n\n## Error Handling\n```typescript\n@Injectable()\nexport class GlobalErrorHandler implements ErrorHandler {\n  handleError(error: Error) {\n    console.error('An error occurred:', error);\n    // Error reporting logic\n  }\n}\n```\n\n## Security Guidelines\n- XSS prevention\n- CSRF protection\n- Content Security Policy\n- Safe data binding\n- Route guards",
    "filename": "angular-typescript-guidelines.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "Angular"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.796Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-htmx-flask-guidelines",
    "title": "htmx-flask-guidelines",
    "description": "# HTMX with Flask Development Guidelines",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# HTMX with Flask Development Guidelines\n\n## Project Context\n- Modern server-side web applications\n- HTMX for dynamic interactions\n- Flask backend integration\n- Progressive enhancement\n\n## Architecture Patterns\n```python\n# Project structure\n/\n├── app/\n│   ├── templates/\n│   │   ├── base.html\n│   │   └── components/\n│   ├── static/\n│   │   └── js/\n│   ├── routes/\n│   └── models/\n└── config.py\n\n# Route with HTMX handling\n@app.route('/items/<int:id>', methods=['GET'])\ndef get_item(id):\n    if is_htmx_request():\n        return render_template('components/item.html', item=item)\n    return render_template('items.html', items=items)\n\n# Template with HTMX\n{% extends \"base.html\" %}\n{% block content %}\n<div hx-get=\"/api/items\" \n     hx-trigger=\"load\"\n     hx-swap=\"innerHTML\">\n</div>\n{% endblock %}\n```\n\n## HTMX Patterns\n### Common Attributes\n- hx-get/post/put/delete\n- hx-trigger\n- hx-target\n- hx-swap\n- hx-indicator\n\n### Event Handling\n```html\n<!-- Dynamic form submission -->\n<form hx-post=\"/submit\"\n      hx-swap=\"outerHTML\"\n      hx-trigger=\"submit\">\n    <!-- Form fields -->\n</form>\n\n<!-- Lazy loading -->\n<div hx-get=\"/api/items\"\n     hx-trigger=\"revealed\"\n     hx-swap=\"afterend\">\n</div>\n```\n\n## Best Practices\n- Use proper HTML semantics\n- Implement progressive enhancement\n- Handle loading states\n- Manage error responses\n- Use proper validation\n\n## Performance Guidelines\n- Minimize response size\n- Use proper caching\n- Implement lazy loading\n- Handle race conditions\n- Optimize server responses\n\n## Testing Requirements\n- Server-side testing\n- Integration testing\n- UI interaction tests\n- Response validation\n- Error handling tests\n\n## Security Guidelines\n- CSRF protection\n- Input validation\n- XSS prevention\n- Rate limiting\n- Authentication checks\n\n## Documentation Standards\n- Document HTMX patterns\n- API documentation\n- Template structure\n- Component usage\n- Setup instructions",
    "filename": "htmx-flask-guidelines.md",
    "tags": [
      "frontend-development",
      "Python"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.796Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-chrome-extension-guidelines",
    "title": "chrome-extension-guidelines",
    "description": "# Chrome Extension Development Guidelines",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Chrome Extension Development Guidelines\n\n## Project Context\n- Modern Chrome extension development\n- TypeScript and JavaScript\n- Manifest V3 implementation\n- Cross-browser compatibility\n\n## Architecture Patterns\n```typescript\n// Project structure\n/\n├── src/\n│   ├── background/\n│   ├── content/\n│   ├── popup/\n│   └── options/\n├── public/\n│   └── manifest.json\n└── types/\n\n// Manifest V3 example\n{\n  \"manifest_version\": 3,\n  \"name\": \"Extension Name\",\n  \"version\": \"1.0.0\",\n  \"action\": {\n    \"default_popup\": \"popup.html\"\n  },\n  \"permissions\": [\n    \"storage\",\n    \"activeTab\"\n  ],\n  \"background\": {\n    \"service_worker\": \"background.js\"\n  }\n}\n```\n\n## Best Practices\n### Background Service Worker\n```typescript\n// Message handling\nchrome.runtime.onMessage.addListener(\n  (message, sender, sendResponse) => {\n    switch (message.type) {\n      case 'DATA_REQUEST':\n        handleDataRequest(message.payload)\n          .then(sendResponse);\n        return true; // Will respond asynchronously\n    }\n  }\n);\n```\n\n### Content Scripts\n```typescript\n// DOM interaction\nconst observer = new MutationObserver((mutations) => {\n  for (const mutation of mutations) {\n    if (mutation.type === 'childList') {\n      handleDOMChanges(mutation);\n    }\n  }\n});\n\nobserver.observe(document.body, {\n  childList: true,\n  subtree: true\n});\n```\n\n## Security Guidelines\n- Use content security policy\n- Implement proper permissions\n- Handle cross-origin requests\n- Secure message passing\n- Data sanitization\n\n## Performance Best Practices\n- Optimize service worker\n- Minimize resource usage\n- Handle memory leaks\n- Use event delegation\n- Implement proper caching\n\n## Testing Requirements\n- Unit testing components\n- E2E testing\n- Permission testing\n- Cross-browser testing\n- Performance testing\n\n## Documentation Standards\n- API documentation\n- Installation guide\n- Usage instructions\n- Permission explanations\n- Troubleshooting guide\n\n## Development Workflow\n- Build configuration\n- Hot reloading setup\n- Debug procedures\n- Release process\n- Version management",
    "filename": "chrome-extension-guidelines.md",
    "tags": [
      "frontend-development",
      "JavaScript",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.791Z",
      "contributor": "Community"
    }
  },
  {
    "id": "ai-ml-llm-ml-workflow-guidelines",
    "title": "llm-ml-workflow-guidelines",
    "description": "# LLM and ML Workflow Guidelines",
    "category": "ai-ml",
    "subcategories": [],
    "content": "# LLM and ML Workflow Guidelines\n\n## Project Context\n- LLM model integration\n- ML pipeline development\n- Model training and deployment\n- Data processing workflows\n\n## Development Setup\n- Environment management with conda/venv\n- GPU setup and configuration\n- Dependency management\n- Experiment tracking\n\n## Code Organization\n```python\n# Project structure\n/\n├── data/\n│   ├── raw/\n│   ├── processed/\n│   └── external/\n├── models/\n│   ├── training/\n│   └── inference/\n├── notebooks/\n├── src/\n│   ├── data/\n│   ├── features/\n│   ├── models/\n│   └── utils/\n└── configs/\n\n# Model training example\nclass ModelTrainer:\n    def __init__(self, config: TrainingConfig):\n        self.config = config\n        self.model = self._initialize_model()\n        self.optimizer = self._setup_optimizer()\n        \n    def train(self, train_data: DataLoader):\n        self.model.train()\n        for batch in train_data:\n            self.optimizer.zero_grad()\n            loss = self._compute_loss(batch)\n            loss.backward()\n            self.optimizer.step()\n```\n\n## Best Practices\n- Version control for models\n- Data versioning\n- Experiment tracking\n- Model validation\n- Testing protocols\n\n## Data Management\n- Data preprocessing\n- Feature engineering\n- Data validation\n- Dataset versioning\n- Data augmentation\n\n## Model Development\n- Model architecture design\n- Hyperparameter tuning\n- Cross-validation\n- Model evaluation\n- Error analysis\n\n## Deployment Guidelines\n- Model serialization\n- API development\n- Monitoring setup\n- Performance optimization\n- Resource management\n\n## Documentation Requirements\n- Model architecture docs\n- Training procedures\n- Evaluation metrics\n- Deployment guides\n- Maintenance procedures",
    "filename": "llm-ml-workflow-guidelines.md",
    "tags": [
      "ai-ml",
      "Python"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.786Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-go-backend-guidelines",
    "title": "go-backend-guidelines",
    "description": "# Go Backend Development Guidelines",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Go Backend Development Guidelines\n\n## Project Context\n- Go backend services\n- RESTful API development\n- Scalability patterns\n- Clean architecture\n\n## Code Organization\n```go\n// Project structure\n/\n├── cmd/\n│   └── api/\n│       └── main.go\n├── internal/\n│   ├── app/\n│   ├── domain/\n│   ├── handlers/\n│   └── repository/\n├── pkg/\n│   ├── middleware/\n│   └── utils/\n└── api/\n    └── openapi.yaml\n\n// Handler pattern\ntype Handler struct {\n    service Service\n    logger  *log.Logger\n}\n\nfunc NewHandler(svc Service, logger *log.Logger) *Handler {\n    return &Handler{\n        service: svc,\n        logger:  logger,\n    }\n}\n\nfunc (h *Handler) HandleRequest(w http.ResponseWriter, r *http.Request) {\n    // Request handling logic\n}\n```\n\n## Best Practices\n- Use interfaces for abstraction\n- Implement proper error handling\n- Follow standard project layout\n- Use context for cancellation\n- Implement middleware chain\n\n## Performance Guidelines\n- Proper connection pooling\n- Resource cleanup\n- Goroutine management\n- Memory optimization\n- CPU profiling\n\n## Testing Standards\n- Unit testing\n- Integration testing\n- Benchmark testing\n- Mock generation\n- Test fixtures\n\n## Error Handling\n```go\n// Error types\ntype AppError struct {\n    Code    int\n    Message string\n    Err     error\n}\n\nfunc (e *AppError) Error() string {\n    return e.Message\n}\n\n// Error handling\nfunc handleError(w http.ResponseWriter, err error) {\n    var appErr *AppError\n    if errors.As(err, &appErr) {\n        respondWithError(w, appErr.Code, appErr.Message)\n        return\n    }\n    // Handle unknown errors\n}\n```\n\n## Security Guidelines\n- Input validation\n- Authentication middleware\n- Rate limiting\n- CORS configuration\n- Secure headers\n\n## Documentation\n- API documentation\n- Code comments\n- README maintenance\n- Version documentation\n- Deployment guides",
    "filename": "go-backend-guidelines.md",
    "tags": [
      "backend-development",
      "Go"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.786Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-sveltekit-guidelines",
    "title": "sveltekit-guidelines",
    "description": "# SvelteKit Development Guidelines",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# SvelteKit Development Guidelines\n\n## Project Context\n- Modern SvelteKit applications\n- Server-side rendering\n- TypeScript integration\n- Tailwind CSS styling\n\n## Architecture Patterns\n```typescript\n// Route structure (+page.svelte)\n<script lang=\"ts\">\n    import type { PageData } from './$types';\n    export let data: PageData;\n</script>\n\n// Server-side loading (+page.server.ts)\nexport const load = async ({ fetch, params }) => {\n    const response = await fetch(`/api/items/${params.id}`);\n    return {\n        item: await response.json()\n    };\n};\n\n// Store management\nimport { writable } from 'svelte/store';\n\nexport const cart = writable<CartItem[]>([]);\n\n// Actions example\nexport const actions = {\n    default: async ({ request }) => {\n        const data = await request.formData();\n        // Process form data\n    }\n};\n```\n\n## Component Guidelines\n- Use TypeScript for type safety\n- Implement proper prop validation\n- Use slots for component composition\n- Follow reactive patterns\n\n## State Management\n- Use Svelte stores appropriately\n- Implement proper reactivity\n- Handle server/client state\n- Use context when needed\n\n## Performance Best Practices\n- Implement proper loading states\n- Use SSR effectively\n- Optimize bundle size\n- Handle asset loading\n- Use transitions properly\n\n## Routing Guidelines\n- Implement proper layouts\n- Handle route parameters\n- Use route guards\n- Error boundaries\n- Loading states\n\n## Testing Requirements\n- Component testing\n- Integration testing\n- E2E testing setup\n- Test utils and helpers\n- Mock implementations\n\n## Documentation Standards\n- Document components\n- API documentation\n- Usage examples\n- TypeScript types\n- Project setup guide\n\n## Deployment Strategy\n- Build optimization\n- Environment setup\n- Static file handling\n- API integration\n- Error handling",
    "filename": "sveltekit-guidelines.md",
    "tags": [
      "frontend-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.786Z",
      "contributor": "Community"
    }
  },
  {
    "id": "fullstack-development-typescript-fullstack-guidelines",
    "title": "typescript-fullstack-guidelines",
    "description": "# Full Stack TypeScript Development Guidelines",
    "category": "fullstack-development",
    "subcategories": [],
    "content": "# Full Stack TypeScript Development Guidelines\n\n## Project Context\n- Next.js for frontend\n- Node.js backend with Express/NestJS\n- TypeScript throughout the stack\n- Shared types and utilities\n\n## Project Structure\n```typescript\n// Project organization\n/\n├── apps/\n│   ├── web/          # Next.js frontend\n│   └── api/          # Backend API\n├── packages/\n│   ├── shared/       # Shared types and utilities\n│   └── config/       # Shared configuration\n└── package.json      # Workspace configuration\n\n// Shared types example\n// packages/shared/types/index.ts\nexport interface User {\n  id: string;\n  email: string;\n  profile: UserProfile;\n}\n\nexport interface UserProfile {\n  firstName: string;\n  lastName: string;\n  avatar?: string;\n}\n```\n\n## Architecture Guidelines\n### Frontend\n- Use React Server Components\n- Implement proper data fetching\n- Type-safe API calls\n- State management patterns\n\n### Backend\n- RESTful API design\n- Middleware implementation\n- Database integration\n- Authentication/Authorization\n\n## Type Safety\n- Share types between frontend/backend\n- Use strict TypeScript configuration\n- Implement proper validation\n- Use type guards appropriately\n\n## Best Practices\n- Monorepo management\n- Code sharing strategies\n- Environment configuration\n- Error handling patterns\n- Testing strategies\n\n## Development Workflow\n- Local development setup\n- Database migrations\n- API documentation\n- Debug configuration\n- Build optimization\n\n## Deployment Guidelines\n- CI/CD setup\n- Environment variables\n- Production builds\n- Monitoring setup\n- Logging strategy\n\n## Security Considerations\n- API security\n- Authentication flow\n- CORS configuration\n- Rate limiting\n- Data validation",
    "filename": "typescript-fullstack-guidelines.md",
    "tags": [
      "fullstack-development",
      "TypeScript",
      "React",
      "Node",
      "Express"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.786Z",
      "contributor": "Community"
    }
  },
  {
    "id": "mobile-development-flutter-app-expert-guidelines",
    "title": "flutter-app-expert-guidelines",
    "description": "# Flutter App Development Expert Guidelines",
    "category": "mobile-development",
    "subcategories": [],
    "content": "# Flutter App Development Expert Guidelines\n\n## Project Context\n- Modern Flutter applications\n- Cross-platform development\n- Material Design 3 and Cupertino\n- Clean architecture principles\n\n## Architecture Guidelines\n```dart\n// Clean Architecture layers\nlib/\n├── core/\n│   ├── error/\n│   ├── network/\n│   └── utils/\n├── data/\n│   ├── datasources/\n│   ├── models/\n│   └── repositories/\n├── domain/\n│   ├── entities/\n│   ├── repositories/\n│   └── usecases/\n└── presentation/\n    ├── bloc/\n    ├── pages/\n    └── widgets/\n\n// Use case implementation\nclass GetUserProfile implements UseCase<UserProfile, String> {\n  final UserRepository repository;\n\n  GetUserProfile(this.repository);\n\n  @override\n  Future<Either<Failure, UserProfile>> call(String userId) {\n    return repository.getUserProfile(userId);\n  }\n}\n```\n\n## State Management\n- Use BLoC/Cubit pattern\n- Implement proper state immutability\n- Handle loading and error states\n- Proper state restoration\n- Deep linking support\n\n## UI Guidelines\n- Implement responsive layouts\n- Use proper widget composition\n- Follow Material/Cupertino guidelines\n- Handle different screen sizes\n- Support dark/light themes\n\n## Performance Guidelines\n- Widget rebuilding optimization\n- Image caching strategy\n- Lazy loading implementation\n- Memory management\n- Animation performance\n\n## Testing Strategy\n- Widget testing\n- BLoC/Cubit testing\n- Integration testing\n- Golden tests\n- Performance testing\n\n## Platform Integration\n- Native features handling\n- Platform-specific code\n- Permissions handling\n- Deep linking\n- Push notifications\n\n## Best Practices\n- Dependency injection\n- Error handling\n- Logging strategy\n- Analytics integration\n- Localization setup\n\n## Security Guidelines\n- Secure storage usage\n- API security\n- Certificate pinning\n- Sensitive data handling\n- App signing",
    "filename": "flutter-app-expert-guidelines.md",
    "tags": [
      "mobile-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.786Z",
      "contributor": "Community"
    }
  },
  {
    "id": "testing-e2e-testing-guidelines",
    "title": "e2e-testing-guidelines",
    "description": "# End-to-End Testing Best Practices",
    "category": "testing",
    "subcategories": [],
    "content": "# End-to-End Testing Best Practices\n\n## Project Context\n- E2E testing with Playwright/Cypress\n- Integration testing strategies\n- Test automation patterns\n- CI/CD integration\n\n## Testing Architecture\n```typescript\n// Page Object Model\nclass LoginPage {\n    constructor(private page: Page) {}\n\n    async navigate() {\n        await this.page.goto('/login');\n    }\n\n    async login(username: string, password: string) {\n        await this.page.fill('[data-test=\"username\"]', username);\n        await this.page.fill('[data-test=\"password\"]', password);\n        await this.page.click('[data-test=\"login-button\"]');\n    }\n}\n\n// Test structure\ndescribe('Authentication', () => {\n    let loginPage: LoginPage;\n\n    beforeEach(async () => {\n        loginPage = new LoginPage(page);\n        await loginPage.navigate();\n    });\n\n    test('successful login', async () => {\n        await loginPage.login('testuser', 'password');\n        await expect(page).toHaveURL('/dashboard');\n    });\n});\n```\n\n## Best Practices\n- Use data-test attributes\n- Implement proper wait strategies\n- Handle network requests\n- Manage test data\n- Use test isolation\n\n## Test Organization\n- Group by feature\n- Use proper naming conventions\n- Implement proper hooks\n- Manage test environment\n- Handle cleanup\n\n## Performance Guidelines\n- Parallel test execution\n- Proper resource cleanup\n- Browser context reuse\n- Network throttling tests\n- Visual regression tests\n\n## CI/CD Integration\n- Configure test runners\n- Set up reporting\n- Handle test failures\n- Implement retries\n- Artifact management\n\n## Documentation Standards\n- Document test scenarios\n- Maintain test data docs\n- Include setup instructions\n- Document known issues\n- Keep maintenance guides\n\n## Test Data Management\n- Use fixtures\n- Data cleanup strategies\n- Environment isolation\n- Seed data handling\n- Mock data patterns",
    "filename": "e2e-testing-guidelines.md",
    "tags": [
      "testing",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.771Z",
      "contributor": "Community"
    }
  },
  {
    "id": "database-database-best-practices",
    "title": "database-best-practices",
    "description": "# Database Development Best Practices",
    "category": "database",
    "subcategories": [],
    "content": "# Database Development Best Practices\n\n## Project Context\n- SQL and NoSQL database design\n- Data modeling patterns\n- Performance optimization\n- Data security and integrity\n\n## Database Design Guidelines\n### Schema Design\n- Normalize to appropriate form (3NF/BCNF)\n- Use proper indexing strategies\n- Implement proper constraints\n- Design for scalability\n\n### Query Optimization\n```sql\n-- Good practices\n-- Use specific column names\nSELECT user_id, username, email \nFROM users \nWHERE status = 'active';\n\n-- Use proper indexes\nCREATE INDEX idx_users_status ON users(status);\n\n-- Use JOIN instead of subqueries when possible\nSELECT o.order_id, u.username\nFROM orders o\nJOIN users u ON o.user_id = u.id;\n```\n\n## NoSQL Patterns\n### Document Design\n```javascript\n// MongoDB example\n// Embedded documents for 1:1 or 1:few relationships\n{\n  \"_id\": ObjectId(\"...\"),\n  \"username\": \"john_doe\",\n  \"profile\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"preferences\": {\n      \"theme\": \"dark\",\n      \"notifications\": true\n    }\n  }\n}\n\n// References for 1:many relationships\n{\n  \"_id\": ObjectId(\"...\"),\n  \"username\": \"john_doe\",\n  \"order_ids\": [ObjectId(\"...\"), ObjectId(\"...\")]\n}\n```\n\n## Security Requirements\n- Implement proper authentication\n- Use parameterized queries\n- Encrypt sensitive data\n- Regular security audits\n- Access control implementation\n\n## Performance Guidelines\n- Use connection pooling\n- Implement proper caching\n- Monitor query performance\n- Regular maintenance tasks\n- Backup strategies\n\n## Best Practices\n- Version control for schema changes\n- Use migrations\n- Implement proper logging\n- Error handling strategies\n- Data validation\n\n## Monitoring\n- Performance metrics\n- Query analysis\n- Resource utilization\n- Error tracking\n- Backup verification",
    "filename": "database-best-practices.md",
    "tags": [
      "database",
      "JavaScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.764Z",
      "contributor": "Community"
    }
  },
  {
    "id": "ai-ml-pytorch-sklearn-instructions",
    "title": "pytorch-sklearn-instructions",
    "description": "# PyTorch and Scikit-learn Development Guidelines",
    "category": "ai-ml",
    "subcategories": [],
    "content": "# PyTorch and Scikit-learn Development Guidelines\n\n## Project Context\n- Machine learning model development using PyTorch and Scikit-learn\n- Focus on efficient and maintainable ML code practices\n- Integration with data processing pipelines\n\n## Code Style Guidelines\n- Use type hints for tensor shapes and data types\n- Follow PEP 8 standards for Python code\n- Document model architecture and hyperparameters\n- Use descriptive variable names for tensors and models\n\n## Architecture Patterns\n- Implement model classes using `nn.Module`\n- Separate data preprocessing from model logic\n- Use PyTorch's DataLoader for efficient batch processing\n- Implement proper train/validation/test splits\n\n## Testing Requirements\n- Unit tests for model components\n- Validation of input/output tensor shapes\n- Performance benchmarking\n- Model evaluation metrics\n\n## Documentation Standards\n- Document model architecture decisions\n- Include training parameters and environment setup\n- Add docstrings for custom functions and classes\n- Maintain experiment logs and results\n\n## Best Practices\n- Use GPU acceleration when available\n- Implement proper error handling for data loading\n- Use proper seed setting for reproducibility\n- Implement early stopping and model checkpoints\n- Follow memory-efficient practices for large datasets\n\n## Common Patterns\n```python\n# Model definition\nclass MyModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        # Layer definitions\n\n    def forward(self, x):\n        # Forward pass logic\n\n# Data loading\ndef create_dataloader(dataset, batch_size):\n    return DataLoader(dataset, batch_size=batch_size, shuffle=True)\n\n# Training loop\ndef train_model(model, dataloader, criterion, optimizer):\n    model.train()\n    for batch in dataloader:\n        optimizer.zero_grad()\n        # Training logic\n\n# Evaluation\ndef evaluate_model(model, dataloader):\n    model.eval()\n    with torch.no_grad():\n        # Evaluation logic\n```\n\n## Security Requirements\n- Secure data loading and preprocessing\n- Model input validation\n- Protected model weights and checkpoints\n- Proper handling of sensitive training data",
    "filename": "pytorch-sklearn-instructions.md",
    "tags": [
      "ai-ml",
      "Python"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.763Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-fastapi-best-practices",
    "title": "fastapi-best-practices",
    "description": "# Python FastAPI Best Practices",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Python FastAPI Best Practices\n\n## Project Context\n- Modern FastAPI application development\n- Async/await patterns\n- Type safety with Pydantic\n- API documentation with OpenAPI\n\n## Code Style Guidelines\n- Use type hints consistently\n- Follow Python PEP 8 standards\n- Implement proper response models\n- Use async functions appropriately\n\n## Architecture Patterns\n```python\n# Project structure\n/\n├── app/\n│   ├── api/\n│   │   └── v1/\n│   ├── core/\n│   │   ├── config.py\n│   │   └── security.py\n│   ├── models/\n│   ├── schemas/\n│   └── services/\n└── tests/\n\n# Route organization with dependencies\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom typing import Annotated\n\nrouter = APIRouter(prefix=\"/api/v1\")\n\n@router.get(\"/items/{item_id}\", response_model=ItemResponse)\nasync def get_item(\n    item_id: int,\n    current_user: Annotated[User, Depends(get_current_user)]\n) -> ItemResponse:\n    if item := await get_item_by_id(item_id):\n        return item\n    raise HTTPException(status_code=404, detail=\"Item not found\")\n```\n\n## Testing Requirements\n- Async test cases\n- API integration tests\n- Mock external services\n- Performance testing\n- Security testing\n\n## Documentation Standards\n- OpenAPI documentation\n- Type hints everywhere\n- Function docstrings\n- API versioning docs\n- Example requests/responses\n\n## Best Practices\n### Dependency Injection\n```python\nfrom fastapi import Depends\nfrom typing import Annotated\n\nasync def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        await db.close()\n\nDB = Annotated[AsyncSession, Depends(get_db)]\n\n@router.post(\"/users/\")\nasync def create_user(user: UserCreate, db: DB):\n    return await user_service.create(db, user)\n```\n\n### Pydantic Models\n```python\nfrom pydantic import BaseModel, EmailStr, Field\n\nclass UserBase(BaseModel):\n    email: EmailStr\n    username: str = Field(..., min_length=3)\n    \n    class Config:\n        from_attributes = True\n```\n\n## Performance Guidelines\n- Use async where beneficial\n- Implement proper caching\n- Database connection pooling\n- Background tasks handling\n- Response streaming\n\n## Security Best Practices\n- JWT authentication\n- Rate limiting\n- Input validation\n- CORS configuration\n- Dependency scanning\n\n## Error Handling\n```python\nfrom fastapi import HTTPException\nfrom typing import Any\n\nclass AppException(HTTPException):\n    def __init__(\n        self,\n        status_code: int,\n        detail: Any = None,\n        headers: dict | None = None,\n    ) -> None:\n        super().__init__(status_code=status_code, detail=detail)\n        self.headers = headers",
    "filename": "fastapi-best-practices.md",
    "tags": [
      "backend-development",
      "Python"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.763Z",
      "contributor": "Community"
    }
  },
  {
    "id": "game-development-unity-csharp-guidelines",
    "title": "unity-csharp-guidelines",
    "description": "# Unity C# Game Development Guidelines",
    "category": "game-development",
    "subcategories": [],
    "content": "# Unity C# Game Development Guidelines\n\n## Project Context\n- Unity game development with C#\n- Performance-oriented game design\n- Cross-platform game development\n- ECS (Entity Component System) patterns\n\n## Code Style Guidelines\n- Use PascalCase for public members\n- Implement proper component separation\n- Follow Unity's naming conventions\n- Use SerializeField for inspector variables\n\n## Architecture Patterns\n```csharp\n// Component-based architecture\npublic class PlayerController : MonoBehaviour\n{\n    [SerializeField] private float moveSpeed = 5f;\n    [SerializeField] private float jumpForce = 10f;\n    \n    private Rigidbody2D rb;\n    private bool isGrounded;\n    \n    private void Awake()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n    \n    private void Update()\n    {\n        HandleInput();\n    }\n    \n    private void FixedUpdate()\n    {\n        HandleMovement();\n    }\n}\n\n// Object pooling pattern\npublic class ObjectPool : MonoBehaviour\n{\n    [SerializeField] private GameObject prefab;\n    [SerializeField] private int poolSize = 20;\n    \n    private Queue<GameObject> objectPool;\n    \n    private void Start()\n    {\n        objectPool = new Queue<GameObject>();\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            CreateNewObject();\n        }\n    }\n}\n```\n\n## Performance Guidelines\n- Use object pooling for frequent instantiation\n- Implement proper garbage collection\n- Optimize Update cycles\n- Use proper physics layers\n- Profile regularly with Unity Profiler\n\n## Best Practices\n- Separate logic from MonoBehaviour\n- Use ScriptableObjects for data\n- Implement proper state management\n- Use events for decoupling\n- Follow Unity's input system guidelines\n\n## Testing Requirements\n- Unit testing with Unity Test Framework\n- Play mode tests\n- Performance testing\n- Integration testing\n- Scene validation\n\n## Documentation Standards\n- Document public APIs\n- Include usage examples\n- Document performance considerations\n- Maintain proper prefab documentation\n\n## Asset Management\n- Follow proper folder structure\n- Use asset bundles effectively\n- Implement resource loading patterns\n- Optimize asset imports\n- Version control guidelines",
    "filename": "unity-csharp-guidelines.md",
    "tags": [
      "game-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.763Z",
      "contributor": "Community"
    }
  },
  {
    "id": "general-development-code-quality-solid-principles",
    "title": "code-quality-solid-principles",
    "description": "# Code Quality and SOLID Principles Guidelines",
    "category": "general-development",
    "subcategories": [],
    "content": "# Code Quality and SOLID Principles Guidelines\n\n## Project Context\n- Clean code practices\n- SOLID principles implementation\n- Code optimization techniques\n- Maintainable software design\n\n## Design Principles\n### Single Responsibility Principle (SRP)\n- Each class/module has one reason to change\n- Separate concerns appropriately\n- Use composition over inheritance\n\n### Open/Closed Principle (OCP)\n- Open for extension, closed for modification\n- Use interfaces and abstract classes\n- Implement plugin architecture where appropriate\n\n### Liskov Substitution Principle (LSP)\n- Subtypes must be substitutable for base types\n- Maintain contract consistency\n- Avoid breaking inheritance hierarchies\n\n### Interface Segregation Principle (ISP)\n- Keep interfaces small and focused\n- Avoid fat interfaces\n- Client-specific interfaces\n\n### Dependency Inversion Principle (DIP)\n- Depend on abstractions, not concretions\n- Use dependency injection\n- Implement proper IoC containers\n\n## Code Style Guidelines\n```typescript\n// Bad\nclass OrderProcessor {\n    processOrder(order) {\n        // Handle validation, payment, shipping, notification\n    }\n}\n\n// Good\ninterface OrderValidator {\n    validate(order: Order): boolean;\n}\n\ninterface PaymentProcessor {\n    process(payment: Payment): Promise<void>;\n}\n\nclass OrderService {\n    constructor(\n        private validator: OrderValidator,\n        private paymentProcessor: PaymentProcessor,\n        private shipmentService: ShipmentService,\n        private notifier: NotificationService\n    ) {}\n\n    async processOrder(order: Order): Promise<void> {\n        if (this.validator.validate(order)) {\n            await this.paymentProcessor.process(order.payment);\n            await this.shipmentService.ship(order);\n            await this.notifier.notify(order.customer);\n        }\n    }\n}\n```\n\n## Best Practices\n- Write self-documenting code\n- Implement proper error handling\n- Use meaningful names\n- Keep functions small and focused\n- Follow DRY principle\n- Use proper code organization\n\n## Testing Guidelines\n- Write unit tests for business logic\n- Implement integration tests\n- Use proper mocking\n- Follow AAA pattern (Arrange-Act-Assert)\n- Maintain test coverage\n\n## Performance Optimization\n- Implement proper caching\n- Use appropriate data structures\n- Optimize algorithms\n- Profile code regularly\n- Handle memory management\n\n## Code Review Checklist\n- SOLID principles adherence\n- Clean code practices\n- Proper error handling\n- Test coverage\n- Performance considerations\n- Security practices",
    "filename": "code-quality-solid-principles.md",
    "tags": [
      "general-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.763Z",
      "contributor": "Community"
    }
  },
  {
    "id": "mobile-development-flutter-riverpod-guidelines",
    "title": "flutter-riverpod-guidelines",
    "description": "# Flutter Development with Riverpod Guidelines",
    "category": "mobile-development",
    "subcategories": [],
    "content": "# Flutter Development with Riverpod Guidelines\n\n## Project Context\n- Flutter applications using Riverpod for state management\n- Cross-platform mobile development\n- Material Design 3 implementation\n- Responsive and adaptive UI\n\n## Code Style Guidelines\n- Use named parameters for widget constructors\n- Implement const constructors where possible\n- Follow Flutter's style guide for naming\n- Use proper widget extraction\n\n## Architecture Patterns\n```dart\n// Provider definitions\n@riverpod\nclass UserState extends _$UserState {\n  @override\n  FutureOr<User> build() async {\n    return await _fetchUser();\n  }\n}\n\n// Widget structure\nclass UserProfile extends ConsumerWidget {\n  const UserProfile({super.key});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final userState = ref.watch(userStateProvider);\n    \n    return userState.when(\n      data: (user) => UserDataView(user: user),\n      loading: () => const CircularProgressIndicator(),\n      error: (error, stack) => ErrorView(error: error),\n    );\n  }\n}\n```\n\n## Testing Requirements\n- Widget testing\n- Integration testing\n- Provider testing\n- Golden tests for UI\n- Performance testing\n\n## Documentation Standards\n- Document all providers\n- Add widget documentation\n- Include usage examples\n- Document state management flow\n\n## Best Practices\n- Use proper provider scoping\n- Implement error handling\n- Follow material design guidelines\n- Use proper asset management\n- Implement proper routing\n- Handle platform differences\n\n## State Management Patterns\n- Use ConsumerWidget for state-aware widgets\n- Implement proper provider organization\n- Use provider families when needed\n- Handle loading and error states\n- Implement proper state persistence\n\n## Performance Guidelines\n- Use const constructors\n- Implement proper list optimization\n- Use proper image caching\n- Minimize rebuilds\n- Profile regularly",
    "filename": "flutter-riverpod-guidelines.md",
    "tags": [
      "mobile-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.763Z",
      "contributor": "Community"
    }
  },
  {
    "id": "devops-kubernetes-istio-guidelines",
    "title": "kubernetes-istio-guidelines",
    "description": "# Kubernetes and Istio Development Guidelines",
    "category": "devops",
    "subcategories": [],
    "content": "# Kubernetes and Istio Development Guidelines\n\n## Project Context\n- Kubernetes cluster management\n- Service mesh with Istio\n- Container orchestration\n- Microservices deployment\n\n## Infrastructure Guidelines\n- Use Infrastructure as Code (IaC)\n- Implement proper resource requests/limits\n- Use namespaces for isolation\n- Follow least privilege principle\n\n## Deployment Patterns\n```yaml\n# Service deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: service-name\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: service-name\n  template:\n    metadata:\n      labels:\n        app: service-name\n    spec:\n      containers:\n      - name: service-container\n        image: service-image:tag\n        resources:\n          requests:\n            memory: \"64Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n\n# Istio VirtualService\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: service-route\nspec:\n  hosts:\n  - service-name\n  http:\n  - route:\n    - destination:\n        host: service-name\n        subset: v1\n```\n\n## Security Requirements\n- Network policies\n- Pod security policies\n- Service mesh authentication\n- Secret management\n- RBAC implementation\n\n## Monitoring Setup\n- Prometheus configuration\n- Grafana dashboards\n- Distributed tracing\n- Log aggregation\n- Alert rules\n\n## Best Practices\n- Use rolling updates\n- Implement health checks\n- Configure resource quotas\n- Use config maps and secrets\n- Implement proper backup strategies\n\n## Performance Guidelines\n- Configure HPA\n- Implement pod disruption budgets\n- Optimize resource utilization\n- Use node affinity rules\n- Configure proper ingress",
    "filename": "kubernetes-istio-guidelines.md",
    "tags": [
      "devops",
      "Node"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.762Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-nextjs-typescript-tailwind",
    "title": "nextjs-typescript-tailwind",
    "description": "# Next.js with TypeScript and Tailwind CSS Development Guidelines",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Next.js with TypeScript and Tailwind CSS Development Guidelines\n\n## Project Context\n- Modern Next.js applications using App Router\n- TypeScript for type safety\n- Tailwind CSS for styling\n- Performance-optimized web applications\n\n## Code Style Guidelines\n- Use functional components with TypeScript interfaces\n- Follow naming convention: `ComponentName.tsx`\n- Implement proper type definitions for props and states\n- Use Tailwind classes with consistent ordering\n\n## Architecture Patterns\n- Implement feature-based folder structure\n- Use server and client components appropriately\n- Implement proper data fetching patterns\n- Follow atomic design principles for components\n\n## Testing Requirements\n- Unit tests for components\n- Integration tests for pages\n- E2E testing with Playwright/Cypress\n- Accessibility testing\n\n## Documentation Standards\n- Document component props with TypeScript interfaces\n- Include usage examples in component files\n- Document page routes and data fetching\n- Maintain README with setup instructions\n\n## Best Practices\n```typescript\n// Component structure\ninterface Props {\n  title: string;\n  children: React.ReactNode;\n}\n\nexport default function Layout({ title, children }: Props) {\n  return (\n    <div className=\"container mx-auto px-4\">\n      <h1 className=\"text-2xl font-bold\">{title}</h1>\n      {children}\n    </div>\n  );\n}\n\n// Data fetching\nasync function getData() {\n  const res = await fetch('/api/data', {\n    next: { revalidate: 3600 }\n  });\n  if (!res.ok) throw new Error('Failed to fetch data');\n  return res.json();\n}\n\n// Error handling\nexport function ErrorBoundary({\n  error,\n  reset,\n}: {\n  error: Error;\n  reset: () => void;\n}) {\n  return (\n    <div className=\"p-4 bg-red-50 border border-red-200\">\n      <p>Something went wrong!</p>\n      <button onClick={reset}>Try again</button>\n    </div>\n  );\n}\n```\n\n## Common Patterns\n- Use layout components for shared UI\n- Implement proper loading states\n- Handle errors gracefully\n- Optimize images with next/image\n- Use CSS modules or Tailwind for styling\n\n## Performance Guidelines\n- Implement proper code splitting\n- Use Image and Link components\n- Optimize fonts and assets\n- Implement proper caching strategies\n- Use static generation when possible",
    "filename": "nextjs-typescript-tailwind.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "React"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T21:18:43.762Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-graphql-api",
    "title": "graphql-api",
    "description": "# GraphQL API Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# GraphQL API Development Instructions\n\n## Project Context\n- GraphQL API development\n- Schema-first design\n- Type system optimization\n- Real-time subscriptions\n\n## Code Style Guidelines\n- Follow GraphQL naming conventions\n- Use proper type definitions\n- Implement proper resolvers\n- Follow proper field naming\n- Use proper input types\n\n## Architecture Patterns\n- Use proper schema stitching\n- Implement proper data loaders\n- Follow proper resolver chain\n- Use proper subscription patterns\n- Implement proper caching\n\n## Testing Requirements\n- Test query resolvers\n- Validate mutations\n- Test subscriptions\n- Implement integration tests\n- Test error scenarios\n\n## Documentation Standards\n- Document schema types\n- Include query examples\n- Document mutations\n- Maintain API documentation\n- Include performance notes\n\n## Project-Specific Rules\n### Schema Design\n- Use proper scalar types\n- Implement proper interfaces\n- Follow proper unions\n- Use proper enums\n- Implement proper directives\n\n## Common Patterns\n```typescript\n// Schema Definition\nimport { gql } from 'apollo-server';\n\nconst typeDefs = gql`\n  type User {\n    id: ID!\n    name: String!\n    email: String!\n    posts: [Post!]!\n  }\n\n  type Post {\n    id: ID!\n    title: String!\n    content: String!\n    author: User!\n    comments: [Comment!]!\n  }\n\n  type Comment {\n    id: ID!\n    content: String!\n    author: User!\n    post: Post!\n  }\n\n  input CreatePostInput {\n    title: String!\n    content: String!\n  }\n\n  type Query {\n    user(id: ID!): User\n    users: [User!]!\n    post(id: ID!): Post\n    posts: [Post!]!\n  }\n\n  type Mutation {\n    createPost(input: CreatePostInput!): Post!\n    updatePost(id: ID!, input: CreatePostInput!): Post!\n    deletePost(id: ID!): Boolean!\n  }\n\n  type Subscription {\n    postCreated: Post!\n    postUpdated(id: ID!): Post!\n  }\n`;\n\n// Resolver Implementation\nimport DataLoader from 'dataloader';\nimport { PubSub } from 'graphql-subscriptions';\n\nconst pubsub = new PubSub();\n\nconst userLoader = new DataLoader(async (userIds: string[]) => {\n  const users = await UserModel.findMany({\n    where: {\n      id: { in: userIds }\n    }\n  });\n  \n  return userIds.map(id => \n    users.find(user => user.id === id)\n  );\n});\n\nconst resolvers = {\n  Query: {\n    user: async (_, { id }) => {\n      return userLoader.load(id);\n    },\n    users: async () => {\n      return UserModel.findMany();\n    },\n    post: async (_, { id }) => {\n      return PostModel.findUnique({\n        where: { id }\n      });\n    },\n    posts: async () => {\n      return PostModel.findMany();\n    }\n  },\n\n  Mutation: {\n    createPost: async (_, { input }, { userId }) => {\n      const post = await PostModel.create({\n        data: {\n          ...input,\n          authorId: userId\n        }\n      });\n\n      pubsub.publish('POST_CREATED', {\n        postCreated: post\n      });\n\n      return post;\n    },\n\n    updatePost: async (_, { id, input }) => {\n      const post = await PostModel.update({\n        where: { id },\n        data: input\n      });\n\n      pubsub.publish('POST_UPDATED', {\n        postUpdated: post\n      });\n\n      return post;\n    }\n  },\n\n  Subscription: {\n    postCreated: {\n      subscribe: () => pubsub.asyncIterator(['POST_CREATED'])\n    },\n    postUpdated: {\n      subscribe: (_, { id }) => {\n        return pubsub.asyncIterator([`POST_UPDATED_${id}`]);\n      }\n    }\n  },\n\n  User: {\n    posts: async (parent) => {\n      return PostModel.findMany({\n        where: { authorId: parent.id }\n      });\n    }\n  },\n\n  Post: {\n    author: async (parent) => {\n      return userLoader.load(parent.authorId);\n    },\n    comments: async (parent) => {\n      return CommentModel.findMany({\n        where: { postId: parent.id }\n      });\n    }\n  }\n};\n\n// Apollo Server Setup\nimport { ApolloServer } from 'apollo-server';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n});\n\nconst server = new ApolloServer({\n  schema,\n  context: ({ req }) => ({\n    userId: getUserFromToken(req.headers.authorization)\n  }),\n  formatError: (error) => {\n    console.error(error);\n    return new Error('Internal server error');\n  }\n});\n```",
    "filename": "graphql-api.md",
    "tags": [
      "backend-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T13:37:34.377Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-redis-caching",
    "title": "redis-caching",
    "description": "# Redis Caching System Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Redis Caching System Instructions\n\n## Project Context\n- Distributed caching system\n- High-performance data storage\n- Pub/Sub messaging\n- Session management\n\n## Code Style Guidelines\n- Use proper key naming conventions\n- Implement proper data structures\n- Follow proper TTL patterns\n- Use proper serialization\n- Follow proper pipeline patterns\n\n## Architecture Patterns\n- Use proper cache strategies\n- Implement proper sharding\n- Follow proper replication\n- Use proper persistence\n- Implement proper clustering\n\n## Testing Requirements\n- Test cache operations\n- Validate data persistence\n- Test pub/sub messaging\n- Implement failover tests\n- Test clustering behavior\n\n## Documentation Standards\n- Document cache patterns\n- Include data structures\n- Document TTL policies\n- Maintain cluster setup\n- Include monitoring guides\n\n## Project-Specific Rules\n### Cache Patterns\n- Use proper cache invalidation\n- Implement proper cache-aside\n- Follow proper write-through\n- Use proper read-through\n- Implement proper cache warming\n\n## Common Patterns\n```typescript\n// Redis Client Setup\nimport { Redis, RedisOptions } from 'ioredis';\n\nclass CacheManager {\n  private readonly client: Redis;\n  private readonly defaultTTL: number;\n\n  constructor(config: RedisOptions, defaultTTL = 3600) {\n    this.client = new Redis(config);\n    this.defaultTTL = defaultTTL;\n  }\n\n  // Cache-Aside Pattern\n  async getOrSet<T>(\n    key: string,\n    fetcher: () => Promise<T>,\n    ttl = this.defaultTTL\n  ): Promise<T> {\n    const cached = await this.client.get(key);\n    \n    if (cached) {\n      return JSON.parse(cached);\n    }\n\n    const value = await fetcher();\n    await this.client.setex(\n      key,\n      ttl,\n      JSON.stringify(value)\n    );\n\n    return value;\n  }\n\n  // Atomic Operations\n  async increment(key: string): Promise<number> {\n    return this.client.incr(key);\n  }\n\n  // Hash Operations\n  async hashSet(\n    key: string,\n    field: string,\n    value: any,\n    ttl = this.defaultTTL\n  ): Promise<void> {\n    const multi = this.client.multi();\n    \n    multi.hset(key, field, JSON.stringify(value));\n    multi.expire(key, ttl);\n    \n    await multi.exec();\n  }\n\n  // Pub/Sub Pattern\n  async publish(channel: string, message: any): Promise<number> {\n    return this.client.publish(\n      channel,\n      JSON.stringify(message)\n    );\n  }\n\n  onMessage(\n    channel: string,\n    handler: (message: any) => void\n  ): void {\n    const subscriber = this.client.duplicate();\n    \n    subscriber.subscribe(channel);\n    subscriber.on('message', (_, message) => {\n      handler(JSON.parse(message));\n    });\n  }\n\n  // Rate Limiting Pattern\n  async isRateLimited(\n    key: string,\n    limit: number,\n    window: number\n  ): Promise<boolean> {\n    const multi = this.client.multi();\n    const now = Date.now();\n    \n    multi.zremrangebyscore(key, '-inf', now - window);\n    multi.zadd(key, now, `${now}-${crypto.randomUUID()}`);\n    multi.zcard(key);\n    multi.expire(key, Math.ceil(window / 1000));\n    \n    const [,, count] = await multi.exec();\n    return (count as number) > limit;\n  }\n\n  // Cache Invalidation Pattern\n  async invalidatePattern(pattern: string): Promise<void> {\n    const keys = await this.client.keys(pattern);\n    if (keys.length > 0) {\n      await this.client.del(...keys);\n    }\n  }\n\n  // Session Management\n  async setSession(\n    sessionId: string,\n    data: any,\n    ttl = this.defaultTTL\n  ): Promise<void> {\n    await this.client.setex(\n      `session:${sessionId}`,\n      ttl,\n      JSON.stringify(data)\n    );\n  }\n\n  async getSession(sessionId: string): Promise<any | null> {\n    const data = await this.client.get(`session:${sessionId}`);\n    return data ? JSON.parse(data) : null;\n  }\n}\n\n// Usage Example\nconst cache = new CacheManager({\n  host: 'localhost',\n  port: 6379,\n  retryStrategy: (times) => Math.min(times * 50, 2000),\n});\n\n// Cache-Aside Pattern Usage\nconst user = await cache.getOrSet(\n  `user:${userId}`,\n  () => db.findUser(userId),\n  3600\n);\n\n// Rate Limiting Usage\nconst isLimited = await cache.isRateLimited(\n  `ratelimit:${ip}`,\n  100,\n  60 * 1000 // 1 minute window\n);\n\n// Pub/Sub Usage\ncache.onMessage('notifications', (message) => {\n  console.log('Received:', message);\n});\n\nawait cache.publish('notifications', {\n  type: 'user_update',\n  userId: 123\n});\n```",
    "filename": "redis-caching.md",
    "tags": [
      "backend-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T13:37:34.377Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-vuejs",
    "title": "vuejs",
    "description": "# Vue.js 3 Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Vue.js 3 Development Instructions\n\n## Project Context\n- Vue 3 with Composition API\n- TypeScript integration\n- Single File Components\n- State management with Pinia\n\n## Code Style Guidelines\n- Use proper composition functions\n- Follow Vue style guide\n- Implement proper type definitions\n- Use proper naming conventions:\n  - Components: PascalCase\n  - Composables: use[Name]\n  - Props: camelCase\n  - Events: kebab-case\n\n## Architecture Patterns\n- Use proper component composition\n- Implement proper state management\n- Follow proper routing patterns\n- Use proper dependency injection\n- Implement proper composables\n\n## Testing Requirements\n- Unit test components\n- Test composables\n- Validate component lifecycle\n- Test component events\n- Implement integration tests\n\n## Documentation Standards\n- Document component props\n- Include composable usage\n- Document emit events\n- Maintain component API\n- Include setup instructions\n\n## Project-Specific Rules\n### Component Structure\n- Use script setup syntax\n- Implement proper refs/reactive\n- Follow proper computed patterns\n- Use proper watch patterns\n- Implement proper lifecycle\n\n## Common Patterns\n```vue\n<!-- Component Template -->\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted } from 'vue'\nimport type { PropType } from 'vue'\nimport { useUserStore } from '@/stores/user'\n\ninterface User {\n  id: string\n  name: string\n  email: string\n}\n\nconst props = defineProps<{\n  initialData?: User\n  mode: 'create' | 'edit'\n}>()\n\nconst emit = defineEmits<{\n  (e: 'save', user: User): void\n  (e: 'cancel'): void\n}>()\n\nconst userStore = useUserStore()\nconst form = ref({\n  name: props.initialData?.name ?? '',\n  email: props.initialData?.email ?? ''\n})\n\nconst isValid = computed(() => {\n  return form.value.name && form.value.email\n})\n\nconst handleSubmit = async () => {\n  if (!isValid.value) return\n  \n  const user = await userStore.saveUser({\n    ...props.initialData,\n    ...form.value\n  })\n  \n  emit('save', user)\n}\n</script>\n\n<template>\n  <form @submit.prevent=\"handleSubmit\">\n    <div class=\"form-group\">\n      <label>Name</label>\n      <input\n        v-model=\"form.name\"\n        type=\"text\"\n        :class=\"{ error: !form.name }\"\n      />\n    </div>\n    \n    <div class=\"form-group\">\n      <label>Email</label>\n      <input\n        v-model=\"form.email\"\n        type=\"email\"\n        :class=\"{ error: !form.email }\"\n      />\n    </div>\n    \n    <div class=\"actions\">\n      <button\n        type=\"submit\"\n        :disabled=\"!isValid\"\n      >\n        {{ mode === 'create' ? 'Create' : 'Update' }}\n      </button>\n      <button\n        type=\"button\"\n        @click=\"emit('cancel')\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n</template>\n\n<!-- Composable Pattern -->\nexport function useAsync<T>(\n  asyncFn: () => Promise<T>\n) {\n  const data = ref<T | null>(null)\n  const error = ref<Error | null>(null)\n  const loading = ref(false)\n\n  async function execute() {\n    loading.value = true\n    error.value = null\n    \n    try {\n      data.value = await asyncFn()\n    } catch (e) {\n      error.value = e as Error\n    } finally {\n      loading.value = false\n    }\n  }\n\n  return {\n    data,\n    error,\n    loading,\n    execute\n  }\n}\n\n<!-- Store Pattern -->\nimport { defineStore } from 'pinia'\n\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    currentUser: null as User | null,\n    users: [] as User[]\n  }),\n  \n  getters: {\n    userById: (state) => {\n      return (id: string) => state.users.find(u => u.id === id)\n    }\n  },\n  \n  actions: {\n    async fetchUsers() {\n      const response = await api.get<User[]>('/users')\n      this.users = response.data\n    },\n    \n    async saveUser(userData: Partial<User>) {\n      if (userData.id) {\n        const response = await api.put<User>(\n          `/users/${userData.id}`,\n          userData\n        )\n        \n        const index = this.users.findIndex(\n          u => u.id === userData.id\n        )\n        \n        if (index !== -1) {\n          this.users[index] = response.data\n        }\n        \n        return response.data\n      }\n      \n      const response = await api.post<User>(\n        '/users',\n        userData\n      )\n      \n      this.users.push(response.data)\n      return response.data\n    }\n  }\n})\n```",
    "filename": "vuejs.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "Vue"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T13:37:34.377Z",
      "contributor": "Community"
    }
  },
  {
    "id": "game-development-unity",
    "title": "unity",
    "description": "# Unity Game Development Instructions",
    "category": "game-development",
    "subcategories": [],
    "content": "# Unity Game Development Instructions\n\n## Project Context\n- Unity game development\n- C# scripting\n- Performance optimization\n- Cross-platform deployment\n\n## Code Style Guidelines\n- Follow C# naming conventions\n- Use proper component patterns\n- Implement proper serialization\n- Use proper event systems\n- Follow proper memory management\n\n## Architecture Patterns\n- Use proper component design\n- Implement proper state machines\n- Follow proper scene management\n- Use proper object pooling\n- Implement proper dependency injection\n\n## Testing Requirements\n- Unit test game logic\n- Test component behavior\n- Validate physics interactions\n- Implement play mode tests\n- Test performance profiles\n\n## Documentation Standards\n- Document component parameters\n- Include setup instructions\n- Document scene hierarchy\n- Maintain prefab documentation\n- Include optimization notes\n\n## Project-Specific Rules\n### Game Architecture\n- Use proper ScriptableObjects\n- Implement proper event systems\n- Follow proper input handling\n- Use proper coroutine patterns\n- Implement proper game state\n\n## Common Patterns\n```csharp\n// Component Pattern\nusing UnityEngine;\nusing System.Collections;\n\npublic class PlayerController : MonoBehaviour\n{\n    [Header(\"Movement\")]\n    [SerializeField] private float moveSpeed = 5f;\n    [SerializeField] private float jumpForce = 10f;\n    \n    [Header(\"Ground Check\")]\n    [SerializeField] private Transform groundCheck;\n    [SerializeField] private LayerMask groundLayer;\n    \n    private Rigidbody2D rb;\n    private bool isGrounded;\n    \n    private void Awake()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n    \n    private void Update()\n    {\n        CheckGround();\n        HandleInput();\n    }\n    \n    private void CheckGround()\n    {\n        isGrounded = Physics2D.OverlapCircle(\n            groundCheck.position,\n            0.2f,\n            groundLayer\n        );\n    }\n    \n    private void HandleInput()\n    {\n        float moveX = Input.GetAxisRaw(\"Horizontal\");\n        rb.velocity = new Vector2(\n            moveX * moveSpeed,\n            rb.velocity.y\n        );\n        \n        if (Input.GetButtonDown(\"Jump\") && isGrounded)\n        {\n            rb.AddForce(Vector2.up * jumpForce, ForceMode2D.Impulse);\n        }\n    }\n}\n\n// State Machine Pattern\npublic abstract class GameState\n{\n    protected GameStateMachine stateMachine;\n    \n    public virtual void Enter() {}\n    public virtual void Update() {}\n    public virtual void Exit() {}\n}\n\npublic class GameStateMachine\n{\n    private GameState currentState;\n    \n    public void Initialize(GameState startingState)\n    {\n        currentState = startingState;\n        currentState.Enter();\n    }\n    \n    public void ChangeState(GameState newState)\n    {\n        currentState.Exit();\n        currentState = newState;\n        currentState.Enter();\n    }\n    \n    public void Update()\n    {\n        currentState?.Update();\n    }\n}\n\n// Object Pool Pattern\npublic class ObjectPool : MonoBehaviour\n{\n    [System.Serializable]\n    public class Pool\n    {\n        public string tag;\n        public GameObject prefab;\n        public int size;\n    }\n    \n    public List<Pool> pools;\n    private Dictionary<string, Queue<GameObject>> poolDictionary;\n    \n    private void Start()\n    {\n        poolDictionary = new Dictionary<string, Queue<GameObject>>();\n        \n        foreach (Pool pool in pools)\n        {\n            Queue<GameObject> objectPool = new Queue<GameObject>();\n            \n            for (int i = 0; i < pool.size; i++)\n            {\n                GameObject obj = Instantiate(pool.prefab);\n                obj.SetActive(false);\n                objectPool.Enqueue(obj);\n            }\n            \n            poolDictionary.Add(pool.tag, objectPool);\n        }\n    }\n    \n    public GameObject SpawnFromPool(string tag, Vector3 position, Quaternion rotation)\n    {\n        if (!poolDictionary.ContainsKey(tag))\n        {\n            Debug.LogWarning($\"Pool with tag {tag} doesn't exist.\");\n            return null;\n        }\n        \n        GameObject objectToSpawn = poolDictionary[tag].Dequeue();\n        \n        objectToSpawn.SetActive(true);\n        objectToSpawn.transform.position = position;\n        objectToSpawn.transform.rotation = rotation;\n        \n        poolDictionary[tag].Enqueue(objectToSpawn);\n        \n        return objectToSpawn;\n    }\n}\n\n// ScriptableObject Event System\n[CreateAssetMenu(fileName = \"GameEvent\", menuName = \"Events/GameEvent\")]\npublic class GameEvent : ScriptableObject\n{\n    private List<GameEventListener> listeners = new List<GameEventListener>();\n    \n    public void Raise()\n    {\n        for (int i = listeners.Count - 1; i >= 0; i--)\n        {\n            listeners[i].OnEventRaised();\n        }\n    }\n    \n    public void RegisterListener(GameEventListener listener)\n    {\n        listeners.Add(listener);\n    }\n    \n    public void UnregisterListener(GameEventListener listener)\n    {\n        listeners.Remove(listener);\n    }\n}\n\npublic class GameEventListener : MonoBehaviour\n{\n    public GameEvent gameEvent;\n    public UnityEvent response;\n    \n    private void OnEnable()\n    {\n        gameEvent.RegisterListener(this);\n    }\n    \n    private void OnDisable()\n    {\n        gameEvent.UnregisterListener(this);\n    }\n    \n    public void OnEventRaised()\n    {\n        response.Invoke();\n    }\n}\n```",
    "filename": "unity.md",
    "tags": [
      "game-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T13:37:34.377Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-grpc-microservices",
    "title": "grpc-microservices",
    "description": "# gRPC Microservices Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# gRPC Microservices Development Instructions\n\n## Project Context\n- gRPC service development\n- Protocol Buffers\n- Service mesh integration\n- High-performance RPC\n\n## Code Style Guidelines\n- Follow Protocol Buffer style guide\n- Use proper service definitions\n- Implement proper message types\n- Follow proper package naming\n- Use proper field numbering\n\n## Architecture Patterns\n- Use proper service boundaries\n- Implement proper streaming\n- Follow proper error handling\n- Use proper interceptors\n- Implement proper load balancing\n\n## Testing Requirements\n- Test service methods\n- Validate message formats\n- Test streaming operations\n- Implement integration tests\n- Test error scenarios\n\n## Documentation Standards\n- Document service definitions\n- Include message schemas\n- Document error codes\n- Maintain API versioning\n- Include performance notes\n\n## Project-Specific Rules\n### Service Design\n- Use proper message versioning\n- Implement proper deadlines\n- Follow proper retry policies\n- Use proper metadata\n- Implement proper validation\n\n## Common Patterns\n```protobuf\n// user_service.proto\nsyntax = \"proto3\";\n\npackage user.v1;\n\nimport \"google/protobuf/timestamp.proto\";\n\nservice UserService {\n  rpc CreateUser (CreateUserRequest) returns (User);\n  rpc GetUser (GetUserRequest) returns (User);\n  rpc UpdateUser (UpdateUserRequest) returns (User);\n  rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse);\n  rpc ListUsers (ListUsersRequest) returns (stream User);\n  rpc WatchUserUpdates (WatchUserRequest) returns (stream UserUpdate);\n}\n\nmessage User {\n  string id = 1;\n  string name = 2;\n  string email = 3;\n  google.protobuf.Timestamp created_at = 4;\n  google.protobuf.Timestamp updated_at = 5;\n}\n\nmessage CreateUserRequest {\n  string name = 1;\n  string email = 2;\n}\n\nmessage GetUserRequest {\n  string id = 1;\n}\n\nmessage UpdateUserRequest {\n  string id = 1;\n  optional string name = 2;\n  optional string email = 3;\n}\n\nmessage DeleteUserRequest {\n  string id = 1;\n}\n\nmessage DeleteUserResponse {\n  bool success = 1;\n}\n\nmessage ListUsersRequest {\n  int32 page_size = 1;\n  string page_token = 2;\n}\n\nmessage WatchUserRequest {\n  string user_id = 1;\n}\n\nmessage UserUpdate {\n  string id = 1;\n  UpdateType type = 2;\n  User user = 3;\n\n  enum UpdateType {\n    UNKNOWN = 0;\n    CREATED = 1;\n    UPDATED = 2;\n    DELETED = 3;\n  }\n}\n```\n\n```typescript\n// Server Implementation\nimport { Server, ServerCredentials } from '@grpc/grpc-js';\nimport { UserServiceService } from './generated/user_service_grpc_pb';\nimport { \n  User,\n  CreateUserRequest,\n  GetUserRequest,\n  UpdateUserRequest,\n  DeleteUserRequest,\n  ListUsersRequest,\n  WatchUserRequest,\n  UserUpdate\n} from './generated/user_service_pb';\n\nclass UserServiceImpl implements UserServiceService {\n  async createUser(\n    call: ServerUnaryCall<CreateUserRequest, User>,\n    callback: sendUnaryData<User>\n  ) {\n    try {\n      const user = await this.userRepository.create({\n        name: call.request.getName(),\n        email: call.request.getEmail()\n      });\n\n      const response = new User();\n      response.setId(user.id);\n      response.setName(user.name);\n      response.setEmail(user.email);\n\n      callback(null, response);\n    } catch (error) {\n      callback({\n        code: Status.INTERNAL,\n        message: error.message\n      });\n    }\n  }\n\n  async getUser(\n    call: ServerUnaryCall<GetUserRequest, User>,\n    callback: sendUnaryData<User>\n  ) {\n    try {\n      const user = await this.userRepository.findById(\n        call.request.getId()\n      );\n\n      if (!user) {\n        callback({\n          code: Status.NOT_FOUND,\n          message: 'User not found'\n        });\n        return;\n      }\n\n      const response = new User();\n      response.setId(user.id);\n      response.setName(user.name);\n      response.setEmail(user.email);\n\n      callback(null, response);\n    } catch (error) {\n      callback({\n        code: Status.INTERNAL,\n        message: error.message\n      });\n    }\n  }\n\n  async listUsers(\n    call: ServerWritableStream<ListUsersRequest, User>\n  ) {\n    try {\n      const pageSize = call.request.getPageSize();\n      const pageToken = call.request.getPageToken();\n\n      const users = await this.userRepository.findMany({\n        take: pageSize,\n        cursor: pageToken ? { id: pageToken } : undefined\n      });\n\n      for (const user of users) {\n        const response = new User();\n        response.setId(user.id);\n        response.setName(user.name);\n        response.setEmail(user.email);\n        \n        call.write(response);\n      }\n\n      call.end();\n    } catch (error) {\n      call.emit('error', {\n        code: Status.INTERNAL,\n        message: error.message\n      });\n    }\n  }\n\n  watchUserUpdates(\n    call: ServerWritableStream<WatchUserRequest, UserUpdate>\n  ) {\n    const userId = call.request.getUserId();\n    \n    const subscription = this.userEvents.subscribe(\n      userId,\n      (event) => {\n        const update = new UserUpdate();\n        update.setId(event.userId);\n        update.setType(event.type);\n        \n        if (event.user) {\n          const user = new User();\n          user.setId(event.user.id);\n          user.setName(event.user.name);\n          user.setEmail(event.user.email);\n          update.setUser(user);\n        }\n\n        call.write(update);\n      }\n    );\n\n    call.on('cancelled', () => {\n      subscription.unsubscribe();\n    });\n  }\n}\n\n// Server Setup\nconst server = new Server();\nserver.addService(\n  UserServiceService,\n  new UserServiceImpl()\n);\n\nserver.bindAsync(\n  '0.0.0.0:50051',\n  ServerCredentials.createInsecure(),\n  (error, port) => {\n    if (error) {\n      console.error(error);\n      return;\n    }\n    server.start();\n    console.log(`Server running on port ${port}`);\n  }\n);\n```",
    "filename": "grpc-microservices.md",
    "tags": [
      "backend-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T13:37:34.372Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-laravel-rest-api",
    "title": "laravel-rest-api",
    "description": "# Laravel REST API Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Laravel REST API Development Instructions\n\n## Project Context\n- Modern Laravel API development\n- RESTful architecture\n- API authentication and authorization\n- Database optimization\n\n## Code Style Guidelines\n- Follow Laravel conventions\n- Use proper route naming\n- Implement proper middleware\n- Follow API resource patterns\n- Use proper model organization\n\n## Architecture Patterns\n- Use Repository pattern\n- Implement Service Layer\n- Follow proper API versioning\n- Use proper response formatting\n- Implement proper caching\n\n## Testing Requirements\n- Feature tests for endpoints\n- Unit tests for services\n- Test authentication flows\n- Validate response formats\n- Test rate limiting\n\n## Documentation Standards\n- Document API endpoints\n- Include authentication flows\n- Document response formats\n- Maintain Swagger/OpenAPI\n- Include setup instructions\n\n## Project-Specific Rules\n### API Design\n- Use proper status codes\n- Implement proper validation\n- Follow proper error handling\n- Use proper response structure\n- Implement proper rate limiting\n\n## Common Patterns\n```php\n// Controller Template\nclass UserController extends Controller\n{\n    private UserService $userService;\n\n    public function __construct(UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n\n    public function index(): JsonResponse\n    {\n        return response()->json(\n            UserResource::collection(\n                $this->userService->getPaginatedUsers()\n            )\n        );\n    }\n\n    public function store(StoreUserRequest $request): JsonResponse\n    {\n        $user = $this->userService->createUser($request->validated());\n        \n        return response()->json(\n            new UserResource($user),\n            Response::HTTP_CREATED\n        );\n    }\n}\n\n// Service Template\nclass UserService\n{\n    private UserRepository $repository;\n\n    public function __construct(UserRepository $repository)\n    {\n        $this->repository = $repository;\n    }\n\n    public function createUser(array $data): User\n    {\n        return DB::transaction(function () use ($data) {\n            $user = $this->repository->create($data);\n            event(new UserCreated($user));\n            return $user;\n        });\n    }\n}\n\n// Resource Template\nclass UserResource extends JsonResource\n{\n    public function toArray($request): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'created_at' => $this->created_at->toIso8601String(),\n            'updated_at' => $this->updated_at->toIso8601String(),\n        ];\n    }\n}\n\n// Request Validation\nclass StoreUserRequest extends FormRequest\n{\n    public function rules(): array\n    {\n        return [\n            'name' => ['required', 'string', 'max:255'],\n            'email' => ['required', 'email', 'unique:users'],\n            'password' => ['required', 'min:8'],\n        ];\n    }\n}\n```",
    "filename": "laravel-rest-api.md",
    "tags": [
      "backend-development",
      "Laravel"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T13:37:34.359Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-rabbitmq-messaging",
    "title": "rabbitmq-messaging",
    "description": "# RabbitMQ Messaging System Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# RabbitMQ Messaging System Instructions\n\n## Project Context\n- Message broker implementation\n- Distributed system architecture\n- Asynchronous communication\n- High availability setup\n\n## Code Style Guidelines\n- Follow proper queue naming\n- Implement proper exchange types\n- Use proper routing patterns\n- Follow proper binding rules\n- Implement proper message schemas\n\n## Architecture Patterns\n- Use proper exchange types\n- Implement proper queue patterns\n- Follow proper routing strategies\n- Use proper message patterns\n- Implement proper clustering\n\n## Testing Requirements\n- Test message publishing\n- Validate message consumption\n- Test queue bindings\n- Implement integration tests\n- Test failover scenarios\n\n## Documentation Standards\n- Document exchange topology\n- Include queue specifications\n- Document message formats\n- Maintain cluster setup\n- Include monitoring guides\n\n## Project-Specific Rules\n### Message Handling\n- Use proper acknowledgments\n- Implement proper retry logic\n- Follow proper DLX patterns\n- Use proper QoS settings\n- Implement proper persistence\n\n## Common Patterns\n```typescript\n// Publisher Template\nimport amqp from 'amqplib';\n\nclass MessagePublisher {\n  private connection: amqp.Connection;\n  private channel: amqp.Channel;\n\n  async initialize() {\n    this.connection = await amqp.connect('amqp://localhost');\n    this.channel = await this.connection.createChannel();\n    \n    await this.channel.assertExchange('orders', 'topic', {\n      durable: true\n    });\n  }\n\n  async publishMessage(routingKey: string, message: any) {\n    await this.channel.publish(\n      'orders',\n      routingKey,\n      Buffer.from(JSON.stringify(message)),\n      {\n        persistent: true,\n        messageId: crypto.randomUUID(),\n        timestamp: Date.now(),\n        headers: {\n          'content-type': 'application/json'\n        }\n      }\n    );\n  }\n\n  async close() {\n    await this.channel.close();\n    await this.connection.close();\n  }\n}\n\n// Consumer Template\nclass MessageConsumer {\n  private connection: amqp.Connection;\n  private channel: amqp.Channel;\n\n  async initialize() {\n    this.connection = await amqp.connect('amqp://localhost');\n    this.channel = await this.connection.createChannel();\n    \n    // Setup DLX\n    await this.channel.assertExchange('orders.dlx', 'direct', {\n      durable: true\n    });\n    \n    const { queue } = await this.channel.assertQueue('orders.processing', {\n      durable: true,\n      deadLetterExchange: 'orders.dlx',\n      deadLetterRoutingKey: 'orders.failed'\n    });\n\n    await this.channel.bindQueue(\n      queue,\n      'orders',\n      'order.created.*'\n    );\n\n    // Set prefetch\n    await this.channel.prefetch(1);\n  }\n\n  async consume(processor: (msg: amqp.ConsumeMessage) => Promise<void>) {\n    await this.channel.consume('orders.processing', async (msg) => {\n      if (!msg) return;\n\n      try {\n        await processor(msg);\n        this.channel.ack(msg);\n      } catch (error) {\n        // Reject with requeue=false to send to DLX\n        this.channel.reject(msg, false);\n      }\n    });\n  }\n}\n\n// Usage Example\nconst publisher = new MessagePublisher();\nawait publisher.initialize();\n\nawait publisher.publishMessage('order.created.user1', {\n  orderId: '123',\n  userId: 'user1',\n  items: [/* order items */]\n});\n\nconst consumer = new MessageConsumer();\nawait consumer.initialize();\n\nawait consumer.consume(async (msg) => {\n  const order = JSON.parse(msg.content.toString());\n  // Process order\n  await processOrder(order);\n});\n```",
    "filename": "rabbitmq-messaging.md",
    "tags": [
      "backend-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T13:37:34.359Z",
      "contributor": "Community"
    }
  },
  {
    "id": "general-development-rust-wasm",
    "title": "rust-wasm",
    "description": "# Rust WebAssembly Development Instructions",
    "category": "general-development",
    "subcategories": [],
    "content": "# Rust WebAssembly Development Instructions\n\n## Project Context\n- Rust to WebAssembly compilation\n- Browser integration\n- Performance optimization\n- Memory management\n\n## Code Style Guidelines\n- Follow Rust idioms\n- Use proper wasm-bindgen patterns\n- Implement proper error handling\n- Use proper type conversions\n- Follow proper memory patterns\n\n## Architecture Patterns\n- Use proper module structure\n- Implement proper FFI boundaries\n- Follow proper JS interop\n- Use proper state management\n- Implement proper async patterns\n\n## Testing Requirements\n- Unit test Rust code\n- Test WASM integration\n- Validate JS bindings\n- Implement browser tests\n- Test memory usage\n\n## Documentation Standards\n- Document public API\n- Include usage examples\n- Document memory patterns\n- Maintain build instructions\n- Include performance notes\n\n## Project-Specific Rules\n### WASM Integration\n- Use proper type bridges\n- Implement proper memory handling\n- Follow proper error conversion\n- Use proper async/await\n- Implement proper serialization\n\n## Common Patterns\n```rust\n// Library Definition\nuse wasm_bindgen::prelude::*;\nuse serde::{Serialize, Deserialize};\n\n#[wasm_bindgen]\npub struct Calculator {\n    value: f64,\n}\n\n#[wasm_bindgen]\nimpl Calculator {\n    #[wasm_bindgen(constructor)]\n    pub fn new() -> Calculator {\n        Calculator { value: 0.0 }\n    }\n\n    pub fn add(&mut self, x: f64) -> f64 {\n        self.value += x;\n        self.value\n    }\n\n    pub fn get_value(&self) -> f64 {\n        self.value\n    }\n}\n\n// Complex Data Types\n#[derive(Serialize, Deserialize)]\npub struct Point {\n    x: f64,\n    y: f64,\n}\n\n#[wasm_bindgen]\nimpl Point {\n    #[wasm_bindgen(constructor)]\n    pub fn new(x: f64, y: f64) -> Point {\n        Point { x, y }\n    }\n\n    pub fn distance(&self, other: &Point) -> f64 {\n        let dx = self.x - other.x;\n        let dy = self.y - other.y;\n        (dx * dx + dy * dy).sqrt()\n    }\n}\n\n// Async Operations\n#[wasm_bindgen]\npub async fn fetch_data() -> Result<JsValue, JsValue> {\n    let window = web_sys::window().unwrap();\n    let response = JsFuture::from(\n        window\n            .fetch_with_str(\"https://api.example.com/data\")\n    ).await?;\n    \n    let json = JsFuture::from(\n        response\n            .dyn_into::<web_sys::Response>()?\n            .json()?\n    ).await?;\n    \n    Ok(json)\n}\n\n// Memory Management\n#[wasm_bindgen]\npub struct Buffer {\n    data: Vec<u8>,\n}\n\n#[wasm_bindgen]\nimpl Buffer {\n    #[wasm_bindgen(constructor)]\n    pub fn new(size: usize) -> Buffer {\n        Buffer {\n            data: vec![0; size],\n        }\n    }\n\n    pub fn get_ptr(&self) -> *const u8 {\n        self.data.as_ptr()\n    }\n\n    pub fn len(&self) -> usize {\n        self.data.len()\n    }\n}\n\n// Error Handling\n#[wasm_bindgen]\npub fn process_data(input: &[u8]) -> Result<Vec<u8>, JsValue> {\n    input\n        .try_into()\n        .map_err(|e| JsValue::from_str(&e.to_string()))?\n        .process()\n        .map_err(|e| JsValue::from_str(&e.to_string()))\n}\n```\n\n```typescript\n// TypeScript Usage\nimport init, { Calculator, Point, fetch_data, Buffer } from './pkg/module';\n\nasync function main() {\n    // Initialize WASM\n    await init();\n\n    // Use Calculator\n    const calc = new Calculator();\n    console.log(calc.add(5)); // 5\n    console.log(calc.add(3)); // 8\n\n    // Use Point\n    const p1 = new Point(0, 0);\n    const p2 = new Point(3, 4);\n    console.log(p1.distance(p2)); // 5\n\n    // Use Buffer\n    const buffer = new Buffer(1024);\n    const ptr = buffer.get_ptr();\n    const len = buffer.len();\n\n    // Use with TypedArray\n    const view = new Uint8Array(\n        memory.buffer,\n        ptr,\n        len\n    );\n}\n```",
    "filename": "rust-wasm.md",
    "tags": [
      "general-development",
      "TypeScript",
      "Rust"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T13:37:34.359Z",
      "contributor": "Community"
    }
  },
  {
    "id": "devops-kubernetes-istio-gpu",
    "title": "kubernetes-istio-gpu",
    "description": "# Kubernetes with Istio and GPU Instructions",
    "category": "devops",
    "subcategories": [],
    "content": "# Kubernetes with Istio and GPU Instructions\n\n## Project Context\n- Kubernetes orchestration\n- Istio service mesh\n- GPU resource management\n- High-performance computing\n\n## Code Style Guidelines\n- Follow YAML best practices\n- Use proper resource naming\n- Implement proper labels/annotations\n- Follow proper sidecar patterns\n- Use proper GPU resource requests\n\n## Architecture Patterns\n- Implement proper mesh patterns\n- Use proper traffic management\n- Follow proper GPU scheduling\n- Use proper autoscaling\n- Implement proper security policies\n\n## Testing Requirements\n- Test service mesh configuration\n- Validate GPU allocation\n- Test traffic routing\n- Implement load testing\n- Test failover scenarios\n\n## Documentation Standards\n- Document mesh configuration\n- Include GPU requirements\n- Document traffic patterns\n- Maintain troubleshooting guides\n- Include performance metrics\n\n## Project-Specific Rules\n### Service Mesh Patterns\n- Use proper virtual services\n- Implement proper gateways\n- Follow proper retry policies\n- Use proper circuit breaking\n- Implement proper mTLS\n\n## Common Patterns\n```yaml\n# Service Mesh Configuration\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: service-routes\nspec:\n  hosts:\n  - \"api.example.com\"\n  gateways:\n  - api-gateway\n  http:\n  - match:\n    - uri:\n        prefix: \"/v1\"\n    route:\n    - destination:\n        host: api-service\n        subset: v1\n        port:\n          number: 80\n    retries:\n      attempts: 3\n      perTryTimeout: 2s\n\n# GPU Deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gpu-workload\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: gpu-app\n  template:\n    metadata:\n      labels:\n        app: gpu-app\n    spec:\n      containers:\n      - name: gpu-container\n        image: gpu-app:latest\n        resources:\n          limits:\n            nvidia.com/gpu: 1\n        volumeMounts:\n        - name: nvidia-driver\n          mountPath: /usr/local/nvidia\n      volumes:\n      - name: nvidia-driver\n        hostPath:\n          path: /usr/local/nvidia\n\n# Istio Gateway\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: api-gateway\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      credentialName: tls-secret\n    hosts:\n    - \"api.example.com\"\n\n# HPA with Custom Metrics\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: gpu-workload-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: gpu-workload\n  minReplicas: 1\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: nvidia.com/gpu\n      target:\n        type: Utilization\n        averageUtilization: 80\n```",
    "filename": "kubernetes-istio-gpu.md",
    "tags": [
      "devops"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:45:54.602Z",
      "contributor": "Community"
    }
  },
  {
    "id": "fullstack-development-htmx-flask",
    "title": "htmx-flask",
    "description": "# HTMX with Flask Development Instructions",
    "category": "fullstack-development",
    "subcategories": [],
    "content": "# HTMX with Flask Development Instructions\n\n## Project Context\n- Server-side rendering with HTMX\n- Flask framework integration\n- Progressive enhancement\n- Database integration with SQLAlchemy\n\n## Code Style Guidelines\n- Follow Flask application factory pattern\n- Use Blueprint organization\n- Implement proper route handling\n- Follow proper template structure\n- Use proper HTMX attributes\n\n## Architecture Patterns\n- Use proper view functions\n- Implement proper partial responses\n- Follow proper model structure\n- Use proper form handling\n- Implement proper error handling\n\n## Testing Requirements\n- Test view functions\n- Validate HTMX responses\n- Test database operations\n- Implement integration tests\n- Test form submissions\n\n## Documentation Standards\n- Document route endpoints\n- Include template structure\n- Document model schemas\n- Maintain setup guides\n- Include HTMX patterns\n\n## Project-Specific Rules\n### HTMX Integration\n- Use proper response headers\n- Implement proper triggers\n- Follow proper swap methods\n- Use proper validation feedback\n- Implement proper history management\n\n## Common Patterns\n```python\n# Application Factory\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\ndef create_app():\n    app = Flask(__name__)\n    app.config.from_object('config.Config')\n    \n    db.init_app(app)\n    \n    from .views import main\n    app.register_blueprint(main)\n    \n    return app\n\n# View Functions\nfrom flask import Blueprint, render_template, request\n\nmain = Blueprint('main', __name__)\n\n@main.route('/users', methods=['GET'])\ndef list_users():\n    users = User.query.all()\n    if request.headers.get('HX-Request'):\n        return render_template('partials/users.html', users=users)\n    return render_template('pages/users.html', users=users)\n\n@main.route('/users', methods=['POST'])\ndef create_user():\n    form = UserForm(request.form)\n    if form.validate():\n        user = User(\n            name=form.name.data,\n            email=form.email.data\n        )\n        db.session.add(user)\n        db.session.commit()\n        \n        return render_template('partials/user.html', user=user)\n    \n    return render_template(\n        'partials/form_errors.html',\n        errors=form.errors\n    ), 400\n\n# Templates\n\"\"\"\nbase.html\n\"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{{ title }}</title>\n    <script src=\"/static/htmx.min.js\"></script>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>\n\n\"\"\"\nusers.html\n\"\"\"\n{% extends \"base.html\" %}\n{% block content %}\n<div id=\"users-container\"\n     hx-get=\"/users\"\n     hx-trigger=\"load delay:100ms\"\n     hx-swap=\"innerHTML\">\n    <div class=\"loading\">Loading...</div>\n</div>\n\n<form hx-post=\"/users\"\n      hx-target=\"#users-container\"\n      hx-swap=\"beforeend\">\n    {{ form.csrf_token }}\n    <div>\n        {{ form.name.label }}\n        {{ form.name(hx-validate=\"true\") }}\n    </div>\n    <div>\n        {{ form.email.label }}\n        {{ form.email(hx-validate=\"true\") }}\n    </div>\n    <button type=\"submit\">Add User</button>\n</form>\n{% endblock %}\n```",
    "filename": "htmx-flask.md",
    "tags": [
      "fullstack-development",
      "Python"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:45:54.602Z",
      "contributor": "Community"
    }
  },
  {
    "id": "fullstack-development-htmx-go-fiber",
    "title": "htmx-go-fiber",
    "description": "# HTMX with Go Fiber Development Instructions",
    "category": "fullstack-development",
    "subcategories": [],
    "content": "# HTMX with Go Fiber Development Instructions\n\n## Project Context\n- Server-side rendering with HTMX\n- Go Fiber framework integration\n- Progressive enhancement\n- High-performance web applications\n\n## Code Style Guidelines\n- Use proper HTML attributes\n- Follow Go Fiber conventions\n- Implement proper HTMX patterns\n- Use proper template organization\n- Follow proper response handling\n\n## Architecture Patterns\n- Use proper route handlers\n- Implement proper partial responses\n- Follow proper template composition\n- Use proper state management\n- Implement proper validation\n\n## Testing Requirements\n- Test route handlers\n- Validate HTMX responses\n- Test template rendering\n- Implement integration tests\n- Test HTMX interactions\n\n## Documentation Standards\n- Document HTMX endpoints\n- Include template patterns\n- Document handler functions\n- Maintain setup guides\n- Include interaction flows\n\n## Project-Specific Rules\n### HTMX Integration\n- Use proper swap methods\n- Implement proper indicators\n- Follow proper validation\n- Use proper error handling\n- Implement proper history\n\n## Common Patterns\n```go\n// Handler Template\nfunc handleUsers(c *fiber.Ctx) error {\n    users, err := db.GetUsers()\n    if err != nil {\n        return c.Status(500).SendString(\"Error fetching users\")\n    }\n    \n    // Check if HTMX request\n    if c.Get(\"HX-Request\") != \"\" {\n        return c.Render(\"partials/users\", fiber.Map{\n            \"Users\": users,\n        })\n    }\n    \n    return c.Render(\"pages/users\", fiber.Map{\n        \"Users\": users,\n        \"Title\": \"Users List\",\n    })\n}\n\n// Template Pattern\n<!-- users.html -->\n<div id=\"users-list\">\n    {{range .Users}}\n    <div class=\"user-item\"\n         hx-get=\"/users/{{.ID}}\"\n         hx-trigger=\"click\"\n         hx-target=\"#user-detail\"\n         hx-swap=\"innerHTML\">\n        <h3>{{.Name}}</h3>\n    </div>\n    {{end}}\n</div>\n\n// Form Handler\nfunc handleCreateUser(c *fiber.Ctx) error {\n    user := new(User)\n    if err := c.BodyParser(user); err != nil {\n        return c.Status(400).SendString(\"Invalid input\")\n    }\n    \n    if err := user.Validate(); err != nil {\n        return c.Render(\"partials/user-form\", fiber.Map{\n            \"User\":   user,\n            \"Errors\": err,\n        })\n    }\n    \n    if err := db.CreateUser(user); err != nil {\n        return c.Status(500).SendString(\"Error creating user\")\n    }\n    \n    return c.Render(\"partials/user-item\", fiber.Map{\n        \"User\": user,\n    })\n}\n\n// Router Setup\napp := fiber.New()\n\napp.Get(\"/users\", handleUsers)\napp.Post(\"/users\", handleCreateUser)\napp.Get(\"/users/:id\", handleUserDetail)\n\n// Middleware for HTMX specific logic\nfunc htmxMiddleware(c *fiber.Ctx) error {\n    if c.Get(\"HX-Request\") != \"\" {\n        // Handle HTMX specific behavior\n        if c.Get(\"HX-Boosted\") != \"\" {\n            // Handle boosted requests\n        }\n    }\n    return c.Next()\n}\n```",
    "filename": "htmx-go-fiber.md",
    "tags": [
      "fullstack-development",
      "Go"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:45:54.602Z",
      "contributor": "Community"
    }
  },
  {
    "id": "game-development-ascii-simulation",
    "title": "ascii-simulation",
    "description": "# ASCII Simulation Game Development Instructions",
    "category": "game-development",
    "subcategories": [],
    "content": "# ASCII Simulation Game Development Instructions\n\n## Project Context\n- Terminal-based game development\n- ASCII/Unicode graphics\n- Real-time simulation\n- Cross-platform terminal compatibility\n\n## Code Style Guidelines\n- Use proper character encoding\n- Follow terminal color standards\n- Implement proper input buffering\n- Use proper screen clearing\n- Follow proper refresh rates\n\n## Architecture Patterns\n- Use proper game loop\n- Implement proper entity system\n- Follow proper rendering pipeline\n- Use proper input handling\n- Implement proper state management\n\n## Testing Requirements\n- Test rendering output\n- Validate input handling\n- Test game logic\n- Implement performance tests\n- Test terminal compatibility\n\n## Documentation Standards\n- Document control schemes\n- Include terminal requirements\n- Document game mechanics\n- Maintain performance notes\n- Include setup instructions\n\n## Project-Specific Rules\n### Terminal Handling\n- Use proper escape sequences\n- Implement proper buffering\n- Follow proper refresh timing\n- Use proper color codes\n- Implement proper input queuing\n\n## Common Patterns\n```typescript\n// Game Engine Template\nclass ASCIIEngine {\n  private buffer: string[][] = [];\n  private entities: Entity[] = [];\n  private lastFrame: number = 0;\n  \n  constructor(private width: number, private height: number) {\n    this.initBuffer();\n  }\n  \n  private initBuffer() {\n    this.buffer = Array(this.height)\n      .fill(0)\n      .map(() => Array(this.width).fill(' '));\n  }\n  \n  draw(x: number, y: number, char: string) {\n    if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n      this.buffer[y][x] = char;\n    }\n  }\n  \n  render() {\n    // Clear screen\n    console.clear();\n    // Render frame\n    console.log(\n      this.buffer\n        .map(row => row.join(''))\n        .join('\\n')\n    );\n  }\n}\n\n// Entity System\ninterface Entity {\n  x: number;\n  y: number;\n  char: string;\n  update: () => void;\n}\n\n// Game Loop\nclass Game {\n  private engine: ASCIIEngine;\n  private running: boolean = false;\n  \n  constructor() {\n    this.engine = new ASCIIEngine(80, 24);\n  }\n  \n  start() {\n    this.running = true;\n    this.loop();\n  }\n  \n  private loop() {\n    if (!this.running) return;\n    \n    this.update();\n    this.render();\n    \n    // Maintain consistent frame rate\n    setTimeout(() => this.loop(), 1000 / 30);\n  }\n  \n  private update() {\n    // Update game state\n  }\n  \n  private render() {\n    this.engine.render();\n  }\n}\n\n// Input Handler\nclass InputHandler {\n  private keyStates: Map<string, boolean> = new Map();\n  \n  constructor() {\n    process.stdin.setRawMode(true);\n    process.stdin.on('data', (data) => {\n      const key = data.toString();\n      this.keyStates.set(key, true);\n      \n      // Exit on q\n      if (key === 'q') process.exit(0);\n    });\n  }\n  \n  isKeyPressed(key: string): boolean {\n    return this.keyStates.get(key) || false;\n  }\n  \n  clearKeys() {\n    this.keyStates.clear();\n  }\n}\n```",
    "filename": "ascii-simulation.md",
    "tags": [
      "game-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:45:54.602Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-nextjs-tailwind-seo",
    "title": "nextjs-tailwind-seo",
    "description": "# Next.js with Tailwind and SEO Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Next.js with Tailwind and SEO Instructions\n\n## Project Context\n- Next.js 14+ development\n- Tailwind CSS integration\n- SEO optimization focus\n- Performance-first approach\n\n## Code Style Guidelines\n- Use TypeScript for type safety\n- Follow Next.js file-based routing conventions\n- Implement proper metadata management\n- Use proper Tailwind class organization\n- Follow consistent component structure\n\n## Architecture Patterns\n- Use App Router architecture\n- Implement proper Server Components\n- Follow proper data fetching patterns\n- Use proper loading/error states\n- Implement proper route handlers\n\n## Testing Requirements\n- Jest/React Testing Library for components\n- E2E testing with Playwright/Cypress\n- Test SEO metadata generation\n- Validate performance metrics\n- Test server-side functions\n\n## Documentation Standards\n- Document page/layout relationships\n- Include component API documentation\n- Document SEO strategies\n- Maintain README with setup steps\n- Document environment configuration\n\n## Project-Specific Rules\n### SEO Optimization\n- Implement proper metadata\n- Use semantic HTML structure\n- Follow proper image optimization\n- Implement proper sitemap generation\n- Use proper canonical URLs\n\n### Performance\n- Use proper image optimization\n- Implement proper font loading\n- Follow proper caching strategies\n- Use proper code splitting\n- Implement proper asset optimization\n\n## Common Patterns\n```typescript\n// Page Template with Metadata\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Page Title',\n  description: 'Page description',\n  openGraph: {\n    title: 'Page Title',\n    description: 'Page description',\n    images: ['/og-image.jpg'],\n  },\n}\n\nexport default function Page() {\n  return (\n    <main className=\"container mx-auto px-4\">\n      <h1 className=\"text-4xl font-bold\">Content</h1>\n    </main>\n  )\n}\n\n// Server Component with Data Fetching\nasync function getData() {\n  const res = await fetch('https://api.example.com/data')\n  if (!res.ok) throw new Error('Failed to fetch data')\n  return res.json()\n}\n\nexport default async function AsyncComponent() {\n  const data = await getData()\n  \n  return (\n    <div className=\"grid gap-4\">\n      {data.map(item => (\n        <article key={item.id} className=\"p-4 rounded-lg shadow\">\n          {item.content}\n        </article>\n      ))}\n    </div>\n  )\n}\n```",
    "filename": "nextjs-tailwind-seo.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "React"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:45:54.569Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-elixir-phoenix",
    "title": "elixir-phoenix",
    "description": "# Elixir and Phoenix Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Elixir and Phoenix Development Instructions\n\n## Project Context\n- Functional programming with Elixir\n- Phoenix web framework\n- LiveView for real-time features\n- Distributed systems architecture\n\n## Code Style Guidelines\n- Follow Elixir style guide\n- Use proper module documentation\n- Implement proper type specs\n- Follow proper naming conventions\n- Use pattern matching effectively\n\n## Architecture Patterns\n- Implement proper supervision trees\n- Use proper GenServer patterns\n- Follow proper context organization\n- Implement proper channel usage\n- Use proper LiveView patterns\n\n## Testing Requirements\n- Write ExUnit tests\n- Test async operations\n- Implement proper mocks\n- Test LiveView interactions\n- Validate error scenarios\n\n## Documentation Standards\n- Use proper module docs\n- Include type specs\n- Document public functions\n- Maintain changelog\n- Include setup instructions\n\n## Project-Specific Rules\n### Phoenix Patterns\n- Use proper context boundaries\n- Implement proper schemas\n- Follow proper routing\n- Use proper form handling\n- Implement proper authentication\n\n## Common Patterns\n```elixir\n# Context Module Template\ndefmodule MyApp.Accounts do\n  @moduledoc \"\"\"\n  The Accounts context.\n  \"\"\"\n  \n  import Ecto.Query\n  alias MyApp.Repo\n  alias MyApp.Accounts.User\n  \n  @doc \"\"\"\n  Returns a user by id or nil if not found.\n  \"\"\"\n  @spec get_user(integer()) :: User.t() | nil\n  def get_user(id) do\n    Repo.get(User, id)\n  end\nend\n\n# LiveView Template\ndefmodule MyAppWeb.UserLive.Index do\n  use MyAppWeb, :live_view\n  \n  @impl true\n  def mount(_params, _session, socket) do\n    {:ok, assign(socket, users: list_users())}\n  end\n  \n  @impl true\n  def handle_event(\"delete\", %{\"id\" => id}, socket) do\n    user = Accounts.get_user!(id)\n    {:ok, _} = Accounts.delete_user(user)\n    \n    {:noreply, assign(socket, users: list_users())}\n  end\n  \n  defp list_users do\n    Accounts.list_users()\n  end\nend\n```",
    "filename": "elixir-phoenix.md",
    "tags": [
      "backend-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:14:44.767Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-go",
    "title": "go",
    "description": "# Go Backend Development Instructions",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Go Backend Development Instructions\n\n## Project Context\n- High-performance backend services\n- RESTful API development\n- Scalable architecture\n- Concurrent programming patterns\n\n## Code Style Guidelines\n- Follow Go official style guide\n- Use proper error handling patterns\n- Implement interface-based design\n- Follow proper package organization\n- Use clear naming conventions:\n  - Interface names: er suffix (Reader, Writer)\n  - Error variables: ErrXxx\n  - Package names: single, lowercase word\n\n## Architecture Patterns\n- Use proper middleware chains\n- Implement clean architecture\n- Follow dependency injection\n- Use proper context handling\n- Implement proper routing patterns\n\n## Testing Requirements\n- Write table-driven tests\n- Use proper benchmarks\n- Test concurrent operations\n- Implement integration tests\n- Use proper mocking patterns\n\n## Documentation Standards\n- Follow godoc conventions\n- Document exported symbols\n- Include package documentation\n- Provide usage examples\n- Document error conditions\n\n## Project-Specific Rules\n### Code Organization\n- One package per directory\n- Separate interfaces from implementation\n- Use proper error types\n- Follow proper logging patterns\n- Implement proper shutdown handling\n\n## Common Patterns\n```go\n// Handler Template\ntype Handler struct {\n    service Service\n    logger  *log.Logger\n}\n\nfunc NewHandler(s Service, l *log.Logger) *Handler {\n    return &Handler{\n        service: s,\n        logger:  l,\n    }\n}\n\nfunc (h *Handler) Handle(w http.ResponseWriter, r *http.Request) {\n    ctx := r.Context()\n    \n    // Error handling pattern\n    result, err := h.service.Process(ctx)\n    if err != nil {\n        h.logger.Printf(\"error: %v\", err)\n        http.Error(w, \"Internal error\", http.StatusInternalServerError)\n        return\n    }\n    \n    // Response handling\n    json.NewEncoder(w).Encode(result)\n}\n\n// Middleware Template\nfunc LogMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        start := time.Now()\n        next.ServeHTTP(w, r)\n        log.Printf(\"Request processed in %v\", time.Since(start))\n    })\n}\n```",
    "filename": "go.md",
    "tags": [
      "backend-development",
      "Go"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:14:44.753Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-astro",
    "title": "astro",
    "description": "# Astro Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# Astro Development Instructions\n\n## Project Context\n- Static site generation with Astro\n- Performance-first approach\n- TypeScript integration\n- Island architecture\n\n## Code Style Guidelines\n- Follow consistent component structure\n- Use proper TypeScript types\n- Implement proper frontmatter usage\n- Follow Astro component patterns\n- Maintain clean import statements\n\n## Architecture Patterns\n- Use proper static/dynamic components\n- Implement proper data fetching\n- Follow proper routing patterns\n- Use proper integration patterns\n- Implement proper build optimization\n\n## Testing Requirements\n- Unit test components\n- Test static generation\n- Validate build output\n- Test integration points\n- Validate performance metrics\n\n## Documentation Standards\n- Document component usage\n- Include integration guides\n- Document build process\n- Maintain content structure\n- Document configuration options\n\n## Project-Specific Rules\n### Component Structure\n- Use .astro extension for components\n- Implement proper client directives\n- Follow proper hydration patterns\n- Use proper import aliases\n- Implement proper SSR patterns\n\n## Common Patterns\n```astro\n---\n// Component Template\ninterface Props {\n  title: string;\n  description?: string;\n}\n\nconst { title, description = 'Default description' } = Astro.props;\n---\n\n<div class=\"component\">\n  <h1>{title}</h1>\n  {description && <p>{description}</p>}\n</div>\n\n<style>\n  .component {\n    /* Component styles */\n  }\n</style>\n\n<script>\n  // Client-side JavaScript\n</script>\n```",
    "filename": "astro.md",
    "tags": [
      "frontend-development",
      "JavaScript",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:14:44.753Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-htmx",
    "title": "htmx",
    "description": "# HTMX Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# HTMX Development Instructions\n\n## Project Context\n- Server-driven UI development\n- Progressive enhancement\n- HTML-first approach\n- Backend integration patterns\n\n## Code Style Guidelines\n- Use semantic HTML attributes\n- Follow proper HTMX attribute patterns\n- Implement proper event handlers\n- Use proper CSS triggers\n- Follow progressive enhancement patterns\n\n## Architecture Patterns\n- Use proper server endpoints\n- Implement proper partial updates\n- Follow proper state management\n- Use proper history management\n- Implement proper form handling\n\n## Testing Requirements\n- Test HTMX interactions\n- Validate server responses\n- Test event handling\n- Implement end-to-end tests\n- Test JavaScript extensions\n\n## Documentation Standards\n- Document HTMX attributes\n- Include interaction flows\n- Document server endpoints\n- Maintain event documentation\n- Document extension usage\n\n## Project-Specific Rules\n### Integration Patterns\n- Use proper swap methods\n- Implement proper indicators\n- Follow proper boosting patterns\n- Use proper validation feedback\n- Implement proper error handling\n\n## Common Patterns\n```html\n<!-- Component Template -->\n<div hx-get=\"/api/data\" \n     hx-trigger=\"load\"\n     hx-target=\"#result\"\n     hx-indicator=\"#loading\">\n  \n  <div id=\"loading\" class=\"htmx-indicator\">\n    Loading...\n  </div>\n  \n  <div id=\"result\">\n    <!-- Content will be swapped here -->\n  </div>\n</div>\n\n<!-- Form Template -->\n<form hx-post=\"/api/submit\"\n      hx-swap=\"outerHTML\"\n      hx-validate=\"true\">\n  <input name=\"field\" \n         required\n         hx-get=\"/api/validate\"\n         hx-trigger=\"change\">\n  <button type=\"submit\">Submit</button>\n</form>\n```",
    "filename": "htmx.md",
    "tags": [
      "frontend-development",
      "JavaScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:14:44.753Z",
      "contributor": "Community"
    }
  },
  {
    "id": "fullstack-development-full-stack-patterns",
    "title": "full-stack-patterns",
    "description": "# Full-Stack Development Patterns",
    "category": "fullstack-development",
    "subcategories": [],
    "content": "# Full-Stack Development Patterns\n\n## Project Context\n- Modern web application architecture\n- API integration patterns\n- State management\n- Full-stack type safety\n\n## Code Style Guidelines\n- Maintain consistent patterns across stack\n- Share types between frontend and backend\n- Follow API naming conventions\n- Implement proper error handling\n- Use consistent formatting\n\n## Architecture Patterns\n- Implement proper layered architecture\n- Use appropriate state management\n- Follow API design patterns\n- Implement proper caching\n- Use proper authentication flows\n\n## Testing Requirements\n- Test full request/response cycle\n- Implement E2E testing\n- Test authentication flows\n- Validate data consistency\n- Test error scenarios\n\n## Documentation Standards\n- Document API endpoints\n- Include authentication flows\n- Document deployment process\n- Maintain architecture diagrams\n- Include setup instructions\n\n## Project-Specific Rules\n- Use appropriate error handling\n- Implement proper validation\n- Follow security best practices\n- Use proper logging\n- Implement proper monitoring\n\n## Common Patterns\n```typescript\n// API Route Pattern\ninterface ApiResponse<T> {\n  data?: T;\n  error?: {\n    message: string;\n    code: string;\n  };\n  status: number;\n}\n\n// Frontend API Client\nclass ApiClient {\n  async request<T>(endpoint: string, options?: RequestInit): Promise<ApiResponse<T>> {\n    try {\n      const response = await fetch(`/api/${endpoint}`, {\n        ...options,\n        headers: {\n          'Content-Type': 'application/json',\n          ...options?.headers,\n        },\n      });\n      \n      const data = await response.json();\n      return {\n        data,\n        status: response.status,\n      };\n    } catch (error) {\n      return {\n        error: {\n          message: error.message,\n          code: 'NETWORK_ERROR',\n        },\n        status: 500,\n      };\n    }\n  }\n}\n\n// Backend Route Handler\nasync function handleRequest<T>(\n  handler: () => Promise<T>\n): Promise<ApiResponse<T>> {\n  try {\n    const data = await handler();\n    return { data, status: 200 };\n  } catch (error) {\n    return {\n      error: {\n        message: error.message,\n        code: 'SERVER_ERROR',\n      },\n      status: 500,\n    };\n  }\n}\n```",
    "filename": "full-stack-patterns.md",
    "tags": [
      "fullstack-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:00:21.085Z",
      "contributor": "Community"
    }
  },
  {
    "id": "database-database-patterns",
    "title": "database-patterns",
    "description": "# Database Development Instructions",
    "category": "database",
    "subcategories": [],
    "content": "# Database Development Instructions\n\n## Project Context\n- SQL and NoSQL databases\n- Data modeling and schema design\n- Query optimization\n- Database migrations\n\n## Code Style Guidelines\n- Use consistent naming conventions\n- Follow proper indexing patterns\n- Implement proper constraints\n- Use appropriate data types\n- Follow normalization rules\n\n## Architecture Patterns\n- Implement proper sharding\n- Use appropriate replication\n- Follow ACID principles\n- Implement proper caching\n- Use proper transaction patterns\n\n## Testing Requirements\n- Test database migrations\n- Implement integration tests\n- Test performance scenarios\n- Validate data integrity\n- Test backup/restore procedures\n\n## Documentation Standards\n- Document schema design\n- Include ER diagrams\n- Document indexes\n- Maintain migration history\n- Document optimization strategies\n\n## Project-Specific Rules\n- Follow security best practices\n- Implement proper backups\n- Use proper connection pooling\n- Follow monitoring practices\n- Implement proper logging\n\n## Common Patterns\n```sql\n-- Table Creation Template\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    CONSTRAINT valid_email CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$')\n);\n\n-- Index Template\nCREATE INDEX idx_users_email ON users(email);\n\n-- Migration Template\nBEGIN;\n    -- Add new column\n    ALTER TABLE users ADD COLUMN status VARCHAR(50);\n    \n    -- Add constraint\n    ALTER TABLE users \n    ADD CONSTRAINT valid_status \n    CHECK (status IN ('active', 'inactive', 'suspended'));\nCOMMIT;\n```",
    "filename": "database-patterns.md",
    "tags": [
      "database"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:00:21.081Z",
      "contributor": "Community"
    }
  },
  {
    "id": "general-development-code-quality",
    "title": "code-quality",
    "description": "# Code Quality Best Practices",
    "category": "general-development",
    "subcategories": [],
    "content": "# Code Quality Best Practices\n\n## Project Context\n- Clean code principles\n- SOLID principles\n- Design patterns\n- Code optimization\n\n## Code Style Guidelines\n- Follow consistent naming conventions\n- Use meaningful variable names\n- Keep functions small and focused\n- Maintain proper indentation\n- Write self-documenting code\n\n## Architecture Patterns\n- Follow separation of concerns\n- Implement proper error handling\n- Use dependency injection\n- Follow interface segregation\n- Maintain loose coupling\n\n## Testing Requirements\n- Write unit tests for new code\n- Follow TDD when applicable\n- Test edge cases\n- Validate error scenarios\n- Maintain test coverage\n\n## Documentation Standards\n- Write clear documentation\n- Include code examples\n- Document public APIs\n- Maintain changelogs\n- Document architecture decisions\n\n## Project-Specific Rules\n- Use appropriate design patterns\n- Follow code review guidelines\n- Implement proper logging\n- Use proper error handling\n- Follow security guidelines\n\n## Common Patterns\n```typescript\n// Interface Segregation Example\ninterface Readable {\n    read(): string;\n}\n\ninterface Writable {\n    write(data: string): void;\n}\n\n// Single Responsibility Example\nclass Logger {\n    private logFile: string;\n\n    constructor(logFile: string) {\n        this.logFile = logFile;\n    }\n\n    log(message: string): void {\n        // Single responsibility: logging\n    }\n}\n\n// Dependency Injection Example\nclass Service {\n    constructor(\n        private readonly repository: Repository,\n        private readonly logger: Logger\n    ) {}\n\n    async process(data: unknown): Promise<void> {\n        try {\n            await this.repository.save(data);\n            this.logger.log('Data processed successfully');\n        } catch (error) {\n            this.logger.log(`Error: ${error.message}`);\n            throw error;\n        }\n    }\n}\n```",
    "filename": "code-quality.md",
    "tags": [
      "general-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:00:21.081Z",
      "contributor": "Community"
    }
  },
  {
    "id": "testing-testing-practices",
    "title": "testing-practices",
    "description": "# Testing Best Practices Instructions",
    "category": "testing",
    "subcategories": [],
    "content": "# Testing Best Practices Instructions\n\n## Project Context\n- Cross-framework testing strategies\n- Unit, integration, and E2E testing\n- Test-driven development (TDD)\n- Continuous Integration testing\n\n## Code Style Guidelines\n- Follow Arrange-Act-Assert pattern\n- Use descriptive test names\n- Implement proper test isolation\n- Follow DRY principles in tests\n- Maintain consistent test structure\n\n## Architecture Patterns\n- Implement proper test pyramids\n- Use appropriate test doubles\n- Follow proper fixture patterns\n- Implement proper test suites\n- Use proper test categories\n\n## Testing Requirements\n- Maintain minimum coverage thresholds\n- Test edge cases thoroughly\n- Implement proper mocking\n- Test asynchronous code properly\n- Validate error scenarios\n\n## Documentation Standards\n- Document test scenarios\n- Include setup instructions\n- Document test data sources\n- Maintain coverage reports\n- Document test conventions\n\n## Project-Specific Rules\n- Use appropriate testing frameworks\n- Implement proper CI integration\n- Follow proper cleanup patterns\n- Use appropriate assertions\n- Implement proper test tagging\n\n## Common Patterns\n```typescript\n// Jest Unit Test Template\ndescribe('Component/Function', () => {\n  beforeEach(() => {\n    // Setup\n  });\n\n  afterEach(() => {\n    // Cleanup\n  });\n\n  it('should handle successful scenario', async () => {\n    // Arrange\n    const input = 'test';\n\n    // Act\n    const result = await functionUnderTest(input);\n\n    // Assert\n    expect(result).toBe(expected);\n  });\n\n  it('should handle error scenario', async () => {\n    // Arrange\n    const invalidInput = null;\n\n    // Act & Assert\n    await expect(\n      functionUnderTest(invalidInput)\n    ).rejects.toThrow();\n  });\n});\n\n// E2E Test Template\ndescribe('E2E Flow', () => {\n  test('complete user journey', async () => {\n    // Setup\n    await setupTestEnvironment();\n\n    // Execute flow\n    await performUserAction();\n\n    // Validate\n    const result = await getResult();\n    expect(result).toMatchSnapshot();\n\n    // Cleanup\n    await cleanupTestEnvironment();\n  });\n});\n```",
    "filename": "testing-practices.md",
    "tags": [
      "testing",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:00:21.081Z",
      "contributor": "Community"
    }
  },
  {
    "id": "ai-ml-pytorch-sklearn",
    "title": "pytorch-sklearn",
    "description": "# Machine Learning Development Instructions",
    "category": "ai-ml",
    "subcategories": [],
    "content": "# Machine Learning Development Instructions\n\n## Project Context\n- PyTorch and scikit-learn development\n- Data preprocessing and analysis\n- Model training and evaluation\n- MLOps best practices\n\n## Code Style Guidelines\n- Use type hints for Python code\n- Follow NumPy docstring format\n- Implement proper error handling\n- Use proper variable naming for tensors\n- Follow PEP 8 conventions\n\n## Architecture Patterns\n- Implement proper data pipelines\n- Use proper model architectures\n- Follow experiment tracking patterns\n- Implement proper model serving\n- Use proper validation strategies\n\n## Testing Requirements\n- Test data preprocessing\n- Validate model performance\n- Test inference pipelines\n- Implement integration tests\n- Validate model outputs\n\n## Documentation Standards\n- Document model architecture\n- Include experiment results\n- Document data preprocessing\n- Maintain model cards\n- Include usage examples\n\n## Project-Specific Rules\n- Follow reproducibility practices\n- Implement proper logging\n- Use proper versioning\n- Follow proper GPU utilization\n- Implement proper checkpointing\n\n## Common Patterns\n```python\n# Model Template\nimport torch\nimport torch.nn as nn\nfrom typing import Tuple\n\nclass ModelArchitecture(nn.Module):\n    def __init__(self, input_dim: int, hidden_dim: int):\n        super().__init__()\n        self.layer = nn.Linear(input_dim, hidden_dim)\n        \n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        return self.layer(x)\n\n# Training Loop Template\ndef train_model(\n    model: nn.Module,\n    dataloader: torch.utils.data.DataLoader,\n    criterion: nn.Module,\n    optimizer: torch.optim.Optimizer\n) -> Tuple[float, float]:\n    model.train()\n    total_loss = 0.0\n    \n    for batch in dataloader:\n        optimizer.zero_grad()\n        outputs = model(batch)\n        loss = criterion(outputs)\n        loss.backward()\n        optimizer.step()\n        total_loss += loss.item()\n    \n    return total_loss / len(dataloader)\n```",
    "filename": "pytorch-sklearn.md",
    "tags": [
      "ai-ml",
      "Python"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:00:21.075Z",
      "contributor": "Community"
    }
  },
  {
    "id": "devops-kubernetes",
    "title": "kubernetes",
    "description": "# Kubernetes Development Instructions",
    "category": "devops",
    "subcategories": [],
    "content": "# Kubernetes Development Instructions\n\n## Project Context\n- Container orchestration\n- Microservices architecture\n- Cloud-native applications\n- Infrastructure as Code (IaC)\n\n## Code Style Guidelines\n- Use YAML for resource definitions\n- Follow proper indentation\n- Implement resource naming conventions\n- Use labels and annotations effectively\n- Follow proper versioning\n\n## Architecture Patterns\n- Implement proper pod design\n- Use appropriate service types\n- Follow deployment strategies\n- Implement proper networking\n- Use proper storage patterns\n\n## Testing Requirements\n- Test manifest validation\n- Implement integration tests\n- Use proper linting\n- Test deployment strategies\n- Validate resource constraints\n\n## Documentation Standards\n- Document resource purposes\n- Include deployment guides\n- Document configuration options\n- Maintain troubleshooting guides\n- Include architecture diagrams\n\n## Project-Specific Rules\n- Follow security best practices\n- Implement proper monitoring\n- Use resource limits\n- Follow namespace conventions\n- Implement proper backup strategies\n\n## Common Patterns\n```yaml\n# Deployment Template\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-deployment\n  labels:\n    app: myapp\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:latest\n        resources:\n          limits:\n            cpu: \"1\"\n            memory: \"512Mi\"\n          requests:\n            cpu: \"0.5\"\n            memory: \"256Mi\"\n\n# Service Template\napiVersion: v1\nkind: Service\nmetadata:\n  name: app-service\nspec:\n  selector:\n    app: myapp\n  ports:\n  - port: 80\n    targetPort: 8080\n  type: ClusterIP\n```",
    "filename": "kubernetes.md",
    "tags": [
      "devops"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:00:21.075Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-fastapi",
    "title": "fastapi",
    "description": "# FastAPI Development Guidelines",
    "category": "backend-development",
    "subcategories": [],
    "content": "# FastAPI Development Guidelines\n\n## Project Context\n- Python-based API development with FastAPI\n- Focus on scalable, performant API design\n- Asynchronous-first approach\n- Using Pydantic v2 and SQLAlchemy 2.0\n\n## Code Style Guidelines\n- Use functional, declarative programming style\n- Follow Python naming conventions (lowercase with underscores)\n- Type hints required for all function signatures\n- Use descriptive variable names with auxiliary verbs\n- Implement RORO (Receive an Object, Return an Object) pattern\n- Early returns for error conditions\n- Avoid unnecessary else statements\n\n## Architecture Patterns\n- Functional components over classes\n- Clear route organization and modular structure\n- File structure hierarchy:\n  - Exported router\n  - Sub-routes\n  - Utilities\n  - Static content\n  - Types (models, schemas)\n- Dependency injection for state management\n\n## Testing Requirements\n- Unit tests for routes and utilities\n- Performance testing for response times\n- Edge case coverage\n- Error handling validation\n\n## Documentation Standards\n- Clear route documentation\n- Response schema documentation\n- Error handling documentation\n- Performance considerations documentation\n\n## Project-Specific Rules\n### Error Handling\n- Handle errors at function start\n- Use guard clauses\n- Custom error types/factories\n- HTTPException for expected errors\n- Middleware for unexpected errors\n\n### Performance Optimization\n- Async operations for I/O-bound tasks\n- Caching strategies implementation\n- Lazy loading for large datasets\n- Minimize blocking operations\n- Use FastAPI's built-in performance features\n\n### FastAPI Specific\n- Use Pydantic models for validation\n- Implement proper middleware\n- Use lifespan context managers\n- Optimize route definitions\n- Follow FastAPI's dependency injection patterns\n\n## Common Patterns\n```python\n# Router Template\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom pydantic import BaseModel\n\nrouter = APIRouter(prefix=\"/items\", tags=[\"items\"])\n\nclass ItemModel(BaseModel):\n    name: str\n    description: str | None = None\n\n@router.get(\"/{item_id}\")\nasync def get_item(item_id: int):\n    try:\n        # Logic here\n        return {\"item_id\": item_id}\n    except Exception as e:\n        raise HTTPException(status_code=404, detail=str(e))\n\n# Service Template\nclass ItemService:\n    async def get_item(self, item_id: int):\n        # Service logic\n        pass",
    "filename": "fastapi.md",
    "tags": [
      "backend-development",
      "Python"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:00:21.064Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-react",
    "title": "react",
    "description": "# React Development Instructions",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# React Development Instructions\n\n## Project Context\n- Modern React development using functional components and hooks\n- TypeScript-first approach for type safety\n- Component-driven development with reusability in focus\n\n## Code Style Guidelines\n- Use functional components over class components\n- Implement proper prop typing with TypeScript\n- Follow React hooks rules strictly\n- Use destructuring for props and state\n- Maintain consistent naming conventions:\n  - Components: PascalCase\n  - Hooks: useCustomHookName\n  - Files: ComponentName.tsx\n  - Styles: ComponentName.styles.ts\n\n## Architecture Patterns\n- Follow Atomic Design principles\n- Implement custom hooks for reusable logic\n- Use Context API for global state management\n- Implement proper error boundaries\n- Follow container/presenter pattern where applicable\n\n## Testing Requirements\n- Write unit tests for hooks and utilities\n- Implement component testing with React Testing Library\n- Follow arrange-act-assert pattern\n- Test error states and edge cases\n- Maintain minimum 80% coverage\n\n## Documentation Standards\n- Document complex components with JSDoc\n- Include prop-types or interface documentation\n- Add usage examples for reusable components\n- Document state management patterns\n- Include component storybook documentation\n\n## Project-Specific Rules\n- Prefer controlled components\n- Implement proper React.memo usage\n- Use React.Suspense for code-splitting\n- Follow accessibility guidelines\n- Implement proper error handling patterns\n\n## Common Patterns\n```typescript\n// Component Template\nimport React from 'react';\n\ninterface Props {\n  title: string;\n  children: React.ReactNode;\n}\n\nexport const Component: React.FC<Props> = ({ title, children }) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n};\n\n// Custom Hook Template\nexport const useCustomHook = (initialValue: string) => {\n  const [value, setValue] = React.useState(initialValue);\n  \n  React.useEffect(() => {\n    // Effect logic\n  }, [value]);\n\n  return { value, setValue };\n};\n```",
    "filename": "react.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "React"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:00:21.064Z",
      "contributor": "Community"
    }
  },
  {
    "id": "fullstack-development-nextjs",
    "title": "nextjs",
    "description": "# Next.js Development Instructions",
    "category": "fullstack-development",
    "subcategories": [],
    "content": "# Next.js Development Instructions\n\n## Project Context\n- Next.js 14+ with App Router\n- Full-stack development with Server Components\n- SEO-optimized applications\n- TypeScript and Tailwind CSS integration\n\n## Code Style Guidelines\n- Follow Server/Client Component patterns\n- Use proper route segment config options\n- Implement proper metadata management\n- Follow file-system based routing conventions\n- Maintain consistent data fetching patterns\n\n## Architecture Patterns\n- Implement proper route handlers\n- Use server actions for form submissions\n- Follow proper caching strategies\n- Implement streaming and suspense patterns\n- Use proper loading and error states\n\n## Testing Requirements\n- Unit test client components\n- Integration tests for API routes\n- E2E testing with Playwright/Cypress\n- Test server actions\n- Validate metadata generation\n\n## Documentation Standards\n- Document page/layout relationships\n- Include API route specifications\n- Document reusable components\n- Maintain README with setup instructions\n- Document environment variables\n\n## Project-Specific Rules\n- Use proper image optimization\n- Implement proper font optimization\n- Follow proper authentication patterns\n- Use proper dynamic routing patterns\n- Implement proper middleware usage\n\n## Common Patterns\n```typescript\n// Page Template\nexport const metadata = {\n  title: 'Page Title',\n  description: 'Page description'\n};\n\nexport default async function Page() {\n  return (\n    <main>\n      <h1>Page Content</h1>\n    </main>\n  );\n}\n\n// API Route Handler\nexport async function GET(request: Request) {\n  try {\n    // Handler logic\n    return Response.json({ data: 'success' });\n  } catch (error) {\n    return Response.json({ error: 'Error message' }, { status: 500 });\n  }\n}\n```",
    "filename": "nextjs.md",
    "tags": [
      "fullstack-development",
      "TypeScript"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T10:00:21.064Z",
      "contributor": "Community"
    }
  },
  {
    "id": "general-development-clean-code-practices",
    "title": "clean-code-practices",
    "description": "# Clean Code Practices",
    "category": "general-development",
    "subcategories": [],
    "content": "# Clean Code Practices\n\n## Project Context\nThese instructions guide GitHub Copilot to generate clean, maintainable code following industry best practices.\n\n## Code Style Guidelines\n- Use meaningful and pronounceable variable names\n- Functions should do one thing only\n- Keep functions small (less than 20 lines)\n- Avoid using flags as function parameters\n- Use early returns instead of nested conditionals\n- Avoid magic numbers and strings\n\n## Architecture Patterns\n- Follow SOLID principles\n- Use dependency injection where appropriate\n- Keep classes small and focused\n- Implement interface segregation\n- Use composition over inheritance\n\n## Testing Requirements\n- Write tests before implementing features\n- Each function should have corresponding unit tests\n- Keep tests readable and maintainable\n- Use descriptive test names\n- Follow AAA (Arrange-Act-Assert) pattern\n\n## Documentation Standards\n- Add JSDoc comments for functions and classes\n- Include examples in complex function documentation\n- Document architectural decisions\n- Keep comments up-to-date with code changes\n\n## Project-Specific Rules\n- Mark generated code with appropriate comments\n- Include error handling in all async operations\n- Log errors with appropriate context\n- Use type definitions where possible",
    "filename": "clean-code-practices.md",
    "tags": [
      "general-development"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T09:36:45.577Z",
      "contributor": "Community"
    }
  },
  {
    "id": "frontend-development-react-typescript-instructions",
    "title": "react-typescript-instructions",
    "description": "# React TypeScript Development",
    "category": "frontend-development",
    "subcategories": [],
    "content": "# React TypeScript Development\n\n## Project Context\nGuidelines for developing React applications using TypeScript with modern best practices.\n\n## Code Style Guidelines\n- Use functional components with hooks\n- Define proper interface/type for props\n- Use React.FC for function components\n- Implement proper error boundaries\n- Use CSS-in-JS or module CSS\n\n## Architecture Patterns\n- Implement container/presenter pattern\n- Use custom hooks for reusable logic\n- Follow atomic design principles\n- Implement proper state management\n- Use proper folder structure\n\n## Testing Requirements\n- Use React Testing Library\n- Write tests for hooks\n- Test component rendering\n- Test user interactions\n- Implement integration tests\n\n## Documentation Standards\n- Document component props using TSDoc\n- Include usage examples\n- Document custom hooks\n- Add storybook stories\n\n## Project-Specific Rules\n- Use Next.js App Router\n- Implement proper SEO practices\n- Use proper image optimization\n- Implement accessibility standards\n- Follow performance best practices",
    "filename": "react-typescript-instructions.md",
    "tags": [
      "frontend-development",
      "TypeScript",
      "React"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T09:36:39.616Z",
      "contributor": "Community"
    }
  },
  {
    "id": "backend-development-node-typescript-instructions",
    "title": "node-typescript-instructions",
    "description": "# Node.js TypeScript Development",
    "category": "backend-development",
    "subcategories": [],
    "content": "# Node.js TypeScript Development\n\n## Project Context\nGuidelines for developing Node.js applications using TypeScript with focus on scalability and maintainability.\n\n## Code Style Guidelines\n- Use proper TypeScript types/interfaces\n- Implement proper error handling\n- Use async/await consistently\n- Follow RESTful API conventions\n- Use proper logging\n\n## Architecture Patterns\n- Follow clean architecture principles\n- Implement repository pattern\n- Use dependency injection\n- Implement proper middleware pattern\n- Use proper service layer\n\n## Testing Requirements\n- Implement unit tests using Jest\n- Write integration tests\n- Use proper mocking\n- Test error scenarios\n- Implement API tests\n\n## Documentation Standards\n- Use OpenAPI/Swagger for API docs\n- Document environment variables\n- Include setup instructions\n- Document database schemas\n- Add API usage examples\n\n## Project-Specific Rules\n- Use proper security practices\n- Implement rate limiting\n- Use proper validation\n- Implement proper caching\n- Follow 12-factor app principles",
    "filename": "node-typescript-instructions.md",
    "tags": [
      "backend-development",
      "TypeScript",
      "Node"
    ],
    "metadata": {
      "language": "General",
      "framework": null,
      "compatibility": [
        "VS Code",
        "Visual Studio",
        "JetBrains",
        "Neovim"
      ],
      "difficulty": "Intermediate",
      "topics": [],
      "lastUpdated": "2025-02-17T09:36:37.079Z",
      "contributor": "Community"
    }
  }
]